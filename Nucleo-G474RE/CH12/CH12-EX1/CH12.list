
CH12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d84  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007f68  08007f68  00017f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a4  080083a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083ac  080083ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080083b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001dc  08008590  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008590  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001056b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a7  00000000  00000000  00030777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00032820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000335a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027449  00000000  00000000  00034258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df1d  00000000  00000000  0005b6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe7e7  00000000  00000000  000695be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a3c  00000000  00000000  00167df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007f4c 	.word	0x08007f4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08007f4c 	.word	0x08007f4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <main>:
UART_HandleTypeDef huart2;
char msg[30];
uint16_t rawValue;
float temp;

int main(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fbc1 	bl	800171a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f902 	bl	80011a0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f998 	bl	80012d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa0:	f000 f96c 	bl	800127c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fa4:	f000 f88e 	bl	80010c4 <MX_ADC1_Init>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fa8:	217f      	movs	r1, #127	; 0x7f
 8000faa:	483a      	ldr	r0, [pc, #232]	; (8001094 <main+0x104>)
 8000fac:	f001 ffa8 	bl	8002f00 <HAL_ADCEx_Calibration_Start>

  HAL_Delay(1000);
 8000fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb4:	f000 fc22 	bl	80017fc <HAL_Delay>

  /* Starts the ADC */
  HAL_ADC_Start(&hadc1);
 8000fb8:	4836      	ldr	r0, [pc, #216]	; (8001094 <main+0x104>)
 8000fba:	f001 f855 	bl	8002068 <HAL_ADC_Start>

  while (1) {
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc2:	4834      	ldr	r0, [pc, #208]	; (8001094 <main+0x104>)
 8000fc4:	f001 f934 	bl	8002230 <HAL_ADC_PollForConversion>

    rawValue = HAL_ADC_GetValue(&hadc1);
 8000fc8:	4832      	ldr	r0, [pc, #200]	; (8001094 <main+0x104>)
 8000fca:	f001 fa37 	bl	800243c <HAL_ADC_GetValue>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <main+0x108>)
 8000fd4:	801a      	strh	r2, [r3, #0]
    temp = ((float)rawValue) / 4095 * 3300;
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <main+0x108>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fe2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800109c <main+0x10c>
 8000fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fea:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80010a0 <main+0x110>
 8000fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <main+0x114>)
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
    temp = ((temp - 760.0) / 2.5) + 25;
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <main+0x114>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff facb 	bl	8000598 <__aeabi_f2d>
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <main+0x118>)
 8001008:	f7ff f966 	bl	80002d8 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <main+0x11c>)
 800101a:	f7ff fc3f 	bl	800089c <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <main+0x120>)
 800102c:	f7ff f956 	bl	80002dc <__adddf3>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fdde 	bl	8000bf8 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <main+0x114>)
 8001040:	6013      	str	r3, [r2, #0]

    sprintf(msg, "ADC rawValue: %hu\r\n", rawValue);
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <main+0x108>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	491a      	ldr	r1, [pc, #104]	; (80010b4 <main+0x124>)
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <main+0x128>)
 800104c:	f004 fd52 	bl	8005af4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <main+0x128>)
 8001052:	f7ff f8e5 	bl	8000220 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105e:	4916      	ldr	r1, [pc, #88]	; (80010b8 <main+0x128>)
 8001060:	4816      	ldr	r0, [pc, #88]	; (80010bc <main+0x12c>)
 8001062:	f003 fbdd 	bl	8004820 <HAL_UART_Transmit>

    sprintf(msg, "Temperature: %f\r\n", temp);
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <main+0x114>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa94 	bl	8000598 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4912      	ldr	r1, [pc, #72]	; (80010c0 <main+0x130>)
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <main+0x128>)
 8001078:	f004 fd3c 	bl	8005af4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <main+0x128>)
 800107e:	f7ff f8cf 	bl	8000220 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	490b      	ldr	r1, [pc, #44]	; (80010b8 <main+0x128>)
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <main+0x12c>)
 800108e:	f003 fbc7 	bl	8004820 <HAL_UART_Transmit>
    while(1);
 8001092:	e7fe      	b.n	8001092 <main+0x102>
 8001094:	2000022c 	.word	0x2000022c
 8001098:	20000204 	.word	0x20000204
 800109c:	457ff000 	.word	0x457ff000
 80010a0:	454e4000 	.word	0x454e4000
 80010a4:	20000228 	.word	0x20000228
 80010a8:	4087c000 	.word	0x4087c000
 80010ac:	40040000 	.word	0x40040000
 80010b0:	40390000 	.word	0x40390000
 80010b4:	08007f68 	.word	0x08007f68
 80010b8:	20000208 	.word	0x20000208
 80010bc:	20000298 	.word	0x20000298
 80010c0:	08007f7c 	.word	0x08007f7c

080010c4 <MX_ADC1_Init>:
  }
}

static void MX_ADC1_Init(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	2220      	movs	r2, #32
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f89c 	bl	8005210 <memset>
  ADC_MultiModeTypeDef multimode = {0};
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution,
   *  Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_ADC1_Init+0xd4>)
 80010e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_ADC1_Init+0xd4>)
 80010ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <MX_ADC1_Init+0xd4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_ADC1_Init+0xd4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001106:	2201      	movs	r2, #1
 8001108:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <MX_ADC1_Init+0xd4>)
 800110c:	2204      	movs	r2, #4
 800110e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001112:	2200      	movs	r2, #0
 8001114:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001118:	2201      	movs	r2, #1
 800111a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC1_Init+0xd4>)
 800111e:	2201      	movs	r2, #1
 8001120:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_ADC1_Init+0xd4>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001132:	2200      	movs	r2, #0
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC1_Init+0xd4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  HAL_ADC_Init(&hadc1);
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <MX_ADC1_Init+0xd4>)
 800114e:	f000 fdc9 	bl	8001ce4 <HAL_ADC_Init>

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <MX_ADC1_Init+0xd4>)
 800115c:	f001 ff32 	bl	8002fc4 <HAL_ADCEx_MultiModeConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001166:	f000 f91b 	bl	80013a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding
   *  rank in the sequencer and its sample time. */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_ADC1_Init+0xd8>)
 800116c:	613b      	str	r3, [r7, #16]
  sConfig.Rank = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001172:	2307      	movs	r3, #7
 8001174:	61bb      	str	r3, [r7, #24]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001176:	237f      	movs	r3, #127	; 0x7f
 8001178:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117a:	2304      	movs	r3, #4
 800117c:	623b      	str	r3, [r7, #32]
  sConfig.Offset = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_ADC1_Init+0xd4>)
 800118a:	f001 f965 	bl	8002458 <HAL_ADC_ConfigChannel>
}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000022c 	.word	0x2000022c
 800119c:	c7520000 	.word	0xc7520000

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a8      	sub	sp, #160	; 0xa0
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011aa:	2238      	movs	r2, #56	; 0x38
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 f82e 	bl	8005210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2254      	movs	r2, #84	; 0x54
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 f820 	bl	8005210 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011d4:	f002 faa0 	bl	8003718 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2340      	movs	r3, #64	; 0x40
 80011e4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 9;
 80011f8:	2309      	movs	r3, #9
 80011fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800120a:	2306      	movs	r3, #6
 800120c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fb33 	bl	8003880 <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001220:	f000 f8be 	bl	80013a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2303      	movs	r3, #3
 800122a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001234:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fe34 	bl	8003eb0 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800124e:	f000 f8a7 	bl	80013a0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001252:	f248 0302 	movw	r3, #32770	; 0x8002
 8001256:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800125c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4618      	mov	r0, r3
 8001266:	f003 f83f 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001270:	f000 f896 	bl	80013a0 <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	37a0      	adds	r7, #160	; 0xa0
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_USART2_UART_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f003 fa64 	bl	8004780 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012be:	f000 f86f 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000298 	.word	0x20000298
 80012cc:	40004400 	.word	0x40004400

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <MX_GPIO_Init+0xc4>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <MX_GPIO_Init+0xc4>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <MX_GPIO_Init+0xc4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <MX_GPIO_Init+0xc4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a24      	ldr	r2, [pc, #144]	; (8001394 <MX_GPIO_Init+0xc4>)
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_GPIO_Init+0xc4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_GPIO_Init+0xc4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <MX_GPIO_Init+0xc4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_GPIO_Init+0xc4>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_GPIO_Init+0xc4>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <MX_GPIO_Init+0xc4>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_GPIO_Init+0xc4>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2120      	movs	r1, #32
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134e:	f002 f9a7 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_GPIO_Init+0xc8>)
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_GPIO_Init+0xcc>)
 8001368:	f002 f818 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800136c:	2320      	movs	r3, #32
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f002 f809 	bl	800339c <HAL_GPIO_Init>
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	10110000 	.word	0x10110000
 800139c:	48000800 	.word	0x48000800

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_MspInit+0x44>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_MspInit+0x44>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6613      	str	r3, [r2, #96]	; 0x60
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_MspInit+0x44>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_MspInit+0x44>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_MspInit+0x44>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_MspInit+0x44>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013e2:	f002 fa3d 	bl	8003860 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001404:	d10b      	bne.n	800141e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_ADC_MspInit+0x38>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_ADC_MspInit+0x38>)
 800140c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_ADC_MspInit+0x38>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_UART_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d128      	bne.n	80014a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_UART_MspInit+0x80>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001482:	230c      	movs	r3, #12
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001492:	2307      	movs	r3, #7
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 ff7c 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004400 	.word	0x40004400
 80014b0:	40021000 	.word	0x40021000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f95e 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800150c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001510:	f002 f8de 	bl	80036d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_kill>:

int _kill(int pid, int sig)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001532:	f003 fe43 	bl	80051bc <__errno>
 8001536:	4603      	mov	r3, r0
 8001538:	2216      	movs	r2, #22
 800153a:	601a      	str	r2, [r3, #0]
	return -1;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_exit>:

void _exit (int status)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffe7 	bl	8001528 <_kill>
	while (1) {}		/* Make sure we hang here */
 800155a:	e7fe      	b.n	800155a <_exit+0x12>

0800155c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e00a      	b.n	8001584 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800156e:	f3af 8000 	nop.w
 8001572:	4601      	mov	r1, r0
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	b2ca      	uxtb	r2, r1
 800157c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf0      	blt.n	800156e <_read+0x12>
	}

return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e009      	b.n	80015bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf1      	blt.n	80015a8 <_write+0x12>
	}
	return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_close>:

int _close(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f6:	605a      	str	r2, [r3, #4]
	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_isatty>:

int _isatty(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
	return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f003 fda8 	bl	80051bc <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20020000 	.word	0x20020000
 8001698:	00000400 	.word	0x00000400
 800169c:	200001f8 	.word	0x200001f8
 80016a0:	20000340 	.word	0x20000340

080016a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <LoopForever+0xe>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e4:	4c0b      	ldr	r4, [pc, #44]	; (8001714 <LoopForever+0x16>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016f2:	f7ff ffd7 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f003 fd67 	bl	80051c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f7ff fc49 	bl	8000f90 <main>

080016fe <LoopForever>:

LoopForever:
    b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   r0, =_estack
 8001700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800170c:	080083b4 	.word	0x080083b4
  ldr r2, =_sbss
 8001710:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001714:	2000033c 	.word	0x2000033c

08001718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_2_IRQHandler>

0800171a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f001 fe07 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f80e 	bl	800174c <HAL_InitTick>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e001      	b.n	8001740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173c:	f7ff fe36 	bl	80013ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001740:	79fb      	ldrb	r3, [r7, #7]

}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_InitTick+0x68>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d022      	beq.n	80017a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_InitTick+0x6c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_InitTick+0x68>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800176c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fe04 	bl	8003382 <HAL_SYSTICK_Config>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10f      	bne.n	80017a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d809      	bhi.n	800179a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800178e:	f001 fdde 	bl	800334e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_InitTick+0x70>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e007      	b.n	80017aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e004      	b.n	80017aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x1c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x20>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_IncTick+0x1c>)
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000328 	.word	0x20000328
 80017e0:	20000008 	.word	0x20000008

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000328 	.word	0x20000328

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001814:	d004      	beq.n	8001820 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_Delay+0x40>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001820:	bf00      	nop
 8001822:	f7ff ffdf 	bl	80017e4 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	429a      	cmp	r2, r3
 8001830:	d8f7      	bhi.n	8001822 <HAL_Delay+0x26>
  {
  }
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000008 	.word	0x20000008

08001840 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	609a      	str	r2, [r3, #8]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3360      	adds	r3, #96	; 0x60
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LL_ADC_SetOffset+0x44>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	4313      	orrs	r3, r2
 80018d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	03fff000 	.word	0x03fff000

080018f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3360      	adds	r3, #96	; 0x60
 80018fe:	461a      	mov	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001952:	b480      	push	{r7}
 8001954:	b087      	sub	sp, #28
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3360      	adds	r3, #96	; 0x60
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3360      	adds	r3, #96	; 0x60
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	615a      	str	r2, [r3, #20]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3330      	adds	r3, #48	; 0x30
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	4413      	add	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	211f      	movs	r1, #31
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	f003 011f 	and.w	r1, r3, #31
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3314      	adds	r3, #20
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	0e5b      	lsrs	r3, r3, #25
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0d1b      	lsrs	r3, r3, #20
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2107      	movs	r1, #7
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	0d1b      	lsrs	r3, r3, #20
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0318 	and.w	r3, r3, #24
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001adc:	40d9      	lsrs	r1, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	0007ffff 	.word	0x0007ffff

08001b00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6093      	str	r3, [r2, #8]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bc0:	d101      	bne.n	8001bc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c10:	f043 0202 	orr.w	r2, r3, #2
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_IsEnabled+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_IsEnabled+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_IsDisableOngoing+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_IsDisableOngoing+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c84:	f043 0204 	orr.w	r2, r3, #4
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d101      	bne.n	8001cd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e1af      	b.n	800205e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fb71 	bl	80013f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff19 	bl	8001b5c <LL_ADC_IsDeepPowerDownEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff feff 	bl	8001b38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff34 	bl	8001bac <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff18 	bl	8001b84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d54:	4b9f      	ldr	r3, [pc, #636]	; (8001fd4 <HAL_ADC_Init+0x2f0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	4a9f      	ldr	r2, [pc, #636]	; (8001fd8 <HAL_ADC_Init+0x2f4>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff16 	bl	8001bac <LL_ADC_IsInternalRegulatorEnabled>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff76 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 8001dac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 8148 	bne.w	800204c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 8144 	bne.w	800204c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff23 	bl	8001c24 <LL_ADC_IsEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d141      	bne.n	8001e68 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_Init+0x114>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7a      	ldr	r2, [pc, #488]	; (8001fdc <HAL_ADC_Init+0x2f8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d10f      	bne.n	8001e18 <HAL_ADC_Init+0x134>
 8001df8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dfc:	f7ff ff12 	bl	8001c24 <LL_ADC_IsEnabled>
 8001e00:	4604      	mov	r4, r0
 8001e02:	4876      	ldr	r0, [pc, #472]	; (8001fdc <HAL_ADC_Init+0x2f8>)
 8001e04:	f7ff ff0e 	bl	8001c24 <LL_ADC_IsEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e012      	b.n	8001e3e <HAL_ADC_Init+0x15a>
 8001e18:	4871      	ldr	r0, [pc, #452]	; (8001fe0 <HAL_ADC_Init+0x2fc>)
 8001e1a:	f7ff ff03 	bl	8001c24 <LL_ADC_IsEnabled>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4870      	ldr	r0, [pc, #448]	; (8001fe4 <HAL_ADC_Init+0x300>)
 8001e22:	f7ff feff 	bl	8001c24 <LL_ADC_IsEnabled>
 8001e26:	4603      	mov	r3, r0
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	486f      	ldr	r0, [pc, #444]	; (8001fe8 <HAL_ADC_Init+0x304>)
 8001e2c:	f7ff fefa 	bl	8001c24 <LL_ADC_IsEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4323      	orrs	r3, r4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_Init+0x172>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a62      	ldr	r2, [pc, #392]	; (8001fdc <HAL_ADC_Init+0x2f8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x176>
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_ADC_Init+0x308>)
 8001e58:	e000      	b.n	8001e5c <HAL_ADC_Init+0x178>
 8001e5a:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <HAL_ADC_Init+0x30c>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7ff fcec 	bl	8001840 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7f5b      	ldrb	r3, [r3, #29]
 8001e6c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e72:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e78:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e7e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e86:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d106      	bne.n	8001ea4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	045b      	lsls	r3, r3, #17
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_ADC_Init+0x310>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	69b9      	ldr	r1, [r7, #24]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fed2 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 8001ef4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fedf 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 8001f00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d17f      	bne.n	8002008 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d17c      	bne.n	8002008 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f12:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f1a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f2a:	f023 0302 	bic.w	r3, r3, #2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d017      	beq.n	8001f70 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6911      	ldr	r1, [r2, #16]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f6e:	e013      	b.n	8001f98 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f94:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12a      	bne.n	8001ff8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	e019      	b.n	8002008 <HAL_ADC_Init+0x324>
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	053e2d63 	.word	0x053e2d63
 8001fdc:	50000100 	.word	0x50000100
 8001fe0:	50000400 	.word	0x50000400
 8001fe4:	50000500 	.word	0x50000500
 8001fe8:	50000600 	.word	0x50000600
 8001fec:	50000300 	.word	0x50000300
 8001ff0:	50000700 	.word	0x50000700
 8001ff4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10c      	bne.n	800202a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f023 010f 	bic.w	r1, r3, #15
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	1e5a      	subs	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
 8002028:	e007      	b.n	800203a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 020f 	bic.w	r2, r2, #15
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	65da      	str	r2, [r3, #92]	; 0x5c
 800204a:	e007      	b.n	800205c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800205c:	7ffb      	ldrb	r3, [r7, #31]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop

08002068 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002078:	d004      	beq.n	8002084 <HAL_ADC_Start+0x1c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_ADC_Start+0x1b4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_ADC_Start+0x20>
 8002084:	4b66      	ldr	r3, [pc, #408]	; (8002220 <HAL_ADC_Start+0x1b8>)
 8002086:	e000      	b.n	800208a <HAL_ADC_Start+0x22>
 8002088:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_ADC_Start+0x1bc>)
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fd38 	bl	8001b00 <LL_ADC_GetMultimode>
 8002090:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fdfe 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 80b4 	bne.w	800220c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Start+0x4a>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e0af      	b.n	8002212 <HAL_ADC_Start+0x1aa>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fe0c 	bl	8002cd8 <ADC_Enable>
 80020c0:	4603      	mov	r3, r0
 80020c2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 809b 	bne.w	8002202 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a4d      	ldr	r2, [pc, #308]	; (800221c <HAL_ADC_Start+0x1b4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_ADC_Start+0x96>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a4e      	ldr	r2, [pc, #312]	; (8002228 <HAL_ADC_Start+0x1c0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d002      	beq.n	80020fa <HAL_ADC_Start+0x92>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	e003      	b.n	8002102 <HAL_ADC_Start+0x9a>
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <HAL_ADC_Start+0x1c4>)
 80020fc:	e001      	b.n	8002102 <HAL_ADC_Start+0x9a>
 80020fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4293      	cmp	r3, r2
 8002108:	d002      	beq.n	8002110 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002128:	d106      	bne.n	8002138 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	f023 0206 	bic.w	r2, r3, #6
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	661a      	str	r2, [r3, #96]	; 0x60
 8002136:	e002      	b.n	800213e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	221c      	movs	r2, #28
 8002144:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_ADC_Start+0x1b4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_ADC_Start+0x104>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_ADC_Start+0x1c0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d002      	beq.n	8002168 <HAL_ADC_Start+0x100>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	e003      	b.n	8002170 <HAL_ADC_Start+0x108>
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_ADC_Start+0x1c4>)
 800216a:	e001      	b.n	8002170 <HAL_ADC_Start+0x108>
 800216c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4293      	cmp	r3, r2
 8002176:	d008      	beq.n	800218a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d002      	beq.n	800218a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b09      	cmp	r3, #9
 8002188:	d114      	bne.n	80021b4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fd5f 	bl	8001c70 <LL_ADC_REG_StartConversion>
 80021b2:	e02d      	b.n	8002210 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a15      	ldr	r2, [pc, #84]	; (800221c <HAL_ADC_Start+0x1b4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_ADC_Start+0x176>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_ADC_Start+0x1c0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d002      	beq.n	80021da <HAL_ADC_Start+0x172>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	e003      	b.n	80021e2 <HAL_ADC_Start+0x17a>
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_ADC_Start+0x1c4>)
 80021dc:	e001      	b.n	80021e2 <HAL_ADC_Start+0x17a>
 80021de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021e2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00f      	beq.n	8002210 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002200:	e006      	b.n	8002210 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800220a:	e001      	b.n	8002210 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002210:	7dfb      	ldrb	r3, [r7, #23]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	50000100 	.word	0x50000100
 8002220:	50000300 	.word	0x50000300
 8002224:	50000700 	.word	0x50000700
 8002228:	50000500 	.word	0x50000500
 800222c:	50000400 	.word	0x50000400

08002230 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002242:	d004      	beq.n	800224e <HAL_ADC_PollForConversion+0x1e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_ADC_PollForConversion+0x1f8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_ADC_PollForConversion+0x22>
 800224e:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_ADC_PollForConversion+0x1fc>)
 8002250:	e000      	b.n	8002254 <HAL_ADC_PollForConversion+0x24>
 8002252:	4b77      	ldr	r3, [pc, #476]	; (8002430 <HAL_ADC_PollForConversion+0x200>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fc53 	bl	8001b00 <LL_ADC_GetMultimode>
 800225a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d102      	bne.n	800226a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002264:	2308      	movs	r3, #8
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	e037      	b.n	80022da <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d002      	beq.n	800227c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b09      	cmp	r3, #9
 800227a:	d111      	bne.n	80022a0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0c1      	b.n	800241e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800229a:	2304      	movs	r3, #4
 800229c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800229e:	e01c      	b.n	80022da <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a8:	d004      	beq.n	80022b4 <HAL_ADC_PollForConversion+0x84>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_ADC_PollForConversion+0x1f8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x88>
 80022b4:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_ADC_PollForConversion+0x1fc>)
 80022b6:	e000      	b.n	80022ba <HAL_ADC_PollForConversion+0x8a>
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_ADC_PollForConversion+0x200>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc2e 	bl	8001b1c <LL_ADC_GetMultiDMATransfer>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0a3      	b.n	800241e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022d6:	2304      	movs	r3, #4
 80022d8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022da:	f7ff fa83 	bl	80017e4 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022e0:	e021      	b.n	8002326 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e8:	d01d      	beq.n	8002326 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022ea:	f7ff fa7b 	bl	80017e4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <HAL_ADC_PollForConversion+0xd0>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d112      	bne.n	8002326 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e07b      	b.n	800241e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0d6      	beq.n	80022e2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fb4d 	bl	80019e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01c      	beq.n	800238a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7f5b      	ldrb	r3, [r3, #29]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d118      	bne.n	800238a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d111      	bne.n	800238a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <HAL_ADC_PollForConversion+0x1f8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x178>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <HAL_ADC_PollForConversion+0x204>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d002      	beq.n	80023a4 <HAL_ADC_PollForConversion+0x174>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e003      	b.n	80023ac <HAL_ADC_PollForConversion+0x17c>
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_ADC_PollForConversion+0x208>)
 80023a6:	e001      	b.n	80023ac <HAL_ADC_PollForConversion+0x17c>
 80023a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d008      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d002      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b09      	cmp	r3, #9
 80023c4:	d104      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e014      	b.n	80023fa <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_ADC_PollForConversion+0x1f8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_ADC_PollForConversion+0x1be>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_ADC_PollForConversion+0x204>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d002      	beq.n	80023ea <HAL_ADC_PollForConversion+0x1ba>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_PollForConversion+0x1c2>
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_ADC_PollForConversion+0x208>)
 80023ec:	e001      	b.n	80023f2 <HAL_ADC_PollForConversion+0x1c2>
 80023ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d104      	bne.n	800240a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2208      	movs	r2, #8
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e008      	b.n	800241c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	220c      	movs	r2, #12
 800241a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	50000100 	.word	0x50000100
 800242c:	50000300 	.word	0x50000300
 8002430:	50000700 	.word	0x50000700
 8002434:	50000500 	.word	0x50000500
 8002438:	50000400 	.word	0x50000400

0800243c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b0b6      	sub	sp, #216	; 0xd8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_ADC_ConfigChannel+0x24>
 8002476:	2302      	movs	r3, #2
 8002478:	f000 bc13 	b.w	8002ca2 <HAL_ADC_ConfigChannel+0x84a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fc05 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 83f3 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f7ff fab1 	bl	8001a0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fbf3 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 80024b2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fbff 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 80024c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 81d9 	bne.w	8002880 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 81d4 	bne.w	8002880 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024e0:	d10f      	bne.n	8002502 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	4619      	mov	r1, r3
 80024ee:	f7ff fab8 	bl	8001a62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fa5f 	bl	80019be <LL_ADC_SetSamplingTimeCommonConfig>
 8002500:	e00e      	b.n	8002520 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	461a      	mov	r2, r3
 8002510:	f7ff faa7 	bl	8001a62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fa4f 	bl	80019be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	08db      	lsrs	r3, r3, #3
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b04      	cmp	r3, #4
 8002540:	d022      	beq.n	8002588 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002552:	f7ff f9a9 	bl	80018a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	461a      	mov	r2, r3
 8002564:	f7ff f9f5 	bl	8001952 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6919      	ldr	r1, [r3, #16]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7f1b      	ldrb	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d102      	bne.n	800257e <HAL_ADC_ConfigChannel+0x126>
 8002578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257c:	e000      	b.n	8002580 <HAL_ADC_ConfigChannel+0x128>
 800257e:	2300      	movs	r3, #0
 8002580:	461a      	mov	r2, r3
 8002582:	f7ff fa01 	bl	8001988 <LL_ADC_SetOffsetSaturation>
 8002586:	e17b      	b.n	8002880 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff f9ae 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x15c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f9a3 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 021f 	and.w	r2, r3, #31
 80025b2:	e01e      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x19a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f998 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e004      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_ADC_ConfigChannel+0x1b2>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	e018      	b.n	800263c <HAL_ADC_ConfigChannel+0x1e4>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800261e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e004      	b.n	800263c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800263c:	429a      	cmp	r2, r3
 800263e:	d106      	bne.n	800264e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f967 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f94b 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <HAL_ADC_ConfigChannel+0x222>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f940 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	e01e      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x260>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff f935 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002686:	4603      	mov	r3, r0
 8002688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e004      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80026ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x278>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	e018      	b.n	8002702 <HAL_ADC_ConfigChannel+0x2aa>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e004      	b.n	8002702 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80026f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002702:	429a      	cmp	r2, r3
 8002704:	d106      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f904 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2102      	movs	r1, #2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f8e8 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x2e8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff f8dd 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	e01e      	b.n	800277e <HAL_ADC_ConfigChannel+0x326>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2102      	movs	r1, #2
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f8d2 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800275e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e004      	b.n	800277c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x33e>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	e016      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x36c>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e004      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80027ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d106      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff f8a3 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2103      	movs	r1, #3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f887 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x3aa>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2103      	movs	r1, #3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f87c 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	e017      	b.n	8002832 <HAL_ADC_ConfigChannel+0x3da>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2103      	movs	r1, #3
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f871 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800281a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800281c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800281e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_ADC_ConfigChannel+0x3f2>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	e011      	b.n	800286e <HAL_ADC_ConfigChannel+0x416>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800285c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e003      	b.n	800286e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800286e:	429a      	cmp	r2, r3
 8002870:	d106      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	2103      	movs	r1, #3
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f84e 	bl	800191c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f9cd 	bl	8001c24 <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f040 813d 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f7ff f90a 	bl	8001ab8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4aa2      	ldr	r2, [pc, #648]	; (8002b34 <HAL_ADC_ConfigChannel+0x6dc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f040 812e 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x480>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e019      	b.n	800290c <HAL_ADC_ConfigChannel+0x4b4>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2b09      	cmp	r3, #9
 8002904:	bf94      	ite	ls
 8002906:	2301      	movls	r3, #1
 8002908:	2300      	movhi	r3, #0
 800290a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290c:	2b00      	cmp	r3, #0
 800290e:	d079      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_ADC_ConfigChannel+0x4d4>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	3301      	adds	r3, #1
 8002924:	069b      	lsls	r3, r3, #26
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	e015      	b.n	8002958 <HAL_ADC_ConfigChannel+0x500>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x520>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	e017      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x550>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	ea42 0103 	orr.w	r1, r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x576>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	051b      	lsls	r3, r3, #20
 80029cc:	e018      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x5a8>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a00:	430b      	orrs	r3, r1
 8002a02:	e07e      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x5c8>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	3301      	adds	r3, #1
 8002a18:	069b      	lsls	r3, r3, #26
 8002a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a1e:	e015      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x5f4>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	069b      	lsls	r3, r3, #26
 8002a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x614>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	e017      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x644>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	61fb      	str	r3, [r7, #28]
  return result;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	ea42 0103 	orr.w	r1, r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x670>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	3b1e      	subs	r3, #30
 8002ac0:	051b      	lsls	r3, r3, #20
 8002ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	e01b      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x6a8>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	613b      	str	r3, [r7, #16]
  return result;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	3b1e      	subs	r3, #30
 8002afa:	051b      	lsls	r3, r3, #20
 8002afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b00:	430b      	orrs	r3, r1
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	6892      	ldr	r2, [r2, #8]
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fe ffab 	bl	8001a62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_ADC_ConfigChannel+0x6e0>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80be 	beq.w	8002c96 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b22:	d004      	beq.n	8002b2e <HAL_ADC_ConfigChannel+0x6d6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_ADC_ConfigChannel+0x6e4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10a      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x6ec>
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_ADC_ConfigChannel+0x6e8>)
 8002b30:	e009      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x6ee>
 8002b32:	bf00      	nop
 8002b34:	407f0000 	.word	0x407f0000
 8002b38:	80080000 	.word	0x80080000
 8002b3c:	50000100 	.word	0x50000100
 8002b40:	50000300 	.word	0x50000300
 8002b44:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_ADC_ConfigChannel+0x854>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fea0 	bl	800188c <LL_ADC_GetCommonPathInternalCh>
 8002b4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a56      	ldr	r2, [pc, #344]	; (8002cb0 <HAL_ADC_ConfigChannel+0x858>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x70c>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a55      	ldr	r2, [pc, #340]	; (8002cb4 <HAL_ADC_ConfigChannel+0x85c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d13a      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d134      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b78:	d005      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x72e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <HAL_ADC_ConfigChannel+0x860>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	f040 8085 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8e:	d004      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x742>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_ADC_ConfigChannel+0x864>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x746>
 8002b9a:	4a49      	ldr	r2, [pc, #292]	; (8002cc0 <HAL_ADC_ConfigChannel+0x868>)
 8002b9c:	e000      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x748>
 8002b9e:	4a43      	ldr	r2, [pc, #268]	; (8002cac <HAL_ADC_ConfigChannel+0x854>)
 8002ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f7fe fe5b 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb0:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <HAL_ADC_ConfigChannel+0x86c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	4a44      	ldr	r2, [pc, #272]	; (8002cc8 <HAL_ADC_ConfigChannel+0x870>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bca:	e002      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f9      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd8:	e05a      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_ADC_ConfigChannel+0x874>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d125      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x7d8>
 8002be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d11f      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a31      	ldr	r2, [pc, #196]	; (8002cbc <HAL_ADC_ConfigChannel+0x864>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d104      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x7ac>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a34      	ldr	r2, [pc, #208]	; (8002cd0 <HAL_ADC_ConfigChannel+0x878>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d047      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x7c0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <HAL_ADC_ConfigChannel+0x864>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7c4>
 8002c18:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <HAL_ADC_ConfigChannel+0x868>)
 8002c1a:	e000      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x7c6>
 8002c1c:	4a23      	ldr	r2, [pc, #140]	; (8002cac <HAL_ADC_ConfigChannel+0x854>)
 8002c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7fe fe1c 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c2e:	e031      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <HAL_ADC_ConfigChannel+0x87c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d12d      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d127      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_ADC_ConfigChannel+0x864>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d022      	beq.n	8002c96 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_ConfigChannel+0x80c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_ADC_ConfigChannel+0x864>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x810>
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_ADC_ConfigChannel+0x868>)
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x812>
 8002c68:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_ADC_ConfigChannel+0x854>)
 8002c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f7fe fdf6 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
 8002c7a:	e00c      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c8e:	e002      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	37d8      	adds	r7, #216	; 0xd8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	50000700 	.word	0x50000700
 8002cb0:	c3210000 	.word	0xc3210000
 8002cb4:	90c00010 	.word	0x90c00010
 8002cb8:	50000600 	.word	0x50000600
 8002cbc:	50000100 	.word	0x50000100
 8002cc0:	50000300 	.word	0x50000300
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	053e2d63 	.word	0x053e2d63
 8002ccc:	c7520000 	.word	0xc7520000
 8002cd0:	50000500 	.word	0x50000500
 8002cd4:	cb840000 	.word	0xcb840000

08002cd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ff9d 	bl	8001c24 <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d14d      	bne.n	8002d8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <ADC_Enable+0xc0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	f043 0210 	orr.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e039      	b.n	8002d8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe ff58 	bl	8001bd4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fd5e 	bl	80017e4 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2a:	e028      	b.n	8002d7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe ff77 	bl	8001c24 <LL_ADC_IsEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe ff47 	bl	8001bd4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d46:	f7fe fd4d 	bl	80017e4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d914      	bls.n	8002d7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d00d      	beq.n	8002d7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d1cf      	bne.n	8002d2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	8000003f 	.word	0x8000003f

08002d9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe ff4e 	bl	8001c4a <LL_ADC_IsDisableOngoing>
 8002dae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe ff35 	bl	8001c24 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d047      	beq.n	8002e50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d144      	bne.n	8002e50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030d 	and.w	r3, r3, #13
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10c      	bne.n	8002dee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe ff0f 	bl	8001bfc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2203      	movs	r2, #3
 8002de4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002de6:	f7fe fcfd 	bl	80017e4 <HAL_GetTick>
 8002dea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dec:	e029      	b.n	8002e42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e023      	b.n	8002e52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e0a:	f7fe fceb 	bl	80017e4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d914      	bls.n	8002e42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e007      	b.n	8002e52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1dc      	bne.n	8002e0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <LL_ADC_IsEnabled>:
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsEnabled+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsEnabled+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_StartCalibration>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec6:	d101      	bne.n	8002ecc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_ADC_REG_IsConversionOngoing>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d101      	bne.n	8002ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_ADCEx_Calibration_Start+0x1c>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e04d      	b.n	8002fb8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff39 	bl	8002d9c <ADC_Disable>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d136      	bne.n	8002fa2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f3c:	f023 0302 	bic.w	r3, r3, #2
 8002f40:	f043 0202 	orr.w	r2, r3, #2
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff96 	bl	8002e80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f54:	e014      	b.n	8002f80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d90d      	bls.n	8002f80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	f023 0312 	bic.w	r3, r3, #18
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e01b      	b.n	8002fb8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff94 	bl	8002eb2 <LL_ADC_IsCalibrationOnGoing>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e2      	bne.n	8002f56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	f023 0303 	bic.w	r3, r3, #3
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fa0:	e005      	b.n	8002fae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	f043 0210 	orr.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	0004de01 	.word	0x0004de01

08002fc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b0a1      	sub	sp, #132	; 0x84
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0e7      	b.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002fea:	2300      	movs	r3, #0
 8002fec:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffa:	d102      	bne.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	e009      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6e      	ldr	r2, [pc, #440]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d102      	bne.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800300c:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	e001      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0be      	b.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff4f 	bl	8002eda <LL_ADC_REG_IsConversionOngoing>
 800303c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff49 	bl	8002eda <LL_ADC_REG_IsConversionOngoing>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80a0 	bne.w	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 809c 	bne.w	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003060:	d004      	beq.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a55      	ldr	r2, [pc, #340]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800306c:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800306e:	e000      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003070:	4b56      	ldr	r3, [pc, #344]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003072:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d04b      	beq.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800307c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800308e:	035b      	lsls	r3, r3, #13
 8003090:	430b      	orrs	r3, r1
 8003092:	431a      	orrs	r2, r3
 8003094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003096:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a0:	d004      	beq.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a45      	ldr	r2, [pc, #276]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d10f      	bne.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80030ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030b0:	f7ff fed3 	bl	8002e5a <LL_ADC_IsEnabled>
 80030b4:	4604      	mov	r4, r0
 80030b6:	4841      	ldr	r0, [pc, #260]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030b8:	f7ff fecf 	bl	8002e5a <LL_ADC_IsEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	4323      	orrs	r3, r4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e012      	b.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80030cc:	483c      	ldr	r0, [pc, #240]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030ce:	f7ff fec4 	bl	8002e5a <LL_ADC_IsEnabled>
 80030d2:	4604      	mov	r4, r0
 80030d4:	483b      	ldr	r0, [pc, #236]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030d6:	f7ff fec0 	bl	8002e5a <LL_ADC_IsEnabled>
 80030da:	4603      	mov	r3, r0
 80030dc:	431c      	orrs	r4, r3
 80030de:	483c      	ldr	r0, [pc, #240]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030e0:	f7ff febb 	bl	8002e5a <LL_ADC_IsEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4323      	orrs	r3, r4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d056      	beq.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030fe:	f023 030f 	bic.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	6811      	ldr	r1, [r2, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	430a      	orrs	r2, r1
 800310c:	431a      	orrs	r2, r3
 800310e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003110:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003112:	e047      	b.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003128:	d004      	beq.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10f      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003134:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003138:	f7ff fe8f 	bl	8002e5a <LL_ADC_IsEnabled>
 800313c:	4604      	mov	r4, r0
 800313e:	481f      	ldr	r0, [pc, #124]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003140:	f7ff fe8b 	bl	8002e5a <LL_ADC_IsEnabled>
 8003144:	4603      	mov	r3, r0
 8003146:	4323      	orrs	r3, r4
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e012      	b.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003154:	481a      	ldr	r0, [pc, #104]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003156:	f7ff fe80 	bl	8002e5a <LL_ADC_IsEnabled>
 800315a:	4604      	mov	r4, r0
 800315c:	4819      	ldr	r0, [pc, #100]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800315e:	f7ff fe7c 	bl	8002e5a <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	431c      	orrs	r4, r3
 8003166:	481a      	ldr	r0, [pc, #104]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003168:	f7ff fe77 	bl	8002e5a <LL_ADC_IsEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	4323      	orrs	r3, r4
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800317e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003186:	f023 030f 	bic.w	r3, r3, #15
 800318a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800318c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800318e:	e009      	b.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80031a2:	e000      	b.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3784      	adds	r7, #132	; 0x84
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	50000100 	.word	0x50000100
 80031c0:	50000400 	.word	0x50000400
 80031c4:	50000500 	.word	0x50000500
 80031c8:	50000300 	.word	0x50000300
 80031cc:	50000700 	.word	0x50000700
 80031d0:	50000600 	.word	0x50000600

080031d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	; (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	; (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	; (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
         );
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003304:	d301      	bcc.n	800330a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <SysTick_Config+0x40>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003312:	210f      	movs	r1, #15
 8003314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003318:	f7ff ff8e 	bl	8003238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SysTick_Config+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <SysTick_Config+0x40>)
 8003324:	2207      	movs	r2, #7
 8003326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff47 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800335c:	f7ff ff5e 	bl	800321c <__NVIC_GetPriorityGrouping>
 8003360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	6978      	ldr	r0, [r7, #20]
 8003368:	f7ff ff90 	bl	800328c <NVIC_EncodePriority>
 800336c:	4602      	mov	r2, r0
 800336e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff5f 	bl	8003238 <__NVIC_SetPriority>
}
 800337a:	bf00      	nop
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ffb2 	bl	80032f4 <SysTick_Config>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033aa:	e15a      	b.n	8003662 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 814c 	beq.w	800365c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d00b      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d007      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d8:	2b11      	cmp	r3, #17
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d130      	bne.n	8003446 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341a:	2201      	movs	r2, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0201 	and.w	r2, r3, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0xea>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d123      	bne.n	80034ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	6939      	ldr	r1, [r7, #16]
 80034ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80a6 	beq.w	800365c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003510:	4b5b      	ldr	r3, [pc, #364]	; (8003680 <HAL_GPIO_Init+0x2e4>)
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	4a5a      	ldr	r2, [pc, #360]	; (8003680 <HAL_GPIO_Init+0x2e4>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6613      	str	r3, [r2, #96]	; 0x60
 800351c:	4b58      	ldr	r3, [pc, #352]	; (8003680 <HAL_GPIO_Init+0x2e4>)
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003528:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_GPIO_Init+0x2e8>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	220f      	movs	r2, #15
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003552:	d01f      	beq.n	8003594 <HAL_GPIO_Init+0x1f8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a4c      	ldr	r2, [pc, #304]	; (8003688 <HAL_GPIO_Init+0x2ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d019      	beq.n	8003590 <HAL_GPIO_Init+0x1f4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a4b      	ldr	r2, [pc, #300]	; (800368c <HAL_GPIO_Init+0x2f0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_GPIO_Init+0x1f0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a4a      	ldr	r2, [pc, #296]	; (8003690 <HAL_GPIO_Init+0x2f4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00d      	beq.n	8003588 <HAL_GPIO_Init+0x1ec>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a49      	ldr	r2, [pc, #292]	; (8003694 <HAL_GPIO_Init+0x2f8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <HAL_GPIO_Init+0x1e8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a48      	ldr	r2, [pc, #288]	; (8003698 <HAL_GPIO_Init+0x2fc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_GPIO_Init+0x1e4>
 800357c:	2305      	movs	r3, #5
 800357e:	e00a      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003580:	2306      	movs	r3, #6
 8003582:	e008      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003584:	2304      	movs	r3, #4
 8003586:	e006      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003588:	2303      	movs	r3, #3
 800358a:	e004      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 800358c:	2302      	movs	r3, #2
 800358e:	e002      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003594:	2300      	movs	r3, #0
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	f002 0203 	and.w	r2, r2, #3
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	4093      	lsls	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a6:	4937      	ldr	r1, [pc, #220]	; (8003684 <HAL_GPIO_Init+0x2e8>)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	3302      	adds	r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <HAL_GPIO_Init+0x300>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d8:	4a30      	ldr	r2, [pc, #192]	; (800369c <HAL_GPIO_Init+0x300>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035de:	4b2f      	ldr	r3, [pc, #188]	; (800369c <HAL_GPIO_Init+0x300>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003602:	4a26      	ldr	r2, [pc, #152]	; (800369c <HAL_GPIO_Init+0x300>)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_GPIO_Init+0x300>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <HAL_GPIO_Init+0x300>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_GPIO_Init+0x300>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003656:	4a11      	ldr	r2, [pc, #68]	; (800369c <HAL_GPIO_Init+0x300>)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f ae9d 	bne.w	80033ac <HAL_GPIO_Init+0x10>
  }
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40021000 	.word	0x40021000
 8003684:	40010000 	.word	0x40010000
 8003688:	48000400 	.word	0x48000400
 800368c:	48000800 	.word	0x48000800
 8003690:	48000c00 	.word	0x48000c00
 8003694:	48001000 	.word	0x48001000
 8003698:	48001400 	.word	0x48001400
 800369c:	40010400 	.word	0x40010400

080036a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
 80036ac:	4613      	mov	r3, r2
 80036ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b0:	787b      	ldrb	r3, [r7, #1]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f806 	bl	8003700 <HAL_GPIO_EXTI_Callback>
  }
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40010400 	.word	0x40010400

08003700 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d141      	bne.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003726:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d131      	bne.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003734:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373a:	4a46      	ldr	r2, [pc, #280]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003744:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800374c:	4a41      	ldr	r2, [pc, #260]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003752:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003754:	4b40      	ldr	r3, [pc, #256]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2232      	movs	r2, #50	; 0x32
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	4a3f      	ldr	r2, [pc, #252]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	0c9b      	lsrs	r3, r3, #18
 8003766:	3301      	adds	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800376a:	e002      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3b01      	subs	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377e:	d102      	bne.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f2      	bne.n	800376c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003786:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003792:	d158      	bne.n	8003846 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e057      	b.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379e:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037a8:	e04d      	b.n	8003846 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b0:	d141      	bne.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d131      	bne.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	4a23      	ldr	r2, [pc, #140]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2232      	movs	r2, #50	; 0x32
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	0c9b      	lsrs	r3, r3, #18
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037f6:	e002      	b.n	80037fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380a:	d102      	bne.n	8003812 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f2      	bne.n	80037f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d112      	bne.n	8003846 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e011      	b.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003834:	e007      	b.n	8003846 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003844:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40007000 	.word	0x40007000
 8003858:	20000000 	.word	0x20000000
 800385c:	431bde83 	.word	0x431bde83

08003860 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800386a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386e:	6093      	str	r3, [r2, #8]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40007000 	.word	0x40007000

08003880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e308      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d075      	beq.n	800398a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389e:	4ba3      	ldr	r3, [pc, #652]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a8:	4ba0      	ldr	r3, [pc, #640]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d102      	bne.n	80038be <HAL_RCC_OscConfig+0x3e>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_OscConfig+0x44>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d10b      	bne.n	80038dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	4b99      	ldr	r3, [pc, #612]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d05b      	beq.n	8003988 <HAL_RCC_OscConfig+0x108>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d157      	bne.n	8003988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e2e3      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d106      	bne.n	80038f4 <HAL_RCC_OscConfig+0x74>
 80038e6:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a90      	ldr	r2, [pc, #576]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e01d      	b.n	8003930 <HAL_RCC_OscConfig+0xb0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x98>
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a8a      	ldr	r2, [pc, #552]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b88      	ldr	r3, [pc, #544]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a87      	ldr	r2, [pc, #540]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e00b      	b.n	8003930 <HAL_RCC_OscConfig+0xb0>
 8003918:	4b84      	ldr	r3, [pc, #528]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a83      	ldr	r2, [pc, #524]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 800391e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a80      	ldr	r2, [pc, #512]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd ff54 	bl	80017e4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fd ff50 	bl	80017e4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e2a8      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0xc0>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd ff40 	bl	80017e4 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fd ff3c 	bl	80017e4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e294      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800397a:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0xe8>
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a0:	4b62      	ldr	r3, [pc, #392]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_OscConfig+0x136>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d002      	beq.n	80039bc <HAL_RCC_OscConfig+0x13c>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d11f      	bne.n	80039fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039bc:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x154>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e267      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	4952      	ldr	r1, [pc, #328]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039e8:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <HAL_RCC_OscConfig+0x2b0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd fead 	bl	800174c <HAL_InitTick>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d043      	beq.n	8003a80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e253      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d023      	beq.n	8003a4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a04:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a48      	ldr	r2, [pc, #288]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fee8 	bl	80017e4 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a18:	f7fd fee4 	bl	80017e4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e23c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2a:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	4939      	ldr	r1, [pc, #228]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
 8003a4a:	e01a      	b.n	8003a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fec4 	bl	80017e4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a60:	f7fd fec0 	bl	80017e4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e218      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x1e0>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d03c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fd fe9d 	bl	80017e4 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aae:	f7fd fe99 	bl	80017e4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e1f1      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0ef      	beq.n	8003aae <HAL_RCC_OscConfig+0x22e>
 8003ace:	e01b      	b.n	8003b08 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fd fe80 	bl	80017e4 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fe7c 	bl	80017e4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1d4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ef      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80ab 	beq.w	8003c6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2b4>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e005      	b.n	8003b36 <HAL_RCC_OscConfig+0x2b6>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	20000004 	.word	0x20000004
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	4baf      	ldr	r3, [pc, #700]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	4aae      	ldr	r2, [pc, #696]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6593      	str	r3, [r2, #88]	; 0x58
 8003b46:	4bac      	ldr	r3, [pc, #688]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b52:	2301      	movs	r3, #1
 8003b54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b56:	4ba9      	ldr	r3, [pc, #676]	; (8003dfc <HAL_RCC_OscConfig+0x57c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d118      	bne.n	8003b94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b62:	4ba6      	ldr	r3, [pc, #664]	; (8003dfc <HAL_RCC_OscConfig+0x57c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4aa5      	ldr	r2, [pc, #660]	; (8003dfc <HAL_RCC_OscConfig+0x57c>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fe39 	bl	80017e4 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b76:	f7fd fe35 	bl	80017e4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e18d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b88:	4b9c      	ldr	r3, [pc, #624]	; (8003dfc <HAL_RCC_OscConfig+0x57c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d108      	bne.n	8003bae <HAL_RCC_OscConfig+0x32e>
 8003b9c:	4b96      	ldr	r3, [pc, #600]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	4a95      	ldr	r2, [pc, #596]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bac:	e024      	b.n	8003bf8 <HAL_RCC_OscConfig+0x378>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d110      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x358>
 8003bb6:	4b90      	ldr	r3, [pc, #576]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	4a8e      	ldr	r2, [pc, #568]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc6:	4b8c      	ldr	r3, [pc, #560]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	4a8a      	ldr	r2, [pc, #552]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd6:	e00f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x378>
 8003bd8:	4b87      	ldr	r3, [pc, #540]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	4a86      	ldr	r2, [pc, #536]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be8:	4b83      	ldr	r3, [pc, #524]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	4a82      	ldr	r2, [pc, #520]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d016      	beq.n	8003c2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fdf0 	bl	80017e4 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fd fdec 	bl	80017e4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e142      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ed      	beq.n	8003c08 <HAL_RCC_OscConfig+0x388>
 8003c2c:	e015      	b.n	8003c5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fdd9 	bl	80017e4 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fd fdd5 	bl	80017e4 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e12b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c4c:	4b6a      	ldr	r3, [pc, #424]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ed      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c5a:	7ffb      	ldrb	r3, [r7, #31]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c60:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	4a64      	ldr	r2, [pc, #400]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d03c      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01c      	beq.n	8003cba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c80:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c86:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fd fda8 	bl	80017e4 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c98:	f7fd fda4 	bl	80017e4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0fc      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003caa:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ef      	beq.n	8003c98 <HAL_RCC_OscConfig+0x418>
 8003cb8:	e01b      	b.n	8003cf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cba:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc0:	4a4d      	ldr	r2, [pc, #308]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd fd8b 	bl	80017e4 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cd2:	f7fd fd87 	bl	80017e4 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0df      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ce4:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ef      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80d3 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfc:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	f000 808d 	beq.w	8003e24 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d15a      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fd fd61 	bl	80017e4 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fd fd5d 	bl	80017e4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0b5      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d38:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d44:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <HAL_RCC_OscConfig+0x580>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6a11      	ldr	r1, [r2, #32]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	4311      	orrs	r1, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d5e:	0212      	lsls	r2, r2, #8
 8003d60:	4311      	orrs	r1, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d66:	0852      	lsrs	r2, r2, #1
 8003d68:	3a01      	subs	r2, #1
 8003d6a:	0552      	lsls	r2, r2, #21
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d72:	0852      	lsrs	r2, r2, #1
 8003d74:	3a01      	subs	r2, #1
 8003d76:	0652      	lsls	r2, r2, #25
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d7e:	06d2      	lsls	r2, r2, #27
 8003d80:	430a      	orrs	r2, r1
 8003d82:	491d      	ldr	r1, [pc, #116]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d94:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fd20 	bl	80017e4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fd fd1c 	bl	80017e4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e074      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x528>
 8003dc6:	e06c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <HAL_RCC_OscConfig+0x578>)
 8003de6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fcf8 	bl	80017e4 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df6:	e00e      	b.n	8003e16 <HAL_RCC_OscConfig+0x596>
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fd fcee 	bl	80017e4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e046      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e16:	4b25      	ldr	r3, [pc, #148]	; (8003eac <HAL_RCC_OscConfig+0x62c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x584>
 8003e22:	e03e      	b.n	8003ea2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e039      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e30:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_RCC_OscConfig+0x62c>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0203 	and.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d12c      	bne.n	8003e9e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d123      	bne.n	8003e9e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d11b      	bne.n	8003e9e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d113      	bne.n	8003e9e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	3b01      	subs	r3, #1
 8003e84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d109      	bne.n	8003e9e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	3b01      	subs	r3, #1
 8003e98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e11e      	b.n	8004106 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b91      	ldr	r3, [pc, #580]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d910      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b8e      	ldr	r3, [pc, #568]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 020f 	bic.w	r2, r3, #15
 8003ede:	498c      	ldr	r1, [pc, #560]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b8a      	ldr	r3, [pc, #552]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e106      	b.n	8004106 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d073      	beq.n	8003fec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d129      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0c:	4b81      	ldr	r3, [pc, #516]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0f4      	b.n	8004106 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f1c:	f000 f99e 	bl	800425c <RCC_GetSysClockFreqFromPLLSource>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4a7c      	ldr	r2, [pc, #496]	; (8004118 <HAL_RCC_ClockConfig+0x268>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d93f      	bls.n	8003faa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f2a:	4b7a      	ldr	r3, [pc, #488]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d033      	beq.n	8003faa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d12f      	bne.n	8003faa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f4a:	4b72      	ldr	r3, [pc, #456]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f52:	4a70      	ldr	r2, [pc, #448]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e024      	b.n	8003faa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f68:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0c6      	b.n	8004106 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f78:	4b66      	ldr	r3, [pc, #408]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0be      	b.n	8004106 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f88:	f000 f8ce 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4a61      	ldr	r2, [pc, #388]	; (8004118 <HAL_RCC_ClockConfig+0x268>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d909      	bls.n	8003faa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9e:	4a5d      	ldr	r2, [pc, #372]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003faa:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f023 0203 	bic.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4957      	ldr	r1, [pc, #348]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fc12 	bl	80017e4 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc4:	f7fd fc0e 	bl	80017e4 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e095      	b.n	8004106 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	4b4e      	ldr	r3, [pc, #312]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 020c 	and.w	r2, r3, #12
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1eb      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004004:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a42      	ldr	r2, [pc, #264]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 800400a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800400e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800401c:	4b3d      	ldr	r3, [pc, #244]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004024:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8004026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800402a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b39      	ldr	r3, [pc, #228]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4936      	ldr	r1, [pc, #216]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
 800403e:	e008      	b.n	8004052 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d105      	bne.n	8004052 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004046:	4b33      	ldr	r3, [pc, #204]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4a32      	ldr	r2, [pc, #200]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 800404c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004050:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004052:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d21d      	bcs.n	800409c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004060:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 020f 	bic.w	r2, r3, #15
 8004068:	4929      	ldr	r1, [pc, #164]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004070:	f7fd fbb8 	bl	80017e4 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	e00a      	b.n	800408e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004078:	f7fd fbb4 	bl	80017e4 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e03b      	b.n	8004106 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_ClockConfig+0x260>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d1ed      	bne.n	8004078 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4917      	ldr	r1, [pc, #92]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	490f      	ldr	r1, [pc, #60]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040da:	f000 f825 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_RCC_ClockConfig+0x264>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	490c      	ldr	r1, [pc, #48]	; (800411c <HAL_RCC_ClockConfig+0x26c>)
 80040ec:	5ccb      	ldrb	r3, [r1, r3]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x270>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCC_ClockConfig+0x274>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd fb24 	bl	800174c <HAL_InitTick>
 8004104:	4603      	mov	r3, r0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40022000 	.word	0x40022000
 8004114:	40021000 	.word	0x40021000
 8004118:	04c4b400 	.word	0x04c4b400
 800411c:	08007f90 	.word	0x08007f90
 8004120:	20000000 	.word	0x20000000
 8004124:	20000004 	.word	0x20000004

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800412e:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d102      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e047      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d102      	bne.n	8004152 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800414c:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e03e      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d136      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415e:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3301      	adds	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d10c      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800417c:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004186:	68d2      	ldr	r2, [r2, #12]
 8004188:	0a12      	lsrs	r2, r2, #8
 800418a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
      break;
 8004194:	e00c      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	4a10      	ldr	r2, [pc, #64]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	0a12      	lsrs	r2, r2, #8
 80041a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
      break;
 80041ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0e5b      	lsrs	r3, r3, #25
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	3301      	adds	r3, #1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e001      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041d0:	693b      	ldr	r3, [r7, #16]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	016e3600 	.word	0x016e3600

080041ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000000 	.word	0x20000000

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004208:	f7ff fff0 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4904      	ldr	r1, [pc, #16]	; (800422c <HAL_RCC_GetPCLK1Freq+0x28>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	08007fa0 	.word	0x08007fa0

08004230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004234:	f7ff ffda 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0adb      	lsrs	r3, r3, #11
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4904      	ldr	r1, [pc, #16]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	08007fa0 	.word	0x08007fa0

0800425c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004262:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d10c      	bne.n	800429a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004280:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800428a:	68d2      	ldr	r2, [r2, #12]
 800428c:	0a12      	lsrs	r2, r2, #8
 800428e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	617b      	str	r3, [r7, #20]
    break;
 8004298:	e00c      	b.n	80042b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042a4:	68d2      	ldr	r2, [r2, #12]
 80042a6:	0a12      	lsrs	r2, r2, #8
 80042a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
    break;
 80042b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0e5b      	lsrs	r3, r3, #25
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	3301      	adds	r3, #1
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042ce:	687b      	ldr	r3, [r7, #4]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40021000 	.word	0x40021000
 80042e0:	016e3600 	.word	0x016e3600
 80042e4:	00f42400 	.word	0x00f42400

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f0:	2300      	movs	r3, #0
 80042f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042f4:	2300      	movs	r3, #0
 80042f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8098 	beq.w	8004436 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	4a3f      	ldr	r2, [pc, #252]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004320:	6593      	str	r3, [r2, #88]	; 0x58
 8004322:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432e:	2301      	movs	r3, #1
 8004330:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004332:	4b3a      	ldr	r3, [pc, #232]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a39      	ldr	r2, [pc, #228]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433e:	f7fd fa51 	bl	80017e4 <HAL_GetTick>
 8004342:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004344:	e009      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004346:	f7fd fa4d 	bl	80017e4 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d902      	bls.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	74fb      	strb	r3, [r7, #19]
        break;
 8004358:	e005      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435a:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ef      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004366:	7cfb      	ldrb	r3, [r7, #19]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d159      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800436c:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01e      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	429a      	cmp	r2, r3
 8004386:	d019      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004394:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fd fa0d 	bl	80017e4 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043cc:	e00b      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fd fa09 	bl	80017e4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d902      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	74fb      	strb	r3, [r7, #19]
            break;
 80043e4:	e006      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ec      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004410:	e008      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	74bb      	strb	r3, [r7, #18]
 8004416:	e005      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004418:	40021000 	.word	0x40021000
 800441c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004424:	7c7b      	ldrb	r3, [r7, #17]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	4baf      	ldr	r3, [pc, #700]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	4aae      	ldr	r2, [pc, #696]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004434:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004442:	4ba9      	ldr	r3, [pc, #676]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f023 0203 	bic.w	r2, r3, #3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	49a5      	ldr	r1, [pc, #660]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004464:	4ba0      	ldr	r3, [pc, #640]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f023 020c 	bic.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	499d      	ldr	r1, [pc, #628]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004486:	4b98      	ldr	r3, [pc, #608]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4994      	ldr	r1, [pc, #592]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044a8:	4b8f      	ldr	r3, [pc, #572]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	498c      	ldr	r1, [pc, #560]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044ca:	4b87      	ldr	r3, [pc, #540]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	4983      	ldr	r1, [pc, #524]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ec:	4b7e      	ldr	r3, [pc, #504]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	497b      	ldr	r1, [pc, #492]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4972      	ldr	r1, [pc, #456]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004530:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	496a      	ldr	r1, [pc, #424]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004552:	4b65      	ldr	r3, [pc, #404]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	4961      	ldr	r1, [pc, #388]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004574:	4b5c      	ldr	r3, [pc, #368]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457a:	f023 0203 	bic.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	4959      	ldr	r1, [pc, #356]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004596:	4b54      	ldr	r3, [pc, #336]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4950      	ldr	r1, [pc, #320]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b8:	4b4b      	ldr	r3, [pc, #300]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	4948      	ldr	r1, [pc, #288]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d105      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045f0:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	493a      	ldr	r1, [pc, #232]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460e:	d105      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004610:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004628:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	492c      	ldr	r1, [pc, #176]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004646:	d105      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004648:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800464e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004652:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	491e      	ldr	r1, [pc, #120]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467e:	d105      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004680:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800468a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d015      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4910      	ldr	r1, [pc, #64]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b6:	d105      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d018      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	4902      	ldr	r1, [pc, #8]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046e6:	e001      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x404>
 80046e8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046f4:	d105      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4a20      	ldr	r2, [pc, #128]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d015      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800470e:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	4917      	ldr	r1, [pc, #92]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d105      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004748:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800474c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	4909      	ldr	r1, [pc, #36]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004764:	d105      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4a04      	ldr	r2, [pc, #16]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800476c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004770:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004772:	7cbb      	ldrb	r3, [r7, #18]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000

08004780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e042      	b.n	8004818 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fc fe43 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	; 0x24
 80047ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8c2 	bl	800494c <UART_SetConfig>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e022      	b.n	8004818 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fb80 	bl	8004ee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fc07 	bl	8005024 <UART_CheckIdleState>
 8004816:	4603      	mov	r3, r0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004836:	2b20      	cmp	r3, #32
 8004838:	f040 8083 	bne.w	8004942 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_UART_Transmit+0x28>
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e07b      	b.n	8004944 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_UART_Transmit+0x3a>
 8004856:	2302      	movs	r3, #2
 8004858:	e074      	b.n	8004944 <HAL_UART_Transmit+0x124>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2221      	movs	r2, #33	; 0x21
 800486e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004872:	f7fc ffb7 	bl	80017e4 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004890:	d108      	bne.n	80048a4 <HAL_UART_Transmit+0x84>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e003      	b.n	80048ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80048b4:	e02c      	b.n	8004910 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fbfa 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e039      	b.n	8004944 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	3302      	adds	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e007      	b.n	80048fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1cc      	bne.n	80048b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2200      	movs	r2, #0
 8004924:	2140      	movs	r1, #64	; 0x40
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fbc7 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e006      	b.n	8004944 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e000      	b.n	8004944 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800494c:	b5b0      	push	{r4, r5, r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	4313      	orrs	r3, r2
 800496e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4bb1      	ldr	r3, [pc, #708]	; (8004c3c <UART_SetConfig+0x2f0>)
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	69f9      	ldr	r1, [r7, #28]
 8004980:	430b      	orrs	r3, r1
 8004982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4aa6      	ldr	r2, [pc, #664]	; (8004c40 <UART_SetConfig+0x2f4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80049be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	69f9      	ldr	r1, [r7, #28]
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	f023 010f 	bic.w	r1, r3, #15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a97      	ldr	r2, [pc, #604]	; (8004c44 <UART_SetConfig+0x2f8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d120      	bne.n	8004a2e <UART_SetConfig+0xe2>
 80049ec:	4b96      	ldr	r3, [pc, #600]	; (8004c48 <UART_SetConfig+0x2fc>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d816      	bhi.n	8004a28 <UART_SetConfig+0xdc>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0xb4>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a1d 	.word	0x08004a1d
 8004a08:	08004a17 	.word	0x08004a17
 8004a0c:	08004a23 	.word	0x08004a23
 8004a10:	2301      	movs	r3, #1
 8004a12:	76fb      	strb	r3, [r7, #27]
 8004a14:	e0e7      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	76fb      	strb	r3, [r7, #27]
 8004a1a:	e0e4      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	76fb      	strb	r3, [r7, #27]
 8004a20:	e0e1      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a22:	2308      	movs	r3, #8
 8004a24:	76fb      	strb	r3, [r7, #27]
 8004a26:	e0de      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	76fb      	strb	r3, [r7, #27]
 8004a2c:	e0db      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a86      	ldr	r2, [pc, #536]	; (8004c4c <UART_SetConfig+0x300>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d132      	bne.n	8004a9e <UART_SetConfig+0x152>
 8004a38:	4b83      	ldr	r3, [pc, #524]	; (8004c48 <UART_SetConfig+0x2fc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d828      	bhi.n	8004a98 <UART_SetConfig+0x14c>
 8004a46:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0x100>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004a99 	.word	0x08004a99
 8004a54:	08004a99 	.word	0x08004a99
 8004a58:	08004a99 	.word	0x08004a99
 8004a5c:	08004a8d 	.word	0x08004a8d
 8004a60:	08004a99 	.word	0x08004a99
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004a99 	.word	0x08004a99
 8004a6c:	08004a87 	.word	0x08004a87
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004a93 	.word	0x08004a93
 8004a80:	2300      	movs	r3, #0
 8004a82:	76fb      	strb	r3, [r7, #27]
 8004a84:	e0af      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a86:	2302      	movs	r3, #2
 8004a88:	76fb      	strb	r3, [r7, #27]
 8004a8a:	e0ac      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	76fb      	strb	r3, [r7, #27]
 8004a90:	e0a9      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a92:	2308      	movs	r3, #8
 8004a94:	76fb      	strb	r3, [r7, #27]
 8004a96:	e0a6      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	76fb      	strb	r3, [r7, #27]
 8004a9c:	e0a3      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6b      	ldr	r2, [pc, #428]	; (8004c50 <UART_SetConfig+0x304>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d120      	bne.n	8004aea <UART_SetConfig+0x19e>
 8004aa8:	4b67      	ldr	r3, [pc, #412]	; (8004c48 <UART_SetConfig+0x2fc>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ab2:	2b30      	cmp	r3, #48	; 0x30
 8004ab4:	d013      	beq.n	8004ade <UART_SetConfig+0x192>
 8004ab6:	2b30      	cmp	r3, #48	; 0x30
 8004ab8:	d814      	bhi.n	8004ae4 <UART_SetConfig+0x198>
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d009      	beq.n	8004ad2 <UART_SetConfig+0x186>
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d810      	bhi.n	8004ae4 <UART_SetConfig+0x198>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <UART_SetConfig+0x180>
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d006      	beq.n	8004ad8 <UART_SetConfig+0x18c>
 8004aca:	e00b      	b.n	8004ae4 <UART_SetConfig+0x198>
 8004acc:	2300      	movs	r3, #0
 8004ace:	76fb      	strb	r3, [r7, #27]
 8004ad0:	e089      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	76fb      	strb	r3, [r7, #27]
 8004ad6:	e086      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	76fb      	strb	r3, [r7, #27]
 8004adc:	e083      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004ade:	2308      	movs	r3, #8
 8004ae0:	76fb      	strb	r3, [r7, #27]
 8004ae2:	e080      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	76fb      	strb	r3, [r7, #27]
 8004ae8:	e07d      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a59      	ldr	r2, [pc, #356]	; (8004c54 <UART_SetConfig+0x308>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d120      	bne.n	8004b36 <UART_SetConfig+0x1ea>
 8004af4:	4b54      	ldr	r3, [pc, #336]	; (8004c48 <UART_SetConfig+0x2fc>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004afe:	2bc0      	cmp	r3, #192	; 0xc0
 8004b00:	d013      	beq.n	8004b2a <UART_SetConfig+0x1de>
 8004b02:	2bc0      	cmp	r3, #192	; 0xc0
 8004b04:	d814      	bhi.n	8004b30 <UART_SetConfig+0x1e4>
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d009      	beq.n	8004b1e <UART_SetConfig+0x1d2>
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d810      	bhi.n	8004b30 <UART_SetConfig+0x1e4>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <UART_SetConfig+0x1cc>
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d006      	beq.n	8004b24 <UART_SetConfig+0x1d8>
 8004b16:	e00b      	b.n	8004b30 <UART_SetConfig+0x1e4>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	76fb      	strb	r3, [r7, #27]
 8004b1c:	e063      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	76fb      	strb	r3, [r7, #27]
 8004b22:	e060      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b24:	2304      	movs	r3, #4
 8004b26:	76fb      	strb	r3, [r7, #27]
 8004b28:	e05d      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	76fb      	strb	r3, [r7, #27]
 8004b2e:	e05a      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b30:	2310      	movs	r3, #16
 8004b32:	76fb      	strb	r3, [r7, #27]
 8004b34:	e057      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a47      	ldr	r2, [pc, #284]	; (8004c58 <UART_SetConfig+0x30c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d125      	bne.n	8004b8c <UART_SetConfig+0x240>
 8004b40:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <UART_SetConfig+0x2fc>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4e:	d017      	beq.n	8004b80 <UART_SetConfig+0x234>
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b54:	d817      	bhi.n	8004b86 <UART_SetConfig+0x23a>
 8004b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b5a:	d00b      	beq.n	8004b74 <UART_SetConfig+0x228>
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d811      	bhi.n	8004b86 <UART_SetConfig+0x23a>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <UART_SetConfig+0x222>
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6a:	d006      	beq.n	8004b7a <UART_SetConfig+0x22e>
 8004b6c:	e00b      	b.n	8004b86 <UART_SetConfig+0x23a>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	76fb      	strb	r3, [r7, #27]
 8004b72:	e038      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b74:	2302      	movs	r3, #2
 8004b76:	76fb      	strb	r3, [r7, #27]
 8004b78:	e035      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e032      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b80:	2308      	movs	r3, #8
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e02f      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b86:	2310      	movs	r3, #16
 8004b88:	76fb      	strb	r3, [r7, #27]
 8004b8a:	e02c      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2b      	ldr	r2, [pc, #172]	; (8004c40 <UART_SetConfig+0x2f4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d125      	bne.n	8004be2 <UART_SetConfig+0x296>
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <UART_SetConfig+0x2fc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba4:	d017      	beq.n	8004bd6 <UART_SetConfig+0x28a>
 8004ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004baa:	d817      	bhi.n	8004bdc <UART_SetConfig+0x290>
 8004bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb0:	d00b      	beq.n	8004bca <UART_SetConfig+0x27e>
 8004bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb6:	d811      	bhi.n	8004bdc <UART_SetConfig+0x290>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <UART_SetConfig+0x278>
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	d006      	beq.n	8004bd0 <UART_SetConfig+0x284>
 8004bc2:	e00b      	b.n	8004bdc <UART_SetConfig+0x290>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	76fb      	strb	r3, [r7, #27]
 8004bc8:	e00d      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	76fb      	strb	r3, [r7, #27]
 8004bce:	e00a      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	76fb      	strb	r3, [r7, #27]
 8004bd4:	e007      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	76fb      	strb	r3, [r7, #27]
 8004bda:	e004      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	76fb      	strb	r3, [r7, #27]
 8004be0:	e001      	b.n	8004be6 <UART_SetConfig+0x29a>
 8004be2:	2310      	movs	r3, #16
 8004be4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <UART_SetConfig+0x2f4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	f040 809f 	bne.w	8004d30 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bf2:	7efb      	ldrb	r3, [r7, #27]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d837      	bhi.n	8004c68 <UART_SetConfig+0x31c>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0x2b4>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c69 	.word	0x08004c69
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c69 	.word	0x08004c69
 8004c10:	08004c33 	.word	0x08004c33
 8004c14:	08004c69 	.word	0x08004c69
 8004c18:	08004c69 	.word	0x08004c69
 8004c1c:	08004c69 	.word	0x08004c69
 8004c20:	08004c61 	.word	0x08004c61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7ff faee 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8004c28:	6178      	str	r0, [r7, #20]
        break;
 8004c2a:	e022      	b.n	8004c72 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <UART_SetConfig+0x310>)
 8004c2e:	617b      	str	r3, [r7, #20]
        break;
 8004c30:	e01f      	b.n	8004c72 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c32:	f7ff fa79 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8004c36:	6178      	str	r0, [r7, #20]
        break;
 8004c38:	e01b      	b.n	8004c72 <UART_SetConfig+0x326>
 8004c3a:	bf00      	nop
 8004c3c:	cfff69f3 	.word	0xcfff69f3
 8004c40:	40008000 	.word	0x40008000
 8004c44:	40013800 	.word	0x40013800
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40004400 	.word	0x40004400
 8004c50:	40004800 	.word	0x40004800
 8004c54:	40004c00 	.word	0x40004c00
 8004c58:	40005000 	.word	0x40005000
 8004c5c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c64:	617b      	str	r3, [r7, #20]
        break;
 8004c66:	e004      	b.n	8004c72 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	76bb      	strb	r3, [r7, #26]
        break;
 8004c70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 811b 	beq.w	8004eb0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	4a96      	ldr	r2, [pc, #600]	; (8004ed8 <UART_SetConfig+0x58c>)
 8004c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c84:	461a      	mov	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c8c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	4413      	add	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d305      	bcc.n	8004caa <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d902      	bls.n	8004cb0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	76bb      	strb	r3, [r7, #26]
 8004cae:	e0ff      	b.n	8004eb0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	4a86      	ldr	r2, [pc, #536]	; (8004ed8 <UART_SetConfig+0x58c>)
 8004cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	f7fb ffe6 	bl	8000c98 <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	020b      	lsls	r3, r1, #8
 8004cde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ce2:	0202      	lsls	r2, r0, #8
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	6849      	ldr	r1, [r1, #4]
 8004ce8:	0849      	lsrs	r1, r1, #1
 8004cea:	4608      	mov	r0, r1
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	1814      	adds	r4, r2, r0
 8004cf2:	eb43 0501 	adc.w	r5, r3, r1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	4620      	mov	r0, r4
 8004d02:	4629      	mov	r1, r5
 8004d04:	f7fb ffc8 	bl	8000c98 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d16:	d308      	bcc.n	8004d2a <UART_SetConfig+0x3de>
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1e:	d204      	bcs.n	8004d2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	e0c2      	b.n	8004eb0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	76bb      	strb	r3, [r7, #26]
 8004d2e:	e0bf      	b.n	8004eb0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d38:	d165      	bne.n	8004e06 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8004d3a:	7efb      	ldrb	r3, [r7, #27]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d828      	bhi.n	8004d92 <UART_SetConfig+0x446>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x3fc>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	08004d93 	.word	0x08004d93
 8004d58:	08004d83 	.word	0x08004d83
 8004d5c:	08004d93 	.word	0x08004d93
 8004d60:	08004d93 	.word	0x08004d93
 8004d64:	08004d93 	.word	0x08004d93
 8004d68:	08004d8b 	.word	0x08004d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7ff fa4a 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8004d70:	6178      	str	r0, [r7, #20]
        break;
 8004d72:	e013      	b.n	8004d9c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d74:	f7ff fa5c 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
 8004d78:	6178      	str	r0, [r7, #20]
        break;
 8004d7a:	e00f      	b.n	8004d9c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d7c:	4b57      	ldr	r3, [pc, #348]	; (8004edc <UART_SetConfig+0x590>)
 8004d7e:	617b      	str	r3, [r7, #20]
        break;
 8004d80:	e00c      	b.n	8004d9c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d82:	f7ff f9d1 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8004d86:	6178      	str	r0, [r7, #20]
        break;
 8004d88:	e008      	b.n	8004d9c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	617b      	str	r3, [r7, #20]
        break;
 8004d90:	e004      	b.n	8004d9c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	76bb      	strb	r3, [r7, #26]
        break;
 8004d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8086 	beq.w	8004eb0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <UART_SetConfig+0x58c>)
 8004daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dae:	461a      	mov	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db6:	005a      	lsls	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	441a      	add	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	d916      	bls.n	8004e00 <UART_SetConfig+0x4b4>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d212      	bcs.n	8004e00 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f023 030f 	bic.w	r3, r3, #15
 8004de2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	89fb      	ldrh	r3, [r7, #14]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	89fa      	ldrh	r2, [r7, #14]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	e057      	b.n	8004eb0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	76bb      	strb	r3, [r7, #26]
 8004e04:	e054      	b.n	8004eb0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e06:	7efb      	ldrb	r3, [r7, #27]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d828      	bhi.n	8004e5e <UART_SetConfig+0x512>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x4c8>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08004e5f 	.word	0x08004e5f
 8004e24:	08004e4f 	.word	0x08004e4f
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e5f 	.word	0x08004e5f
 8004e34:	08004e57 	.word	0x08004e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7ff f9e4 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	6178      	str	r0, [r7, #20]
        break;
 8004e3e:	e013      	b.n	8004e68 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7ff f9f6 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
 8004e44:	6178      	str	r0, [r7, #20]
        break;
 8004e46:	e00f      	b.n	8004e68 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <UART_SetConfig+0x590>)
 8004e4a:	617b      	str	r3, [r7, #20]
        break;
 8004e4c:	e00c      	b.n	8004e68 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4e:	f7ff f96b 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8004e52:	6178      	str	r0, [r7, #20]
        break;
 8004e54:	e008      	b.n	8004e68 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5a:	617b      	str	r3, [r7, #20]
        break;
 8004e5c:	e004      	b.n	8004e68 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	76bb      	strb	r3, [r7, #26]
        break;
 8004e66:	bf00      	nop
    }

    if (pclk != 0U)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <UART_SetConfig+0x58c>)
 8004e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	441a      	add	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	d908      	bls.n	8004eac <UART_SetConfig+0x560>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d204      	bcs.n	8004eac <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	e001      	b.n	8004eb0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004ecc:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08007fa8 	.word	0x08007fa8
 8004edc:	00f42400 	.word	0x00f42400

08004ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01a      	beq.n	8004ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fde:	d10a      	bne.n	8004ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  }
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af02      	add	r7, sp, #8
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005034:	f7fc fbd6 	bl	80017e4 <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b08      	cmp	r3, #8
 8005046:	d10e      	bne.n	8005066 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f82f 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e025      	b.n	80050b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d10e      	bne.n	8005092 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f819 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e00f      	b.n	80050b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ca:	e062      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d2:	d05e      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7fc fb86 	bl	80017e4 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <UART_WaitOnFlagUntilTimeout+0x30>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d11d      	bne.n	8005126 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e045      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02e      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005142:	d126      	bne.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800514c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800515c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e00f      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d08d      	beq.n	80050cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <__errno>:
 80051bc:	4b01      	ldr	r3, [pc, #4]	; (80051c4 <__errno+0x8>)
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	2000000c 	.word	0x2000000c

080051c8 <__libc_init_array>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4d0d      	ldr	r5, [pc, #52]	; (8005200 <__libc_init_array+0x38>)
 80051cc:	4c0d      	ldr	r4, [pc, #52]	; (8005204 <__libc_init_array+0x3c>)
 80051ce:	1b64      	subs	r4, r4, r5
 80051d0:	10a4      	asrs	r4, r4, #2
 80051d2:	2600      	movs	r6, #0
 80051d4:	42a6      	cmp	r6, r4
 80051d6:	d109      	bne.n	80051ec <__libc_init_array+0x24>
 80051d8:	4d0b      	ldr	r5, [pc, #44]	; (8005208 <__libc_init_array+0x40>)
 80051da:	4c0c      	ldr	r4, [pc, #48]	; (800520c <__libc_init_array+0x44>)
 80051dc:	f002 feb6 	bl	8007f4c <_init>
 80051e0:	1b64      	subs	r4, r4, r5
 80051e2:	10a4      	asrs	r4, r4, #2
 80051e4:	2600      	movs	r6, #0
 80051e6:	42a6      	cmp	r6, r4
 80051e8:	d105      	bne.n	80051f6 <__libc_init_array+0x2e>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f0:	4798      	blx	r3
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7ee      	b.n	80051d4 <__libc_init_array+0xc>
 80051f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fa:	4798      	blx	r3
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7f2      	b.n	80051e6 <__libc_init_array+0x1e>
 8005200:	080083ac 	.word	0x080083ac
 8005204:	080083ac 	.word	0x080083ac
 8005208:	080083ac 	.word	0x080083ac
 800520c:	080083b0 	.word	0x080083b0

08005210 <memset>:
 8005210:	4402      	add	r2, r0
 8005212:	4603      	mov	r3, r0
 8005214:	4293      	cmp	r3, r2
 8005216:	d100      	bne.n	800521a <memset+0xa>
 8005218:	4770      	bx	lr
 800521a:	f803 1b01 	strb.w	r1, [r3], #1
 800521e:	e7f9      	b.n	8005214 <memset+0x4>

08005220 <__cvt>:
 8005220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005224:	ec55 4b10 	vmov	r4, r5, d0
 8005228:	2d00      	cmp	r5, #0
 800522a:	460e      	mov	r6, r1
 800522c:	4619      	mov	r1, r3
 800522e:	462b      	mov	r3, r5
 8005230:	bfbb      	ittet	lt
 8005232:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005236:	461d      	movlt	r5, r3
 8005238:	2300      	movge	r3, #0
 800523a:	232d      	movlt	r3, #45	; 0x2d
 800523c:	700b      	strb	r3, [r1, #0]
 800523e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005240:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005244:	4691      	mov	r9, r2
 8005246:	f023 0820 	bic.w	r8, r3, #32
 800524a:	bfbc      	itt	lt
 800524c:	4622      	movlt	r2, r4
 800524e:	4614      	movlt	r4, r2
 8005250:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005254:	d005      	beq.n	8005262 <__cvt+0x42>
 8005256:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800525a:	d100      	bne.n	800525e <__cvt+0x3e>
 800525c:	3601      	adds	r6, #1
 800525e:	2102      	movs	r1, #2
 8005260:	e000      	b.n	8005264 <__cvt+0x44>
 8005262:	2103      	movs	r1, #3
 8005264:	ab03      	add	r3, sp, #12
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	ab02      	add	r3, sp, #8
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	ec45 4b10 	vmov	d0, r4, r5
 8005270:	4653      	mov	r3, sl
 8005272:	4632      	mov	r2, r6
 8005274:	f000 fcec 	bl	8005c50 <_dtoa_r>
 8005278:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800527c:	4607      	mov	r7, r0
 800527e:	d102      	bne.n	8005286 <__cvt+0x66>
 8005280:	f019 0f01 	tst.w	r9, #1
 8005284:	d022      	beq.n	80052cc <__cvt+0xac>
 8005286:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800528a:	eb07 0906 	add.w	r9, r7, r6
 800528e:	d110      	bne.n	80052b2 <__cvt+0x92>
 8005290:	783b      	ldrb	r3, [r7, #0]
 8005292:	2b30      	cmp	r3, #48	; 0x30
 8005294:	d10a      	bne.n	80052ac <__cvt+0x8c>
 8005296:	2200      	movs	r2, #0
 8005298:	2300      	movs	r3, #0
 800529a:	4620      	mov	r0, r4
 800529c:	4629      	mov	r1, r5
 800529e:	f7fb fc3b 	bl	8000b18 <__aeabi_dcmpeq>
 80052a2:	b918      	cbnz	r0, 80052ac <__cvt+0x8c>
 80052a4:	f1c6 0601 	rsb	r6, r6, #1
 80052a8:	f8ca 6000 	str.w	r6, [sl]
 80052ac:	f8da 3000 	ldr.w	r3, [sl]
 80052b0:	4499      	add	r9, r3
 80052b2:	2200      	movs	r2, #0
 80052b4:	2300      	movs	r3, #0
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	f7fb fc2d 	bl	8000b18 <__aeabi_dcmpeq>
 80052be:	b108      	cbz	r0, 80052c4 <__cvt+0xa4>
 80052c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80052c4:	2230      	movs	r2, #48	; 0x30
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	454b      	cmp	r3, r9
 80052ca:	d307      	bcc.n	80052dc <__cvt+0xbc>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052d0:	1bdb      	subs	r3, r3, r7
 80052d2:	4638      	mov	r0, r7
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	b004      	add	sp, #16
 80052d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052dc:	1c59      	adds	r1, r3, #1
 80052de:	9103      	str	r1, [sp, #12]
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e7f0      	b.n	80052c6 <__cvt+0xa6>

080052e4 <__exponent>:
 80052e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052e6:	4603      	mov	r3, r0
 80052e8:	2900      	cmp	r1, #0
 80052ea:	bfb8      	it	lt
 80052ec:	4249      	neglt	r1, r1
 80052ee:	f803 2b02 	strb.w	r2, [r3], #2
 80052f2:	bfb4      	ite	lt
 80052f4:	222d      	movlt	r2, #45	; 0x2d
 80052f6:	222b      	movge	r2, #43	; 0x2b
 80052f8:	2909      	cmp	r1, #9
 80052fa:	7042      	strb	r2, [r0, #1]
 80052fc:	dd2a      	ble.n	8005354 <__exponent+0x70>
 80052fe:	f10d 0407 	add.w	r4, sp, #7
 8005302:	46a4      	mov	ip, r4
 8005304:	270a      	movs	r7, #10
 8005306:	46a6      	mov	lr, r4
 8005308:	460a      	mov	r2, r1
 800530a:	fb91 f6f7 	sdiv	r6, r1, r7
 800530e:	fb07 1516 	mls	r5, r7, r6, r1
 8005312:	3530      	adds	r5, #48	; 0x30
 8005314:	2a63      	cmp	r2, #99	; 0x63
 8005316:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800531a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800531e:	4631      	mov	r1, r6
 8005320:	dcf1      	bgt.n	8005306 <__exponent+0x22>
 8005322:	3130      	adds	r1, #48	; 0x30
 8005324:	f1ae 0502 	sub.w	r5, lr, #2
 8005328:	f804 1c01 	strb.w	r1, [r4, #-1]
 800532c:	1c44      	adds	r4, r0, #1
 800532e:	4629      	mov	r1, r5
 8005330:	4561      	cmp	r1, ip
 8005332:	d30a      	bcc.n	800534a <__exponent+0x66>
 8005334:	f10d 0209 	add.w	r2, sp, #9
 8005338:	eba2 020e 	sub.w	r2, r2, lr
 800533c:	4565      	cmp	r5, ip
 800533e:	bf88      	it	hi
 8005340:	2200      	movhi	r2, #0
 8005342:	4413      	add	r3, r2
 8005344:	1a18      	subs	r0, r3, r0
 8005346:	b003      	add	sp, #12
 8005348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800534a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800534e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005352:	e7ed      	b.n	8005330 <__exponent+0x4c>
 8005354:	2330      	movs	r3, #48	; 0x30
 8005356:	3130      	adds	r1, #48	; 0x30
 8005358:	7083      	strb	r3, [r0, #2]
 800535a:	70c1      	strb	r1, [r0, #3]
 800535c:	1d03      	adds	r3, r0, #4
 800535e:	e7f1      	b.n	8005344 <__exponent+0x60>

08005360 <_printf_float>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	ed2d 8b02 	vpush	{d8}
 8005368:	b08d      	sub	sp, #52	; 0x34
 800536a:	460c      	mov	r4, r1
 800536c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005370:	4616      	mov	r6, r2
 8005372:	461f      	mov	r7, r3
 8005374:	4605      	mov	r5, r0
 8005376:	f001 fa57 	bl	8006828 <_localeconv_r>
 800537a:	f8d0 a000 	ldr.w	sl, [r0]
 800537e:	4650      	mov	r0, sl
 8005380:	f7fa ff4e 	bl	8000220 <strlen>
 8005384:	2300      	movs	r3, #0
 8005386:	930a      	str	r3, [sp, #40]	; 0x28
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	9305      	str	r3, [sp, #20]
 800538c:	f8d8 3000 	ldr.w	r3, [r8]
 8005390:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005394:	3307      	adds	r3, #7
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	f103 0208 	add.w	r2, r3, #8
 800539e:	f8c8 2000 	str.w	r2, [r8]
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053b2:	9307      	str	r3, [sp, #28]
 80053b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80053b8:	ee08 0a10 	vmov	s16, r0
 80053bc:	4b9f      	ldr	r3, [pc, #636]	; (800563c <_printf_float+0x2dc>)
 80053be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053c6:	f7fb fbd9 	bl	8000b7c <__aeabi_dcmpun>
 80053ca:	bb88      	cbnz	r0, 8005430 <_printf_float+0xd0>
 80053cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d0:	4b9a      	ldr	r3, [pc, #616]	; (800563c <_printf_float+0x2dc>)
 80053d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053d6:	f7fb fbb3 	bl	8000b40 <__aeabi_dcmple>
 80053da:	bb48      	cbnz	r0, 8005430 <_printf_float+0xd0>
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fb fba2 	bl	8000b2c <__aeabi_dcmplt>
 80053e8:	b110      	cbz	r0, 80053f0 <_printf_float+0x90>
 80053ea:	232d      	movs	r3, #45	; 0x2d
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f0:	4b93      	ldr	r3, [pc, #588]	; (8005640 <_printf_float+0x2e0>)
 80053f2:	4894      	ldr	r0, [pc, #592]	; (8005644 <_printf_float+0x2e4>)
 80053f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053f8:	bf94      	ite	ls
 80053fa:	4698      	movls	r8, r3
 80053fc:	4680      	movhi	r8, r0
 80053fe:	2303      	movs	r3, #3
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	9b05      	ldr	r3, [sp, #20]
 8005404:	f023 0204 	bic.w	r2, r3, #4
 8005408:	6022      	str	r2, [r4, #0]
 800540a:	f04f 0900 	mov.w	r9, #0
 800540e:	9700      	str	r7, [sp, #0]
 8005410:	4633      	mov	r3, r6
 8005412:	aa0b      	add	r2, sp, #44	; 0x2c
 8005414:	4621      	mov	r1, r4
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f9d8 	bl	80057cc <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	f040 8090 	bne.w	8005542 <_printf_float+0x1e2>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005426:	b00d      	add	sp, #52	; 0x34
 8005428:	ecbd 8b02 	vpop	{d8}
 800542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fb fba0 	bl	8000b7c <__aeabi_dcmpun>
 800543c:	b140      	cbz	r0, 8005450 <_printf_float+0xf0>
 800543e:	464b      	mov	r3, r9
 8005440:	2b00      	cmp	r3, #0
 8005442:	bfbc      	itt	lt
 8005444:	232d      	movlt	r3, #45	; 0x2d
 8005446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800544a:	487f      	ldr	r0, [pc, #508]	; (8005648 <_printf_float+0x2e8>)
 800544c:	4b7f      	ldr	r3, [pc, #508]	; (800564c <_printf_float+0x2ec>)
 800544e:	e7d1      	b.n	80053f4 <_printf_float+0x94>
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005456:	9206      	str	r2, [sp, #24]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	d13f      	bne.n	80054dc <_printf_float+0x17c>
 800545c:	2306      	movs	r3, #6
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	9b05      	ldr	r3, [sp, #20]
 8005462:	6861      	ldr	r1, [r4, #4]
 8005464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005468:	2300      	movs	r3, #0
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	ab0a      	add	r3, sp, #40	; 0x28
 800546e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005472:	ab09      	add	r3, sp, #36	; 0x24
 8005474:	ec49 8b10 	vmov	d0, r8, r9
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	6022      	str	r2, [r4, #0]
 800547c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005480:	4628      	mov	r0, r5
 8005482:	f7ff fecd 	bl	8005220 <__cvt>
 8005486:	9b06      	ldr	r3, [sp, #24]
 8005488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800548a:	2b47      	cmp	r3, #71	; 0x47
 800548c:	4680      	mov	r8, r0
 800548e:	d108      	bne.n	80054a2 <_printf_float+0x142>
 8005490:	1cc8      	adds	r0, r1, #3
 8005492:	db02      	blt.n	800549a <_printf_float+0x13a>
 8005494:	6863      	ldr	r3, [r4, #4]
 8005496:	4299      	cmp	r1, r3
 8005498:	dd41      	ble.n	800551e <_printf_float+0x1be>
 800549a:	f1ab 0b02 	sub.w	fp, fp, #2
 800549e:	fa5f fb8b 	uxtb.w	fp, fp
 80054a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054a6:	d820      	bhi.n	80054ea <_printf_float+0x18a>
 80054a8:	3901      	subs	r1, #1
 80054aa:	465a      	mov	r2, fp
 80054ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054b0:	9109      	str	r1, [sp, #36]	; 0x24
 80054b2:	f7ff ff17 	bl	80052e4 <__exponent>
 80054b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054b8:	1813      	adds	r3, r2, r0
 80054ba:	2a01      	cmp	r2, #1
 80054bc:	4681      	mov	r9, r0
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	dc02      	bgt.n	80054c8 <_printf_float+0x168>
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	07d2      	lsls	r2, r2, #31
 80054c6:	d501      	bpl.n	80054cc <_printf_float+0x16c>
 80054c8:	3301      	adds	r3, #1
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d09c      	beq.n	800540e <_printf_float+0xae>
 80054d4:	232d      	movs	r3, #45	; 0x2d
 80054d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054da:	e798      	b.n	800540e <_printf_float+0xae>
 80054dc:	9a06      	ldr	r2, [sp, #24]
 80054de:	2a47      	cmp	r2, #71	; 0x47
 80054e0:	d1be      	bne.n	8005460 <_printf_float+0x100>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1bc      	bne.n	8005460 <_printf_float+0x100>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e7b9      	b.n	800545e <_printf_float+0xfe>
 80054ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054ee:	d118      	bne.n	8005522 <_printf_float+0x1c2>
 80054f0:	2900      	cmp	r1, #0
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	dd0b      	ble.n	800550e <_printf_float+0x1ae>
 80054f6:	6121      	str	r1, [r4, #16]
 80054f8:	b913      	cbnz	r3, 8005500 <_printf_float+0x1a0>
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	07d0      	lsls	r0, r2, #31
 80054fe:	d502      	bpl.n	8005506 <_printf_float+0x1a6>
 8005500:	3301      	adds	r3, #1
 8005502:	440b      	add	r3, r1
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	65a1      	str	r1, [r4, #88]	; 0x58
 8005508:	f04f 0900 	mov.w	r9, #0
 800550c:	e7de      	b.n	80054cc <_printf_float+0x16c>
 800550e:	b913      	cbnz	r3, 8005516 <_printf_float+0x1b6>
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	07d2      	lsls	r2, r2, #31
 8005514:	d501      	bpl.n	800551a <_printf_float+0x1ba>
 8005516:	3302      	adds	r3, #2
 8005518:	e7f4      	b.n	8005504 <_printf_float+0x1a4>
 800551a:	2301      	movs	r3, #1
 800551c:	e7f2      	b.n	8005504 <_printf_float+0x1a4>
 800551e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005524:	4299      	cmp	r1, r3
 8005526:	db05      	blt.n	8005534 <_printf_float+0x1d4>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	6121      	str	r1, [r4, #16]
 800552c:	07d8      	lsls	r0, r3, #31
 800552e:	d5ea      	bpl.n	8005506 <_printf_float+0x1a6>
 8005530:	1c4b      	adds	r3, r1, #1
 8005532:	e7e7      	b.n	8005504 <_printf_float+0x1a4>
 8005534:	2900      	cmp	r1, #0
 8005536:	bfd4      	ite	le
 8005538:	f1c1 0202 	rsble	r2, r1, #2
 800553c:	2201      	movgt	r2, #1
 800553e:	4413      	add	r3, r2
 8005540:	e7e0      	b.n	8005504 <_printf_float+0x1a4>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	055a      	lsls	r2, r3, #21
 8005546:	d407      	bmi.n	8005558 <_printf_float+0x1f8>
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	4642      	mov	r2, r8
 800554c:	4631      	mov	r1, r6
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	d12c      	bne.n	80055b0 <_printf_float+0x250>
 8005556:	e764      	b.n	8005422 <_printf_float+0xc2>
 8005558:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800555c:	f240 80e0 	bls.w	8005720 <_printf_float+0x3c0>
 8005560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005564:	2200      	movs	r2, #0
 8005566:	2300      	movs	r3, #0
 8005568:	f7fb fad6 	bl	8000b18 <__aeabi_dcmpeq>
 800556c:	2800      	cmp	r0, #0
 800556e:	d034      	beq.n	80055da <_printf_float+0x27a>
 8005570:	4a37      	ldr	r2, [pc, #220]	; (8005650 <_printf_float+0x2f0>)
 8005572:	2301      	movs	r3, #1
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	f43f af51 	beq.w	8005422 <_printf_float+0xc2>
 8005580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005584:	429a      	cmp	r2, r3
 8005586:	db02      	blt.n	800558e <_printf_float+0x22e>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	07d8      	lsls	r0, r3, #31
 800558c:	d510      	bpl.n	80055b0 <_printf_float+0x250>
 800558e:	ee18 3a10 	vmov	r3, s16
 8005592:	4652      	mov	r2, sl
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f af41 	beq.w	8005422 <_printf_float+0xc2>
 80055a0:	f04f 0800 	mov.w	r8, #0
 80055a4:	f104 091a 	add.w	r9, r4, #26
 80055a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055aa:	3b01      	subs	r3, #1
 80055ac:	4543      	cmp	r3, r8
 80055ae:	dc09      	bgt.n	80055c4 <_printf_float+0x264>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	079b      	lsls	r3, r3, #30
 80055b4:	f100 8105 	bmi.w	80057c2 <_printf_float+0x462>
 80055b8:	68e0      	ldr	r0, [r4, #12]
 80055ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055bc:	4298      	cmp	r0, r3
 80055be:	bfb8      	it	lt
 80055c0:	4618      	movlt	r0, r3
 80055c2:	e730      	b.n	8005426 <_printf_float+0xc6>
 80055c4:	2301      	movs	r3, #1
 80055c6:	464a      	mov	r2, r9
 80055c8:	4631      	mov	r1, r6
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	3001      	adds	r0, #1
 80055d0:	f43f af27 	beq.w	8005422 <_printf_float+0xc2>
 80055d4:	f108 0801 	add.w	r8, r8, #1
 80055d8:	e7e6      	b.n	80055a8 <_printf_float+0x248>
 80055da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dc39      	bgt.n	8005654 <_printf_float+0x2f4>
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <_printf_float+0x2f0>)
 80055e2:	2301      	movs	r3, #1
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f af19 	beq.w	8005422 <_printf_float+0xc2>
 80055f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f4:	4313      	orrs	r3, r2
 80055f6:	d102      	bne.n	80055fe <_printf_float+0x29e>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	07d9      	lsls	r1, r3, #31
 80055fc:	d5d8      	bpl.n	80055b0 <_printf_float+0x250>
 80055fe:	ee18 3a10 	vmov	r3, s16
 8005602:	4652      	mov	r2, sl
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	f43f af09 	beq.w	8005422 <_printf_float+0xc2>
 8005610:	f04f 0900 	mov.w	r9, #0
 8005614:	f104 0a1a 	add.w	sl, r4, #26
 8005618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561a:	425b      	negs	r3, r3
 800561c:	454b      	cmp	r3, r9
 800561e:	dc01      	bgt.n	8005624 <_printf_float+0x2c4>
 8005620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005622:	e792      	b.n	800554a <_printf_float+0x1ea>
 8005624:	2301      	movs	r3, #1
 8005626:	4652      	mov	r2, sl
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f aef7 	beq.w	8005422 <_printf_float+0xc2>
 8005634:	f109 0901 	add.w	r9, r9, #1
 8005638:	e7ee      	b.n	8005618 <_printf_float+0x2b8>
 800563a:	bf00      	nop
 800563c:	7fefffff 	.word	0x7fefffff
 8005640:	08007fc4 	.word	0x08007fc4
 8005644:	08007fc8 	.word	0x08007fc8
 8005648:	08007fd0 	.word	0x08007fd0
 800564c:	08007fcc 	.word	0x08007fcc
 8005650:	08007fd4 	.word	0x08007fd4
 8005654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005658:	429a      	cmp	r2, r3
 800565a:	bfa8      	it	ge
 800565c:	461a      	movge	r2, r3
 800565e:	2a00      	cmp	r2, #0
 8005660:	4691      	mov	r9, r2
 8005662:	dc37      	bgt.n	80056d4 <_printf_float+0x374>
 8005664:	f04f 0b00 	mov.w	fp, #0
 8005668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800566c:	f104 021a 	add.w	r2, r4, #26
 8005670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005672:	9305      	str	r3, [sp, #20]
 8005674:	eba3 0309 	sub.w	r3, r3, r9
 8005678:	455b      	cmp	r3, fp
 800567a:	dc33      	bgt.n	80056e4 <_printf_float+0x384>
 800567c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005680:	429a      	cmp	r2, r3
 8005682:	db3b      	blt.n	80056fc <_printf_float+0x39c>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	07da      	lsls	r2, r3, #31
 8005688:	d438      	bmi.n	80056fc <_printf_float+0x39c>
 800568a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568c:	9b05      	ldr	r3, [sp, #20]
 800568e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	eba2 0901 	sub.w	r9, r2, r1
 8005696:	4599      	cmp	r9, r3
 8005698:	bfa8      	it	ge
 800569a:	4699      	movge	r9, r3
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	dc35      	bgt.n	800570e <_printf_float+0x3ae>
 80056a2:	f04f 0800 	mov.w	r8, #0
 80056a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056aa:	f104 0a1a 	add.w	sl, r4, #26
 80056ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	eba3 0309 	sub.w	r3, r3, r9
 80056b8:	4543      	cmp	r3, r8
 80056ba:	f77f af79 	ble.w	80055b0 <_printf_float+0x250>
 80056be:	2301      	movs	r3, #1
 80056c0:	4652      	mov	r2, sl
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f aeaa 	beq.w	8005422 <_printf_float+0xc2>
 80056ce:	f108 0801 	add.w	r8, r8, #1
 80056d2:	e7ec      	b.n	80056ae <_printf_float+0x34e>
 80056d4:	4613      	mov	r3, r2
 80056d6:	4631      	mov	r1, r6
 80056d8:	4642      	mov	r2, r8
 80056da:	4628      	mov	r0, r5
 80056dc:	47b8      	blx	r7
 80056de:	3001      	adds	r0, #1
 80056e0:	d1c0      	bne.n	8005664 <_printf_float+0x304>
 80056e2:	e69e      	b.n	8005422 <_printf_float+0xc2>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	9205      	str	r2, [sp, #20]
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f ae97 	beq.w	8005422 <_printf_float+0xc2>
 80056f4:	9a05      	ldr	r2, [sp, #20]
 80056f6:	f10b 0b01 	add.w	fp, fp, #1
 80056fa:	e7b9      	b.n	8005670 <_printf_float+0x310>
 80056fc:	ee18 3a10 	vmov	r3, s16
 8005700:	4652      	mov	r2, sl
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	d1be      	bne.n	800568a <_printf_float+0x32a>
 800570c:	e689      	b.n	8005422 <_printf_float+0xc2>
 800570e:	9a05      	ldr	r2, [sp, #20]
 8005710:	464b      	mov	r3, r9
 8005712:	4442      	add	r2, r8
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	d1c1      	bne.n	80056a2 <_printf_float+0x342>
 800571e:	e680      	b.n	8005422 <_printf_float+0xc2>
 8005720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005722:	2a01      	cmp	r2, #1
 8005724:	dc01      	bgt.n	800572a <_printf_float+0x3ca>
 8005726:	07db      	lsls	r3, r3, #31
 8005728:	d538      	bpl.n	800579c <_printf_float+0x43c>
 800572a:	2301      	movs	r3, #1
 800572c:	4642      	mov	r2, r8
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f ae74 	beq.w	8005422 <_printf_float+0xc2>
 800573a:	ee18 3a10 	vmov	r3, s16
 800573e:	4652      	mov	r2, sl
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f ae6b 	beq.w	8005422 <_printf_float+0xc2>
 800574c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005750:	2200      	movs	r2, #0
 8005752:	2300      	movs	r3, #0
 8005754:	f7fb f9e0 	bl	8000b18 <__aeabi_dcmpeq>
 8005758:	b9d8      	cbnz	r0, 8005792 <_printf_float+0x432>
 800575a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800575c:	f108 0201 	add.w	r2, r8, #1
 8005760:	3b01      	subs	r3, #1
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	d10e      	bne.n	800578a <_printf_float+0x42a>
 800576c:	e659      	b.n	8005422 <_printf_float+0xc2>
 800576e:	2301      	movs	r3, #1
 8005770:	4652      	mov	r2, sl
 8005772:	4631      	mov	r1, r6
 8005774:	4628      	mov	r0, r5
 8005776:	47b8      	blx	r7
 8005778:	3001      	adds	r0, #1
 800577a:	f43f ae52 	beq.w	8005422 <_printf_float+0xc2>
 800577e:	f108 0801 	add.w	r8, r8, #1
 8005782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	4543      	cmp	r3, r8
 8005788:	dcf1      	bgt.n	800576e <_printf_float+0x40e>
 800578a:	464b      	mov	r3, r9
 800578c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005790:	e6dc      	b.n	800554c <_printf_float+0x1ec>
 8005792:	f04f 0800 	mov.w	r8, #0
 8005796:	f104 0a1a 	add.w	sl, r4, #26
 800579a:	e7f2      	b.n	8005782 <_printf_float+0x422>
 800579c:	2301      	movs	r3, #1
 800579e:	4642      	mov	r2, r8
 80057a0:	e7df      	b.n	8005762 <_printf_float+0x402>
 80057a2:	2301      	movs	r3, #1
 80057a4:	464a      	mov	r2, r9
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f ae38 	beq.w	8005422 <_printf_float+0xc2>
 80057b2:	f108 0801 	add.w	r8, r8, #1
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ba:	1a5b      	subs	r3, r3, r1
 80057bc:	4543      	cmp	r3, r8
 80057be:	dcf0      	bgt.n	80057a2 <_printf_float+0x442>
 80057c0:	e6fa      	b.n	80055b8 <_printf_float+0x258>
 80057c2:	f04f 0800 	mov.w	r8, #0
 80057c6:	f104 0919 	add.w	r9, r4, #25
 80057ca:	e7f4      	b.n	80057b6 <_printf_float+0x456>

080057cc <_printf_common>:
 80057cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d0:	4616      	mov	r6, r2
 80057d2:	4699      	mov	r9, r3
 80057d4:	688a      	ldr	r2, [r1, #8]
 80057d6:	690b      	ldr	r3, [r1, #16]
 80057d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057dc:	4293      	cmp	r3, r2
 80057de:	bfb8      	it	lt
 80057e0:	4613      	movlt	r3, r2
 80057e2:	6033      	str	r3, [r6, #0]
 80057e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057e8:	4607      	mov	r7, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	b10a      	cbz	r2, 80057f2 <_printf_common+0x26>
 80057ee:	3301      	adds	r3, #1
 80057f0:	6033      	str	r3, [r6, #0]
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	0699      	lsls	r1, r3, #26
 80057f6:	bf42      	ittt	mi
 80057f8:	6833      	ldrmi	r3, [r6, #0]
 80057fa:	3302      	addmi	r3, #2
 80057fc:	6033      	strmi	r3, [r6, #0]
 80057fe:	6825      	ldr	r5, [r4, #0]
 8005800:	f015 0506 	ands.w	r5, r5, #6
 8005804:	d106      	bne.n	8005814 <_printf_common+0x48>
 8005806:	f104 0a19 	add.w	sl, r4, #25
 800580a:	68e3      	ldr	r3, [r4, #12]
 800580c:	6832      	ldr	r2, [r6, #0]
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	42ab      	cmp	r3, r5
 8005812:	dc26      	bgt.n	8005862 <_printf_common+0x96>
 8005814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005818:	1e13      	subs	r3, r2, #0
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	bf18      	it	ne
 800581e:	2301      	movne	r3, #1
 8005820:	0692      	lsls	r2, r2, #26
 8005822:	d42b      	bmi.n	800587c <_printf_common+0xb0>
 8005824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d01e      	beq.n	8005870 <_printf_common+0xa4>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	68e5      	ldr	r5, [r4, #12]
 8005836:	6832      	ldr	r2, [r6, #0]
 8005838:	f003 0306 	and.w	r3, r3, #6
 800583c:	2b04      	cmp	r3, #4
 800583e:	bf08      	it	eq
 8005840:	1aad      	subeq	r5, r5, r2
 8005842:	68a3      	ldr	r3, [r4, #8]
 8005844:	6922      	ldr	r2, [r4, #16]
 8005846:	bf0c      	ite	eq
 8005848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800584c:	2500      	movne	r5, #0
 800584e:	4293      	cmp	r3, r2
 8005850:	bfc4      	itt	gt
 8005852:	1a9b      	subgt	r3, r3, r2
 8005854:	18ed      	addgt	r5, r5, r3
 8005856:	2600      	movs	r6, #0
 8005858:	341a      	adds	r4, #26
 800585a:	42b5      	cmp	r5, r6
 800585c:	d11a      	bne.n	8005894 <_printf_common+0xc8>
 800585e:	2000      	movs	r0, #0
 8005860:	e008      	b.n	8005874 <_printf_common+0xa8>
 8005862:	2301      	movs	r3, #1
 8005864:	4652      	mov	r2, sl
 8005866:	4649      	mov	r1, r9
 8005868:	4638      	mov	r0, r7
 800586a:	47c0      	blx	r8
 800586c:	3001      	adds	r0, #1
 800586e:	d103      	bne.n	8005878 <_printf_common+0xac>
 8005870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005878:	3501      	adds	r5, #1
 800587a:	e7c6      	b.n	800580a <_printf_common+0x3e>
 800587c:	18e1      	adds	r1, r4, r3
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	2030      	movs	r0, #48	; 0x30
 8005882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005886:	4422      	add	r2, r4
 8005888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800588c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005890:	3302      	adds	r3, #2
 8005892:	e7c7      	b.n	8005824 <_printf_common+0x58>
 8005894:	2301      	movs	r3, #1
 8005896:	4622      	mov	r2, r4
 8005898:	4649      	mov	r1, r9
 800589a:	4638      	mov	r0, r7
 800589c:	47c0      	blx	r8
 800589e:	3001      	adds	r0, #1
 80058a0:	d0e6      	beq.n	8005870 <_printf_common+0xa4>
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7d9      	b.n	800585a <_printf_common+0x8e>
	...

080058a8 <_printf_i>:
 80058a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	460c      	mov	r4, r1
 80058ae:	4691      	mov	r9, r2
 80058b0:	7e27      	ldrb	r7, [r4, #24]
 80058b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058b4:	2f78      	cmp	r7, #120	; 0x78
 80058b6:	4680      	mov	r8, r0
 80058b8:	469a      	mov	sl, r3
 80058ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058be:	d807      	bhi.n	80058d0 <_printf_i+0x28>
 80058c0:	2f62      	cmp	r7, #98	; 0x62
 80058c2:	d80a      	bhi.n	80058da <_printf_i+0x32>
 80058c4:	2f00      	cmp	r7, #0
 80058c6:	f000 80d8 	beq.w	8005a7a <_printf_i+0x1d2>
 80058ca:	2f58      	cmp	r7, #88	; 0x58
 80058cc:	f000 80a3 	beq.w	8005a16 <_printf_i+0x16e>
 80058d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058d8:	e03a      	b.n	8005950 <_printf_i+0xa8>
 80058da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058de:	2b15      	cmp	r3, #21
 80058e0:	d8f6      	bhi.n	80058d0 <_printf_i+0x28>
 80058e2:	a001      	add	r0, pc, #4	; (adr r0, 80058e8 <_printf_i+0x40>)
 80058e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058e8:	08005941 	.word	0x08005941
 80058ec:	08005955 	.word	0x08005955
 80058f0:	080058d1 	.word	0x080058d1
 80058f4:	080058d1 	.word	0x080058d1
 80058f8:	080058d1 	.word	0x080058d1
 80058fc:	080058d1 	.word	0x080058d1
 8005900:	08005955 	.word	0x08005955
 8005904:	080058d1 	.word	0x080058d1
 8005908:	080058d1 	.word	0x080058d1
 800590c:	080058d1 	.word	0x080058d1
 8005910:	080058d1 	.word	0x080058d1
 8005914:	08005a61 	.word	0x08005a61
 8005918:	08005985 	.word	0x08005985
 800591c:	08005a43 	.word	0x08005a43
 8005920:	080058d1 	.word	0x080058d1
 8005924:	080058d1 	.word	0x080058d1
 8005928:	08005a83 	.word	0x08005a83
 800592c:	080058d1 	.word	0x080058d1
 8005930:	08005985 	.word	0x08005985
 8005934:	080058d1 	.word	0x080058d1
 8005938:	080058d1 	.word	0x080058d1
 800593c:	08005a4b 	.word	0x08005a4b
 8005940:	680b      	ldr	r3, [r1, #0]
 8005942:	1d1a      	adds	r2, r3, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	600a      	str	r2, [r1, #0]
 8005948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800594c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005950:	2301      	movs	r3, #1
 8005952:	e0a3      	b.n	8005a9c <_printf_i+0x1f4>
 8005954:	6825      	ldr	r5, [r4, #0]
 8005956:	6808      	ldr	r0, [r1, #0]
 8005958:	062e      	lsls	r6, r5, #24
 800595a:	f100 0304 	add.w	r3, r0, #4
 800595e:	d50a      	bpl.n	8005976 <_printf_i+0xce>
 8005960:	6805      	ldr	r5, [r0, #0]
 8005962:	600b      	str	r3, [r1, #0]
 8005964:	2d00      	cmp	r5, #0
 8005966:	da03      	bge.n	8005970 <_printf_i+0xc8>
 8005968:	232d      	movs	r3, #45	; 0x2d
 800596a:	426d      	negs	r5, r5
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	485e      	ldr	r0, [pc, #376]	; (8005aec <_printf_i+0x244>)
 8005972:	230a      	movs	r3, #10
 8005974:	e019      	b.n	80059aa <_printf_i+0x102>
 8005976:	f015 0f40 	tst.w	r5, #64	; 0x40
 800597a:	6805      	ldr	r5, [r0, #0]
 800597c:	600b      	str	r3, [r1, #0]
 800597e:	bf18      	it	ne
 8005980:	b22d      	sxthne	r5, r5
 8005982:	e7ef      	b.n	8005964 <_printf_i+0xbc>
 8005984:	680b      	ldr	r3, [r1, #0]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	1d18      	adds	r0, r3, #4
 800598a:	6008      	str	r0, [r1, #0]
 800598c:	0628      	lsls	r0, r5, #24
 800598e:	d501      	bpl.n	8005994 <_printf_i+0xec>
 8005990:	681d      	ldr	r5, [r3, #0]
 8005992:	e002      	b.n	800599a <_printf_i+0xf2>
 8005994:	0669      	lsls	r1, r5, #25
 8005996:	d5fb      	bpl.n	8005990 <_printf_i+0xe8>
 8005998:	881d      	ldrh	r5, [r3, #0]
 800599a:	4854      	ldr	r0, [pc, #336]	; (8005aec <_printf_i+0x244>)
 800599c:	2f6f      	cmp	r7, #111	; 0x6f
 800599e:	bf0c      	ite	eq
 80059a0:	2308      	moveq	r3, #8
 80059a2:	230a      	movne	r3, #10
 80059a4:	2100      	movs	r1, #0
 80059a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059aa:	6866      	ldr	r6, [r4, #4]
 80059ac:	60a6      	str	r6, [r4, #8]
 80059ae:	2e00      	cmp	r6, #0
 80059b0:	bfa2      	ittt	ge
 80059b2:	6821      	ldrge	r1, [r4, #0]
 80059b4:	f021 0104 	bicge.w	r1, r1, #4
 80059b8:	6021      	strge	r1, [r4, #0]
 80059ba:	b90d      	cbnz	r5, 80059c0 <_printf_i+0x118>
 80059bc:	2e00      	cmp	r6, #0
 80059be:	d04d      	beq.n	8005a5c <_printf_i+0x1b4>
 80059c0:	4616      	mov	r6, r2
 80059c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80059c6:	fb03 5711 	mls	r7, r3, r1, r5
 80059ca:	5dc7      	ldrb	r7, [r0, r7]
 80059cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059d0:	462f      	mov	r7, r5
 80059d2:	42bb      	cmp	r3, r7
 80059d4:	460d      	mov	r5, r1
 80059d6:	d9f4      	bls.n	80059c2 <_printf_i+0x11a>
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d10b      	bne.n	80059f4 <_printf_i+0x14c>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	07df      	lsls	r7, r3, #31
 80059e0:	d508      	bpl.n	80059f4 <_printf_i+0x14c>
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	6861      	ldr	r1, [r4, #4]
 80059e6:	4299      	cmp	r1, r3
 80059e8:	bfde      	ittt	le
 80059ea:	2330      	movle	r3, #48	; 0x30
 80059ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80059f4:	1b92      	subs	r2, r2, r6
 80059f6:	6122      	str	r2, [r4, #16]
 80059f8:	f8cd a000 	str.w	sl, [sp]
 80059fc:	464b      	mov	r3, r9
 80059fe:	aa03      	add	r2, sp, #12
 8005a00:	4621      	mov	r1, r4
 8005a02:	4640      	mov	r0, r8
 8005a04:	f7ff fee2 	bl	80057cc <_printf_common>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d14c      	bne.n	8005aa6 <_printf_i+0x1fe>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a10:	b004      	add	sp, #16
 8005a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a16:	4835      	ldr	r0, [pc, #212]	; (8005aec <_printf_i+0x244>)
 8005a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	680e      	ldr	r6, [r1, #0]
 8005a20:	061f      	lsls	r7, r3, #24
 8005a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a26:	600e      	str	r6, [r1, #0]
 8005a28:	d514      	bpl.n	8005a54 <_printf_i+0x1ac>
 8005a2a:	07d9      	lsls	r1, r3, #31
 8005a2c:	bf44      	itt	mi
 8005a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a32:	6023      	strmi	r3, [r4, #0]
 8005a34:	b91d      	cbnz	r5, 8005a3e <_printf_i+0x196>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f023 0320 	bic.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	2310      	movs	r3, #16
 8005a40:	e7b0      	b.n	80059a4 <_printf_i+0xfc>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	f043 0320 	orr.w	r3, r3, #32
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	2378      	movs	r3, #120	; 0x78
 8005a4c:	4828      	ldr	r0, [pc, #160]	; (8005af0 <_printf_i+0x248>)
 8005a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a52:	e7e3      	b.n	8005a1c <_printf_i+0x174>
 8005a54:	065e      	lsls	r6, r3, #25
 8005a56:	bf48      	it	mi
 8005a58:	b2ad      	uxthmi	r5, r5
 8005a5a:	e7e6      	b.n	8005a2a <_printf_i+0x182>
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	e7bb      	b.n	80059d8 <_printf_i+0x130>
 8005a60:	680b      	ldr	r3, [r1, #0]
 8005a62:	6826      	ldr	r6, [r4, #0]
 8005a64:	6960      	ldr	r0, [r4, #20]
 8005a66:	1d1d      	adds	r5, r3, #4
 8005a68:	600d      	str	r5, [r1, #0]
 8005a6a:	0635      	lsls	r5, r6, #24
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	d501      	bpl.n	8005a74 <_printf_i+0x1cc>
 8005a70:	6018      	str	r0, [r3, #0]
 8005a72:	e002      	b.n	8005a7a <_printf_i+0x1d2>
 8005a74:	0671      	lsls	r1, r6, #25
 8005a76:	d5fb      	bpl.n	8005a70 <_printf_i+0x1c8>
 8005a78:	8018      	strh	r0, [r3, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	4616      	mov	r6, r2
 8005a80:	e7ba      	b.n	80059f8 <_printf_i+0x150>
 8005a82:	680b      	ldr	r3, [r1, #0]
 8005a84:	1d1a      	adds	r2, r3, #4
 8005a86:	600a      	str	r2, [r1, #0]
 8005a88:	681e      	ldr	r6, [r3, #0]
 8005a8a:	6862      	ldr	r2, [r4, #4]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7fa fbce 	bl	8000230 <memchr>
 8005a94:	b108      	cbz	r0, 8005a9a <_printf_i+0x1f2>
 8005a96:	1b80      	subs	r0, r0, r6
 8005a98:	6060      	str	r0, [r4, #4]
 8005a9a:	6863      	ldr	r3, [r4, #4]
 8005a9c:	6123      	str	r3, [r4, #16]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa4:	e7a8      	b.n	80059f8 <_printf_i+0x150>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4649      	mov	r1, r9
 8005aac:	4640      	mov	r0, r8
 8005aae:	47d0      	blx	sl
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d0ab      	beq.n	8005a0c <_printf_i+0x164>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	079b      	lsls	r3, r3, #30
 8005ab8:	d413      	bmi.n	8005ae2 <_printf_i+0x23a>
 8005aba:	68e0      	ldr	r0, [r4, #12]
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	4298      	cmp	r0, r3
 8005ac0:	bfb8      	it	lt
 8005ac2:	4618      	movlt	r0, r3
 8005ac4:	e7a4      	b.n	8005a10 <_printf_i+0x168>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4632      	mov	r2, r6
 8005aca:	4649      	mov	r1, r9
 8005acc:	4640      	mov	r0, r8
 8005ace:	47d0      	blx	sl
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d09b      	beq.n	8005a0c <_printf_i+0x164>
 8005ad4:	3501      	adds	r5, #1
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	9903      	ldr	r1, [sp, #12]
 8005ada:	1a5b      	subs	r3, r3, r1
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	dcf2      	bgt.n	8005ac6 <_printf_i+0x21e>
 8005ae0:	e7eb      	b.n	8005aba <_printf_i+0x212>
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	f104 0619 	add.w	r6, r4, #25
 8005ae8:	e7f5      	b.n	8005ad6 <_printf_i+0x22e>
 8005aea:	bf00      	nop
 8005aec:	08007fd6 	.word	0x08007fd6
 8005af0:	08007fe7 	.word	0x08007fe7

08005af4 <siprintf>:
 8005af4:	b40e      	push	{r1, r2, r3}
 8005af6:	b500      	push	{lr}
 8005af8:	b09c      	sub	sp, #112	; 0x70
 8005afa:	ab1d      	add	r3, sp, #116	; 0x74
 8005afc:	9002      	str	r0, [sp, #8]
 8005afe:	9006      	str	r0, [sp, #24]
 8005b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b04:	4809      	ldr	r0, [pc, #36]	; (8005b2c <siprintf+0x38>)
 8005b06:	9107      	str	r1, [sp, #28]
 8005b08:	9104      	str	r1, [sp, #16]
 8005b0a:	4909      	ldr	r1, [pc, #36]	; (8005b30 <siprintf+0x3c>)
 8005b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b10:	9105      	str	r1, [sp, #20]
 8005b12:	6800      	ldr	r0, [r0, #0]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	a902      	add	r1, sp, #8
 8005b18:	f001 fb34 	bl	8007184 <_svfiprintf_r>
 8005b1c:	9b02      	ldr	r3, [sp, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	b01c      	add	sp, #112	; 0x70
 8005b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b28:	b003      	add	sp, #12
 8005b2a:	4770      	bx	lr
 8005b2c:	2000000c 	.word	0x2000000c
 8005b30:	ffff0208 	.word	0xffff0208

08005b34 <quorem>:
 8005b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	6903      	ldr	r3, [r0, #16]
 8005b3a:	690c      	ldr	r4, [r1, #16]
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	4607      	mov	r7, r0
 8005b40:	f2c0 8081 	blt.w	8005c46 <quorem+0x112>
 8005b44:	3c01      	subs	r4, #1
 8005b46:	f101 0814 	add.w	r8, r1, #20
 8005b4a:	f100 0514 	add.w	r5, r0, #20
 8005b4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b68:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b6c:	d331      	bcc.n	8005bd2 <quorem+0x9e>
 8005b6e:	f04f 0e00 	mov.w	lr, #0
 8005b72:	4640      	mov	r0, r8
 8005b74:	46ac      	mov	ip, r5
 8005b76:	46f2      	mov	sl, lr
 8005b78:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b7c:	b293      	uxth	r3, r2
 8005b7e:	fb06 e303 	mla	r3, r6, r3, lr
 8005b82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ebaa 0303 	sub.w	r3, sl, r3
 8005b8c:	0c12      	lsrs	r2, r2, #16
 8005b8e:	f8dc a000 	ldr.w	sl, [ip]
 8005b92:	fb06 e202 	mla	r2, r6, r2, lr
 8005b96:	fa13 f38a 	uxtah	r3, r3, sl
 8005b9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b9e:	fa1f fa82 	uxth.w	sl, r2
 8005ba2:	f8dc 2000 	ldr.w	r2, [ip]
 8005ba6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005baa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb4:	4581      	cmp	r9, r0
 8005bb6:	f84c 3b04 	str.w	r3, [ip], #4
 8005bba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bbe:	d2db      	bcs.n	8005b78 <quorem+0x44>
 8005bc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bc4:	b92b      	cbnz	r3, 8005bd2 <quorem+0x9e>
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	429d      	cmp	r5, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	d32e      	bcc.n	8005c2e <quorem+0xfa>
 8005bd0:	613c      	str	r4, [r7, #16]
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	f001 f8c0 	bl	8006d58 <__mcmp>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	db24      	blt.n	8005c26 <quorem+0xf2>
 8005bdc:	3601      	adds	r6, #1
 8005bde:	4628      	mov	r0, r5
 8005be0:	f04f 0c00 	mov.w	ip, #0
 8005be4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005be8:	f8d0 e000 	ldr.w	lr, [r0]
 8005bec:	b293      	uxth	r3, r2
 8005bee:	ebac 0303 	sub.w	r3, ip, r3
 8005bf2:	0c12      	lsrs	r2, r2, #16
 8005bf4:	fa13 f38e 	uxtah	r3, r3, lr
 8005bf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c06:	45c1      	cmp	r9, r8
 8005c08:	f840 3b04 	str.w	r3, [r0], #4
 8005c0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c10:	d2e8      	bcs.n	8005be4 <quorem+0xb0>
 8005c12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c1a:	b922      	cbnz	r2, 8005c26 <quorem+0xf2>
 8005c1c:	3b04      	subs	r3, #4
 8005c1e:	429d      	cmp	r5, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	d30a      	bcc.n	8005c3a <quorem+0x106>
 8005c24:	613c      	str	r4, [r7, #16]
 8005c26:	4630      	mov	r0, r6
 8005c28:	b003      	add	sp, #12
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	3b04      	subs	r3, #4
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d1cc      	bne.n	8005bd0 <quorem+0x9c>
 8005c36:	3c01      	subs	r4, #1
 8005c38:	e7c7      	b.n	8005bca <quorem+0x96>
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	d1f0      	bne.n	8005c24 <quorem+0xf0>
 8005c42:	3c01      	subs	r4, #1
 8005c44:	e7eb      	b.n	8005c1e <quorem+0xea>
 8005c46:	2000      	movs	r0, #0
 8005c48:	e7ee      	b.n	8005c28 <quorem+0xf4>
 8005c4a:	0000      	movs	r0, r0
 8005c4c:	0000      	movs	r0, r0
	...

08005c50 <_dtoa_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	ed2d 8b02 	vpush	{d8}
 8005c58:	ec57 6b10 	vmov	r6, r7, d0
 8005c5c:	b095      	sub	sp, #84	; 0x54
 8005c5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c64:	9105      	str	r1, [sp, #20]
 8005c66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c70:	b975      	cbnz	r5, 8005c90 <_dtoa_r+0x40>
 8005c72:	2010      	movs	r0, #16
 8005c74:	f000 fddc 	bl	8006830 <malloc>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6260      	str	r0, [r4, #36]	; 0x24
 8005c7c:	b920      	cbnz	r0, 8005c88 <_dtoa_r+0x38>
 8005c7e:	4bb2      	ldr	r3, [pc, #712]	; (8005f48 <_dtoa_r+0x2f8>)
 8005c80:	21ea      	movs	r1, #234	; 0xea
 8005c82:	48b2      	ldr	r0, [pc, #712]	; (8005f4c <_dtoa_r+0x2fc>)
 8005c84:	f001 fb8e 	bl	80073a4 <__assert_func>
 8005c88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c8c:	6005      	str	r5, [r0, #0]
 8005c8e:	60c5      	str	r5, [r0, #12]
 8005c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	b151      	cbz	r1, 8005cac <_dtoa_r+0x5c>
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	604a      	str	r2, [r1, #4]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4093      	lsls	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fe1b 	bl	80068dc <_Bfree>
 8005ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	1e3b      	subs	r3, r7, #0
 8005cae:	bfb9      	ittee	lt
 8005cb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	9303      	strlt	r3, [sp, #12]
 8005cb6:	2300      	movge	r3, #0
 8005cb8:	f8c8 3000 	strge.w	r3, [r8]
 8005cbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005cc0:	4ba3      	ldr	r3, [pc, #652]	; (8005f50 <_dtoa_r+0x300>)
 8005cc2:	bfbc      	itt	lt
 8005cc4:	2201      	movlt	r2, #1
 8005cc6:	f8c8 2000 	strlt.w	r2, [r8]
 8005cca:	ea33 0309 	bics.w	r3, r3, r9
 8005cce:	d11b      	bne.n	8005d08 <_dtoa_r+0xb8>
 8005cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cdc:	4333      	orrs	r3, r6
 8005cde:	f000 857a 	beq.w	80067d6 <_dtoa_r+0xb86>
 8005ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce4:	b963      	cbnz	r3, 8005d00 <_dtoa_r+0xb0>
 8005ce6:	4b9b      	ldr	r3, [pc, #620]	; (8005f54 <_dtoa_r+0x304>)
 8005ce8:	e024      	b.n	8005d34 <_dtoa_r+0xe4>
 8005cea:	4b9b      	ldr	r3, [pc, #620]	; (8005f58 <_dtoa_r+0x308>)
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	9800      	ldr	r0, [sp, #0]
 8005cf6:	b015      	add	sp, #84	; 0x54
 8005cf8:	ecbd 8b02 	vpop	{d8}
 8005cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d00:	4b94      	ldr	r3, [pc, #592]	; (8005f54 <_dtoa_r+0x304>)
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	3303      	adds	r3, #3
 8005d06:	e7f3      	b.n	8005cf0 <_dtoa_r+0xa0>
 8005d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	ec51 0b17 	vmov	r0, r1, d7
 8005d12:	2300      	movs	r3, #0
 8005d14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005d18:	f7fa fefe 	bl	8000b18 <__aeabi_dcmpeq>
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	b158      	cbz	r0, 8005d38 <_dtoa_r+0xe8>
 8005d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d22:	2301      	movs	r3, #1
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8551 	beq.w	80067d0 <_dtoa_r+0xb80>
 8005d2e:	488b      	ldr	r0, [pc, #556]	; (8005f5c <_dtoa_r+0x30c>)
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	1e43      	subs	r3, r0, #1
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	e7dd      	b.n	8005cf4 <_dtoa_r+0xa4>
 8005d38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005d3c:	aa12      	add	r2, sp, #72	; 0x48
 8005d3e:	a913      	add	r1, sp, #76	; 0x4c
 8005d40:	4620      	mov	r0, r4
 8005d42:	f001 f8ad 	bl	8006ea0 <__d2b>
 8005d46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d4a:	4683      	mov	fp, r0
 8005d4c:	2d00      	cmp	r5, #0
 8005d4e:	d07c      	beq.n	8005e4a <_dtoa_r+0x1fa>
 8005d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005d5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005d62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d6a:	4b7d      	ldr	r3, [pc, #500]	; (8005f60 <_dtoa_r+0x310>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fab1 	bl	80002d8 <__aeabi_dsub>
 8005d76:	a36e      	add	r3, pc, #440	; (adr r3, 8005f30 <_dtoa_r+0x2e0>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f7fa fc64 	bl	8000648 <__aeabi_dmul>
 8005d80:	a36d      	add	r3, pc, #436	; (adr r3, 8005f38 <_dtoa_r+0x2e8>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa faa9 	bl	80002dc <__adddf3>
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	460f      	mov	r7, r1
 8005d90:	f7fa fbf0 	bl	8000574 <__aeabi_i2d>
 8005d94:	a36a      	add	r3, pc, #424	; (adr r3, 8005f40 <_dtoa_r+0x2f0>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f7fa fc55 	bl	8000648 <__aeabi_dmul>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fa99 	bl	80002dc <__adddf3>
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	f7fa fefb 	bl	8000ba8 <__aeabi_d2iz>
 8005db2:	2200      	movs	r2, #0
 8005db4:	4682      	mov	sl, r0
 8005db6:	2300      	movs	r3, #0
 8005db8:	4630      	mov	r0, r6
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa feb6 	bl	8000b2c <__aeabi_dcmplt>
 8005dc0:	b148      	cbz	r0, 8005dd6 <_dtoa_r+0x186>
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	f7fa fbd6 	bl	8000574 <__aeabi_i2d>
 8005dc8:	4632      	mov	r2, r6
 8005dca:	463b      	mov	r3, r7
 8005dcc:	f7fa fea4 	bl	8000b18 <__aeabi_dcmpeq>
 8005dd0:	b908      	cbnz	r0, 8005dd6 <_dtoa_r+0x186>
 8005dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005dd6:	f1ba 0f16 	cmp.w	sl, #22
 8005dda:	d854      	bhi.n	8005e86 <_dtoa_r+0x236>
 8005ddc:	4b61      	ldr	r3, [pc, #388]	; (8005f64 <_dtoa_r+0x314>)
 8005dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dea:	f7fa fe9f 	bl	8000b2c <__aeabi_dcmplt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d04b      	beq.n	8005e8a <_dtoa_r+0x23a>
 8005df2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005df6:	2300      	movs	r3, #0
 8005df8:	930e      	str	r3, [sp, #56]	; 0x38
 8005dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dfc:	1b5d      	subs	r5, r3, r5
 8005dfe:	1e6b      	subs	r3, r5, #1
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	bf43      	ittte	mi
 8005e04:	2300      	movmi	r3, #0
 8005e06:	f1c5 0801 	rsbmi	r8, r5, #1
 8005e0a:	9304      	strmi	r3, [sp, #16]
 8005e0c:	f04f 0800 	movpl.w	r8, #0
 8005e10:	f1ba 0f00 	cmp.w	sl, #0
 8005e14:	db3b      	blt.n	8005e8e <_dtoa_r+0x23e>
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005e1c:	4453      	add	r3, sl
 8005e1e:	9304      	str	r3, [sp, #16]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9306      	str	r3, [sp, #24]
 8005e24:	9b05      	ldr	r3, [sp, #20]
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	d869      	bhi.n	8005efe <_dtoa_r+0x2ae>
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	bfc4      	itt	gt
 8005e2e:	3b04      	subgt	r3, #4
 8005e30:	9305      	strgt	r3, [sp, #20]
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	f1a3 0302 	sub.w	r3, r3, #2
 8005e38:	bfcc      	ite	gt
 8005e3a:	2500      	movgt	r5, #0
 8005e3c:	2501      	movle	r5, #1
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d869      	bhi.n	8005f16 <_dtoa_r+0x2c6>
 8005e42:	e8df f003 	tbb	[pc, r3]
 8005e46:	4e2c      	.short	0x4e2c
 8005e48:	5a4c      	.short	0x5a4c
 8005e4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e4e:	441d      	add	r5, r3
 8005e50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	bfc1      	itttt	gt
 8005e58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e60:	fa09 f303 	lslgt.w	r3, r9, r3
 8005e64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e68:	bfda      	itte	le
 8005e6a:	f1c3 0320 	rsble	r3, r3, #32
 8005e6e:	fa06 f003 	lslle.w	r0, r6, r3
 8005e72:	4318      	orrgt	r0, r3
 8005e74:	f7fa fb6e 	bl	8000554 <__aeabi_ui2d>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005e80:	3d01      	subs	r5, #1
 8005e82:	9310      	str	r3, [sp, #64]	; 0x40
 8005e84:	e771      	b.n	8005d6a <_dtoa_r+0x11a>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e7b6      	b.n	8005df8 <_dtoa_r+0x1a8>
 8005e8a:	900e      	str	r0, [sp, #56]	; 0x38
 8005e8c:	e7b5      	b.n	8005dfa <_dtoa_r+0x1aa>
 8005e8e:	f1ca 0300 	rsb	r3, sl, #0
 8005e92:	9306      	str	r3, [sp, #24]
 8005e94:	2300      	movs	r3, #0
 8005e96:	eba8 080a 	sub.w	r8, r8, sl
 8005e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8005e9c:	e7c2      	b.n	8005e24 <_dtoa_r+0x1d4>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9308      	str	r3, [sp, #32]
 8005ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dc39      	bgt.n	8005f1c <_dtoa_r+0x2cc>
 8005ea8:	f04f 0901 	mov.w	r9, #1
 8005eac:	f8cd 9004 	str.w	r9, [sp, #4]
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005eb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005eb8:	2200      	movs	r2, #0
 8005eba:	6042      	str	r2, [r0, #4]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	f102 0614 	add.w	r6, r2, #20
 8005ec2:	429e      	cmp	r6, r3
 8005ec4:	6841      	ldr	r1, [r0, #4]
 8005ec6:	d92f      	bls.n	8005f28 <_dtoa_r+0x2d8>
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fcc7 	bl	800685c <_Balloc>
 8005ece:	9000      	str	r0, [sp, #0]
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d14b      	bne.n	8005f6c <_dtoa_r+0x31c>
 8005ed4:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <_dtoa_r+0x318>)
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005edc:	e6d1      	b.n	8005c82 <_dtoa_r+0x32>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e7de      	b.n	8005ea0 <_dtoa_r+0x250>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9308      	str	r3, [sp, #32]
 8005ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee8:	eb0a 0903 	add.w	r9, sl, r3
 8005eec:	f109 0301 	add.w	r3, r9, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	bfb8      	it	lt
 8005ef6:	2301      	movlt	r3, #1
 8005ef8:	e7dd      	b.n	8005eb6 <_dtoa_r+0x266>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e7f2      	b.n	8005ee4 <_dtoa_r+0x294>
 8005efe:	2501      	movs	r5, #1
 8005f00:	2300      	movs	r3, #0
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	9508      	str	r5, [sp, #32]
 8005f06:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f10:	2312      	movs	r3, #18
 8005f12:	9209      	str	r2, [sp, #36]	; 0x24
 8005f14:	e7cf      	b.n	8005eb6 <_dtoa_r+0x266>
 8005f16:	2301      	movs	r3, #1
 8005f18:	9308      	str	r3, [sp, #32]
 8005f1a:	e7f4      	b.n	8005f06 <_dtoa_r+0x2b6>
 8005f1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005f20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f24:	464b      	mov	r3, r9
 8005f26:	e7c6      	b.n	8005eb6 <_dtoa_r+0x266>
 8005f28:	3101      	adds	r1, #1
 8005f2a:	6041      	str	r1, [r0, #4]
 8005f2c:	0052      	lsls	r2, r2, #1
 8005f2e:	e7c6      	b.n	8005ebe <_dtoa_r+0x26e>
 8005f30:	636f4361 	.word	0x636f4361
 8005f34:	3fd287a7 	.word	0x3fd287a7
 8005f38:	8b60c8b3 	.word	0x8b60c8b3
 8005f3c:	3fc68a28 	.word	0x3fc68a28
 8005f40:	509f79fb 	.word	0x509f79fb
 8005f44:	3fd34413 	.word	0x3fd34413
 8005f48:	08008005 	.word	0x08008005
 8005f4c:	0800801c 	.word	0x0800801c
 8005f50:	7ff00000 	.word	0x7ff00000
 8005f54:	08008001 	.word	0x08008001
 8005f58:	08007ff8 	.word	0x08007ff8
 8005f5c:	08007fd5 	.word	0x08007fd5
 8005f60:	3ff80000 	.word	0x3ff80000
 8005f64:	08008118 	.word	0x08008118
 8005f68:	0800807b 	.word	0x0800807b
 8005f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f6e:	9a00      	ldr	r2, [sp, #0]
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	9b01      	ldr	r3, [sp, #4]
 8005f74:	2b0e      	cmp	r3, #14
 8005f76:	f200 80ad 	bhi.w	80060d4 <_dtoa_r+0x484>
 8005f7a:	2d00      	cmp	r5, #0
 8005f7c:	f000 80aa 	beq.w	80060d4 <_dtoa_r+0x484>
 8005f80:	f1ba 0f00 	cmp.w	sl, #0
 8005f84:	dd36      	ble.n	8005ff4 <_dtoa_r+0x3a4>
 8005f86:	4ac3      	ldr	r2, [pc, #780]	; (8006294 <_dtoa_r+0x644>)
 8005f88:	f00a 030f 	and.w	r3, sl, #15
 8005f8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f90:	ed93 7b00 	vldr	d7, [r3]
 8005f94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005f98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005f9c:	eeb0 8a47 	vmov.f32	s16, s14
 8005fa0:	eef0 8a67 	vmov.f32	s17, s15
 8005fa4:	d016      	beq.n	8005fd4 <_dtoa_r+0x384>
 8005fa6:	4bbc      	ldr	r3, [pc, #752]	; (8006298 <_dtoa_r+0x648>)
 8005fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fb0:	f7fa fc74 	bl	800089c <__aeabi_ddiv>
 8005fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb8:	f007 070f 	and.w	r7, r7, #15
 8005fbc:	2503      	movs	r5, #3
 8005fbe:	4eb6      	ldr	r6, [pc, #728]	; (8006298 <_dtoa_r+0x648>)
 8005fc0:	b957      	cbnz	r7, 8005fd8 <_dtoa_r+0x388>
 8005fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc6:	ec53 2b18 	vmov	r2, r3, d8
 8005fca:	f7fa fc67 	bl	800089c <__aeabi_ddiv>
 8005fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd2:	e029      	b.n	8006028 <_dtoa_r+0x3d8>
 8005fd4:	2502      	movs	r5, #2
 8005fd6:	e7f2      	b.n	8005fbe <_dtoa_r+0x36e>
 8005fd8:	07f9      	lsls	r1, r7, #31
 8005fda:	d508      	bpl.n	8005fee <_dtoa_r+0x39e>
 8005fdc:	ec51 0b18 	vmov	r0, r1, d8
 8005fe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fe4:	f7fa fb30 	bl	8000648 <__aeabi_dmul>
 8005fe8:	ec41 0b18 	vmov	d8, r0, r1
 8005fec:	3501      	adds	r5, #1
 8005fee:	107f      	asrs	r7, r7, #1
 8005ff0:	3608      	adds	r6, #8
 8005ff2:	e7e5      	b.n	8005fc0 <_dtoa_r+0x370>
 8005ff4:	f000 80a6 	beq.w	8006144 <_dtoa_r+0x4f4>
 8005ff8:	f1ca 0600 	rsb	r6, sl, #0
 8005ffc:	4ba5      	ldr	r3, [pc, #660]	; (8006294 <_dtoa_r+0x644>)
 8005ffe:	4fa6      	ldr	r7, [pc, #664]	; (8006298 <_dtoa_r+0x648>)
 8006000:	f006 020f 	and.w	r2, r6, #15
 8006004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006010:	f7fa fb1a 	bl	8000648 <__aeabi_dmul>
 8006014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006018:	1136      	asrs	r6, r6, #4
 800601a:	2300      	movs	r3, #0
 800601c:	2502      	movs	r5, #2
 800601e:	2e00      	cmp	r6, #0
 8006020:	f040 8085 	bne.w	800612e <_dtoa_r+0x4de>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1d2      	bne.n	8005fce <_dtoa_r+0x37e>
 8006028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 808c 	beq.w	8006148 <_dtoa_r+0x4f8>
 8006030:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006034:	4b99      	ldr	r3, [pc, #612]	; (800629c <_dtoa_r+0x64c>)
 8006036:	2200      	movs	r2, #0
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa fd76 	bl	8000b2c <__aeabi_dcmplt>
 8006040:	2800      	cmp	r0, #0
 8006042:	f000 8081 	beq.w	8006148 <_dtoa_r+0x4f8>
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d07d      	beq.n	8006148 <_dtoa_r+0x4f8>
 800604c:	f1b9 0f00 	cmp.w	r9, #0
 8006050:	dd3c      	ble.n	80060cc <_dtoa_r+0x47c>
 8006052:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006056:	9307      	str	r3, [sp, #28]
 8006058:	2200      	movs	r2, #0
 800605a:	4b91      	ldr	r3, [pc, #580]	; (80062a0 <_dtoa_r+0x650>)
 800605c:	4630      	mov	r0, r6
 800605e:	4639      	mov	r1, r7
 8006060:	f7fa faf2 	bl	8000648 <__aeabi_dmul>
 8006064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006068:	3501      	adds	r5, #1
 800606a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800606e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006072:	4628      	mov	r0, r5
 8006074:	f7fa fa7e 	bl	8000574 <__aeabi_i2d>
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	f7fa fae4 	bl	8000648 <__aeabi_dmul>
 8006080:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <_dtoa_r+0x654>)
 8006082:	2200      	movs	r2, #0
 8006084:	f7fa f92a 	bl	80002dc <__adddf3>
 8006088:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800608c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006090:	9303      	str	r3, [sp, #12]
 8006092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006094:	2b00      	cmp	r3, #0
 8006096:	d15c      	bne.n	8006152 <_dtoa_r+0x502>
 8006098:	4b83      	ldr	r3, [pc, #524]	; (80062a8 <_dtoa_r+0x658>)
 800609a:	2200      	movs	r2, #0
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa f91a 	bl	80002d8 <__aeabi_dsub>
 80060a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	f7fa fd5c 	bl	8000b68 <__aeabi_dcmpgt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f040 8296 	bne.w	80065e2 <_dtoa_r+0x992>
 80060b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80060ba:	4630      	mov	r0, r6
 80060bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060c0:	4639      	mov	r1, r7
 80060c2:	f7fa fd33 	bl	8000b2c <__aeabi_dcmplt>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f040 8288 	bne.w	80065dc <_dtoa_r+0x98c>
 80060cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f2c0 8158 	blt.w	800638c <_dtoa_r+0x73c>
 80060dc:	f1ba 0f0e 	cmp.w	sl, #14
 80060e0:	f300 8154 	bgt.w	800638c <_dtoa_r+0x73c>
 80060e4:	4b6b      	ldr	r3, [pc, #428]	; (8006294 <_dtoa_r+0x644>)
 80060e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f280 80e3 	bge.w	80062bc <_dtoa_r+0x66c>
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f300 80df 	bgt.w	80062bc <_dtoa_r+0x66c>
 80060fe:	f040 826d 	bne.w	80065dc <_dtoa_r+0x98c>
 8006102:	4b69      	ldr	r3, [pc, #420]	; (80062a8 <_dtoa_r+0x658>)
 8006104:	2200      	movs	r2, #0
 8006106:	4640      	mov	r0, r8
 8006108:	4649      	mov	r1, r9
 800610a:	f7fa fa9d 	bl	8000648 <__aeabi_dmul>
 800610e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006112:	f7fa fd1f 	bl	8000b54 <__aeabi_dcmpge>
 8006116:	9e01      	ldr	r6, [sp, #4]
 8006118:	4637      	mov	r7, r6
 800611a:	2800      	cmp	r0, #0
 800611c:	f040 8243 	bne.w	80065a6 <_dtoa_r+0x956>
 8006120:	9d00      	ldr	r5, [sp, #0]
 8006122:	2331      	movs	r3, #49	; 0x31
 8006124:	f805 3b01 	strb.w	r3, [r5], #1
 8006128:	f10a 0a01 	add.w	sl, sl, #1
 800612c:	e23f      	b.n	80065ae <_dtoa_r+0x95e>
 800612e:	07f2      	lsls	r2, r6, #31
 8006130:	d505      	bpl.n	800613e <_dtoa_r+0x4ee>
 8006132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006136:	f7fa fa87 	bl	8000648 <__aeabi_dmul>
 800613a:	3501      	adds	r5, #1
 800613c:	2301      	movs	r3, #1
 800613e:	1076      	asrs	r6, r6, #1
 8006140:	3708      	adds	r7, #8
 8006142:	e76c      	b.n	800601e <_dtoa_r+0x3ce>
 8006144:	2502      	movs	r5, #2
 8006146:	e76f      	b.n	8006028 <_dtoa_r+0x3d8>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	f8cd a01c 	str.w	sl, [sp, #28]
 800614e:	930c      	str	r3, [sp, #48]	; 0x30
 8006150:	e78d      	b.n	800606e <_dtoa_r+0x41e>
 8006152:	9900      	ldr	r1, [sp, #0]
 8006154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006158:	4b4e      	ldr	r3, [pc, #312]	; (8006294 <_dtoa_r+0x644>)
 800615a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800615e:	4401      	add	r1, r0
 8006160:	9102      	str	r1, [sp, #8]
 8006162:	9908      	ldr	r1, [sp, #32]
 8006164:	eeb0 8a47 	vmov.f32	s16, s14
 8006168:	eef0 8a67 	vmov.f32	s17, s15
 800616c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006174:	2900      	cmp	r1, #0
 8006176:	d045      	beq.n	8006204 <_dtoa_r+0x5b4>
 8006178:	494c      	ldr	r1, [pc, #304]	; (80062ac <_dtoa_r+0x65c>)
 800617a:	2000      	movs	r0, #0
 800617c:	f7fa fb8e 	bl	800089c <__aeabi_ddiv>
 8006180:	ec53 2b18 	vmov	r2, r3, d8
 8006184:	f7fa f8a8 	bl	80002d8 <__aeabi_dsub>
 8006188:	9d00      	ldr	r5, [sp, #0]
 800618a:	ec41 0b18 	vmov	d8, r0, r1
 800618e:	4639      	mov	r1, r7
 8006190:	4630      	mov	r0, r6
 8006192:	f7fa fd09 	bl	8000ba8 <__aeabi_d2iz>
 8006196:	900c      	str	r0, [sp, #48]	; 0x30
 8006198:	f7fa f9ec 	bl	8000574 <__aeabi_i2d>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	f7fa f898 	bl	80002d8 <__aeabi_dsub>
 80061a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061aa:	3330      	adds	r3, #48	; 0x30
 80061ac:	f805 3b01 	strb.w	r3, [r5], #1
 80061b0:	ec53 2b18 	vmov	r2, r3, d8
 80061b4:	4606      	mov	r6, r0
 80061b6:	460f      	mov	r7, r1
 80061b8:	f7fa fcb8 	bl	8000b2c <__aeabi_dcmplt>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d165      	bne.n	800628c <_dtoa_r+0x63c>
 80061c0:	4632      	mov	r2, r6
 80061c2:	463b      	mov	r3, r7
 80061c4:	4935      	ldr	r1, [pc, #212]	; (800629c <_dtoa_r+0x64c>)
 80061c6:	2000      	movs	r0, #0
 80061c8:	f7fa f886 	bl	80002d8 <__aeabi_dsub>
 80061cc:	ec53 2b18 	vmov	r2, r3, d8
 80061d0:	f7fa fcac 	bl	8000b2c <__aeabi_dcmplt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f040 80b9 	bne.w	800634c <_dtoa_r+0x6fc>
 80061da:	9b02      	ldr	r3, [sp, #8]
 80061dc:	429d      	cmp	r5, r3
 80061de:	f43f af75 	beq.w	80060cc <_dtoa_r+0x47c>
 80061e2:	4b2f      	ldr	r3, [pc, #188]	; (80062a0 <_dtoa_r+0x650>)
 80061e4:	ec51 0b18 	vmov	r0, r1, d8
 80061e8:	2200      	movs	r2, #0
 80061ea:	f7fa fa2d 	bl	8000648 <__aeabi_dmul>
 80061ee:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <_dtoa_r+0x650>)
 80061f0:	ec41 0b18 	vmov	d8, r0, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	f7fa fa25 	bl	8000648 <__aeabi_dmul>
 80061fe:	4606      	mov	r6, r0
 8006200:	460f      	mov	r7, r1
 8006202:	e7c4      	b.n	800618e <_dtoa_r+0x53e>
 8006204:	ec51 0b17 	vmov	r0, r1, d7
 8006208:	f7fa fa1e 	bl	8000648 <__aeabi_dmul>
 800620c:	9b02      	ldr	r3, [sp, #8]
 800620e:	9d00      	ldr	r5, [sp, #0]
 8006210:	930c      	str	r3, [sp, #48]	; 0x30
 8006212:	ec41 0b18 	vmov	d8, r0, r1
 8006216:	4639      	mov	r1, r7
 8006218:	4630      	mov	r0, r6
 800621a:	f7fa fcc5 	bl	8000ba8 <__aeabi_d2iz>
 800621e:	9011      	str	r0, [sp, #68]	; 0x44
 8006220:	f7fa f9a8 	bl	8000574 <__aeabi_i2d>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4630      	mov	r0, r6
 800622a:	4639      	mov	r1, r7
 800622c:	f7fa f854 	bl	80002d8 <__aeabi_dsub>
 8006230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006232:	3330      	adds	r3, #48	; 0x30
 8006234:	f805 3b01 	strb.w	r3, [r5], #1
 8006238:	9b02      	ldr	r3, [sp, #8]
 800623a:	429d      	cmp	r5, r3
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	d134      	bne.n	80062b0 <_dtoa_r+0x660>
 8006246:	4b19      	ldr	r3, [pc, #100]	; (80062ac <_dtoa_r+0x65c>)
 8006248:	ec51 0b18 	vmov	r0, r1, d8
 800624c:	f7fa f846 	bl	80002dc <__adddf3>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa fc86 	bl	8000b68 <__aeabi_dcmpgt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d175      	bne.n	800634c <_dtoa_r+0x6fc>
 8006260:	ec53 2b18 	vmov	r2, r3, d8
 8006264:	4911      	ldr	r1, [pc, #68]	; (80062ac <_dtoa_r+0x65c>)
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa f836 	bl	80002d8 <__aeabi_dsub>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7fa fc5a 	bl	8000b2c <__aeabi_dcmplt>
 8006278:	2800      	cmp	r0, #0
 800627a:	f43f af27 	beq.w	80060cc <_dtoa_r+0x47c>
 800627e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006280:	1e6b      	subs	r3, r5, #1
 8006282:	930c      	str	r3, [sp, #48]	; 0x30
 8006284:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006288:	2b30      	cmp	r3, #48	; 0x30
 800628a:	d0f8      	beq.n	800627e <_dtoa_r+0x62e>
 800628c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006290:	e04a      	b.n	8006328 <_dtoa_r+0x6d8>
 8006292:	bf00      	nop
 8006294:	08008118 	.word	0x08008118
 8006298:	080080f0 	.word	0x080080f0
 800629c:	3ff00000 	.word	0x3ff00000
 80062a0:	40240000 	.word	0x40240000
 80062a4:	401c0000 	.word	0x401c0000
 80062a8:	40140000 	.word	0x40140000
 80062ac:	3fe00000 	.word	0x3fe00000
 80062b0:	4baf      	ldr	r3, [pc, #700]	; (8006570 <_dtoa_r+0x920>)
 80062b2:	f7fa f9c9 	bl	8000648 <__aeabi_dmul>
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	e7ac      	b.n	8006216 <_dtoa_r+0x5c6>
 80062bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062c0:	9d00      	ldr	r5, [sp, #0]
 80062c2:	4642      	mov	r2, r8
 80062c4:	464b      	mov	r3, r9
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	f7fa fae7 	bl	800089c <__aeabi_ddiv>
 80062ce:	f7fa fc6b 	bl	8000ba8 <__aeabi_d2iz>
 80062d2:	9002      	str	r0, [sp, #8]
 80062d4:	f7fa f94e 	bl	8000574 <__aeabi_i2d>
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	f7fa f9b4 	bl	8000648 <__aeabi_dmul>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7f9 fff6 	bl	80002d8 <__aeabi_dsub>
 80062ec:	9e02      	ldr	r6, [sp, #8]
 80062ee:	9f01      	ldr	r7, [sp, #4]
 80062f0:	3630      	adds	r6, #48	; 0x30
 80062f2:	f805 6b01 	strb.w	r6, [r5], #1
 80062f6:	9e00      	ldr	r6, [sp, #0]
 80062f8:	1bae      	subs	r6, r5, r6
 80062fa:	42b7      	cmp	r7, r6
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	d137      	bne.n	8006372 <_dtoa_r+0x722>
 8006302:	f7f9 ffeb 	bl	80002dc <__adddf3>
 8006306:	4642      	mov	r2, r8
 8006308:	464b      	mov	r3, r9
 800630a:	4606      	mov	r6, r0
 800630c:	460f      	mov	r7, r1
 800630e:	f7fa fc2b 	bl	8000b68 <__aeabi_dcmpgt>
 8006312:	b9c8      	cbnz	r0, 8006348 <_dtoa_r+0x6f8>
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 8006320:	b110      	cbz	r0, 8006328 <_dtoa_r+0x6d8>
 8006322:	9b02      	ldr	r3, [sp, #8]
 8006324:	07d9      	lsls	r1, r3, #31
 8006326:	d40f      	bmi.n	8006348 <_dtoa_r+0x6f8>
 8006328:	4620      	mov	r0, r4
 800632a:	4659      	mov	r1, fp
 800632c:	f000 fad6 	bl	80068dc <_Bfree>
 8006330:	2300      	movs	r3, #0
 8006332:	702b      	strb	r3, [r5, #0]
 8006334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006336:	f10a 0001 	add.w	r0, sl, #1
 800633a:	6018      	str	r0, [r3, #0]
 800633c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800633e:	2b00      	cmp	r3, #0
 8006340:	f43f acd8 	beq.w	8005cf4 <_dtoa_r+0xa4>
 8006344:	601d      	str	r5, [r3, #0]
 8006346:	e4d5      	b.n	8005cf4 <_dtoa_r+0xa4>
 8006348:	f8cd a01c 	str.w	sl, [sp, #28]
 800634c:	462b      	mov	r3, r5
 800634e:	461d      	mov	r5, r3
 8006350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006354:	2a39      	cmp	r2, #57	; 0x39
 8006356:	d108      	bne.n	800636a <_dtoa_r+0x71a>
 8006358:	9a00      	ldr	r2, [sp, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d1f7      	bne.n	800634e <_dtoa_r+0x6fe>
 800635e:	9a07      	ldr	r2, [sp, #28]
 8006360:	9900      	ldr	r1, [sp, #0]
 8006362:	3201      	adds	r2, #1
 8006364:	9207      	str	r2, [sp, #28]
 8006366:	2230      	movs	r2, #48	; 0x30
 8006368:	700a      	strb	r2, [r1, #0]
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	3201      	adds	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e78c      	b.n	800628c <_dtoa_r+0x63c>
 8006372:	4b7f      	ldr	r3, [pc, #508]	; (8006570 <_dtoa_r+0x920>)
 8006374:	2200      	movs	r2, #0
 8006376:	f7fa f967 	bl	8000648 <__aeabi_dmul>
 800637a:	2200      	movs	r2, #0
 800637c:	2300      	movs	r3, #0
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	f7fa fbc9 	bl	8000b18 <__aeabi_dcmpeq>
 8006386:	2800      	cmp	r0, #0
 8006388:	d09b      	beq.n	80062c2 <_dtoa_r+0x672>
 800638a:	e7cd      	b.n	8006328 <_dtoa_r+0x6d8>
 800638c:	9a08      	ldr	r2, [sp, #32]
 800638e:	2a00      	cmp	r2, #0
 8006390:	f000 80c4 	beq.w	800651c <_dtoa_r+0x8cc>
 8006394:	9a05      	ldr	r2, [sp, #20]
 8006396:	2a01      	cmp	r2, #1
 8006398:	f300 80a8 	bgt.w	80064ec <_dtoa_r+0x89c>
 800639c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800639e:	2a00      	cmp	r2, #0
 80063a0:	f000 80a0 	beq.w	80064e4 <_dtoa_r+0x894>
 80063a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063a8:	9e06      	ldr	r6, [sp, #24]
 80063aa:	4645      	mov	r5, r8
 80063ac:	9a04      	ldr	r2, [sp, #16]
 80063ae:	2101      	movs	r1, #1
 80063b0:	441a      	add	r2, r3
 80063b2:	4620      	mov	r0, r4
 80063b4:	4498      	add	r8, r3
 80063b6:	9204      	str	r2, [sp, #16]
 80063b8:	f000 fb4c 	bl	8006a54 <__i2b>
 80063bc:	4607      	mov	r7, r0
 80063be:	2d00      	cmp	r5, #0
 80063c0:	dd0b      	ble.n	80063da <_dtoa_r+0x78a>
 80063c2:	9b04      	ldr	r3, [sp, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dd08      	ble.n	80063da <_dtoa_r+0x78a>
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	9a04      	ldr	r2, [sp, #16]
 80063cc:	bfa8      	it	ge
 80063ce:	462b      	movge	r3, r5
 80063d0:	eba8 0803 	sub.w	r8, r8, r3
 80063d4:	1aed      	subs	r5, r5, r3
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	9b06      	ldr	r3, [sp, #24]
 80063dc:	b1fb      	cbz	r3, 800641e <_dtoa_r+0x7ce>
 80063de:	9b08      	ldr	r3, [sp, #32]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 809f 	beq.w	8006524 <_dtoa_r+0x8d4>
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	dd11      	ble.n	800640e <_dtoa_r+0x7be>
 80063ea:	4639      	mov	r1, r7
 80063ec:	4632      	mov	r2, r6
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 fbec 	bl	8006bcc <__pow5mult>
 80063f4:	465a      	mov	r2, fp
 80063f6:	4601      	mov	r1, r0
 80063f8:	4607      	mov	r7, r0
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fb40 	bl	8006a80 <__multiply>
 8006400:	4659      	mov	r1, fp
 8006402:	9007      	str	r0, [sp, #28]
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fa69 	bl	80068dc <_Bfree>
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	469b      	mov	fp, r3
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	1b9a      	subs	r2, r3, r6
 8006412:	d004      	beq.n	800641e <_dtoa_r+0x7ce>
 8006414:	4659      	mov	r1, fp
 8006416:	4620      	mov	r0, r4
 8006418:	f000 fbd8 	bl	8006bcc <__pow5mult>
 800641c:	4683      	mov	fp, r0
 800641e:	2101      	movs	r1, #1
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fb17 	bl	8006a54 <__i2b>
 8006426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	4606      	mov	r6, r0
 800642c:	dd7c      	ble.n	8006528 <_dtoa_r+0x8d8>
 800642e:	461a      	mov	r2, r3
 8006430:	4601      	mov	r1, r0
 8006432:	4620      	mov	r0, r4
 8006434:	f000 fbca 	bl	8006bcc <__pow5mult>
 8006438:	9b05      	ldr	r3, [sp, #20]
 800643a:	2b01      	cmp	r3, #1
 800643c:	4606      	mov	r6, r0
 800643e:	dd76      	ble.n	800652e <_dtoa_r+0x8de>
 8006440:	2300      	movs	r3, #0
 8006442:	9306      	str	r3, [sp, #24]
 8006444:	6933      	ldr	r3, [r6, #16]
 8006446:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800644a:	6918      	ldr	r0, [r3, #16]
 800644c:	f000 fab2 	bl	80069b4 <__hi0bits>
 8006450:	f1c0 0020 	rsb	r0, r0, #32
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	4418      	add	r0, r3
 8006458:	f010 001f 	ands.w	r0, r0, #31
 800645c:	f000 8086 	beq.w	800656c <_dtoa_r+0x91c>
 8006460:	f1c0 0320 	rsb	r3, r0, #32
 8006464:	2b04      	cmp	r3, #4
 8006466:	dd7f      	ble.n	8006568 <_dtoa_r+0x918>
 8006468:	f1c0 001c 	rsb	r0, r0, #28
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	4403      	add	r3, r0
 8006470:	4480      	add	r8, r0
 8006472:	4405      	add	r5, r0
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	f1b8 0f00 	cmp.w	r8, #0
 800647a:	dd05      	ble.n	8006488 <_dtoa_r+0x838>
 800647c:	4659      	mov	r1, fp
 800647e:	4642      	mov	r2, r8
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fbfd 	bl	8006c80 <__lshift>
 8006486:	4683      	mov	fp, r0
 8006488:	9b04      	ldr	r3, [sp, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	dd05      	ble.n	800649a <_dtoa_r+0x84a>
 800648e:	4631      	mov	r1, r6
 8006490:	461a      	mov	r2, r3
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fbf4 	bl	8006c80 <__lshift>
 8006498:	4606      	mov	r6, r0
 800649a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d069      	beq.n	8006574 <_dtoa_r+0x924>
 80064a0:	4631      	mov	r1, r6
 80064a2:	4658      	mov	r0, fp
 80064a4:	f000 fc58 	bl	8006d58 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	da63      	bge.n	8006574 <_dtoa_r+0x924>
 80064ac:	2300      	movs	r3, #0
 80064ae:	4659      	mov	r1, fp
 80064b0:	220a      	movs	r2, #10
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fa34 	bl	8006920 <__multadd>
 80064b8:	9b08      	ldr	r3, [sp, #32]
 80064ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064be:	4683      	mov	fp, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 818f 	beq.w	80067e4 <_dtoa_r+0xb94>
 80064c6:	4639      	mov	r1, r7
 80064c8:	2300      	movs	r3, #0
 80064ca:	220a      	movs	r2, #10
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fa27 	bl	8006920 <__multadd>
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	4607      	mov	r7, r0
 80064d8:	f300 808e 	bgt.w	80065f8 <_dtoa_r+0x9a8>
 80064dc:	9b05      	ldr	r3, [sp, #20]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	dc50      	bgt.n	8006584 <_dtoa_r+0x934>
 80064e2:	e089      	b.n	80065f8 <_dtoa_r+0x9a8>
 80064e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064ea:	e75d      	b.n	80063a8 <_dtoa_r+0x758>
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	1e5e      	subs	r6, r3, #1
 80064f0:	9b06      	ldr	r3, [sp, #24]
 80064f2:	42b3      	cmp	r3, r6
 80064f4:	bfbf      	itttt	lt
 80064f6:	9b06      	ldrlt	r3, [sp, #24]
 80064f8:	9606      	strlt	r6, [sp, #24]
 80064fa:	1af2      	sublt	r2, r6, r3
 80064fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80064fe:	bfb6      	itet	lt
 8006500:	189b      	addlt	r3, r3, r2
 8006502:	1b9e      	subge	r6, r3, r6
 8006504:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	bfb8      	it	lt
 800650a:	2600      	movlt	r6, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfb5      	itete	lt
 8006510:	eba8 0503 	sublt.w	r5, r8, r3
 8006514:	9b01      	ldrge	r3, [sp, #4]
 8006516:	2300      	movlt	r3, #0
 8006518:	4645      	movge	r5, r8
 800651a:	e747      	b.n	80063ac <_dtoa_r+0x75c>
 800651c:	9e06      	ldr	r6, [sp, #24]
 800651e:	9f08      	ldr	r7, [sp, #32]
 8006520:	4645      	mov	r5, r8
 8006522:	e74c      	b.n	80063be <_dtoa_r+0x76e>
 8006524:	9a06      	ldr	r2, [sp, #24]
 8006526:	e775      	b.n	8006414 <_dtoa_r+0x7c4>
 8006528:	9b05      	ldr	r3, [sp, #20]
 800652a:	2b01      	cmp	r3, #1
 800652c:	dc18      	bgt.n	8006560 <_dtoa_r+0x910>
 800652e:	9b02      	ldr	r3, [sp, #8]
 8006530:	b9b3      	cbnz	r3, 8006560 <_dtoa_r+0x910>
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006538:	b9a3      	cbnz	r3, 8006564 <_dtoa_r+0x914>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006540:	0d1b      	lsrs	r3, r3, #20
 8006542:	051b      	lsls	r3, r3, #20
 8006544:	b12b      	cbz	r3, 8006552 <_dtoa_r+0x902>
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	f108 0801 	add.w	r8, r8, #1
 8006550:	2301      	movs	r3, #1
 8006552:	9306      	str	r3, [sp, #24]
 8006554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006556:	2b00      	cmp	r3, #0
 8006558:	f47f af74 	bne.w	8006444 <_dtoa_r+0x7f4>
 800655c:	2001      	movs	r0, #1
 800655e:	e779      	b.n	8006454 <_dtoa_r+0x804>
 8006560:	2300      	movs	r3, #0
 8006562:	e7f6      	b.n	8006552 <_dtoa_r+0x902>
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	e7f4      	b.n	8006552 <_dtoa_r+0x902>
 8006568:	d085      	beq.n	8006476 <_dtoa_r+0x826>
 800656a:	4618      	mov	r0, r3
 800656c:	301c      	adds	r0, #28
 800656e:	e77d      	b.n	800646c <_dtoa_r+0x81c>
 8006570:	40240000 	.word	0x40240000
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	dc38      	bgt.n	80065ec <_dtoa_r+0x99c>
 800657a:	9b05      	ldr	r3, [sp, #20]
 800657c:	2b02      	cmp	r3, #2
 800657e:	dd35      	ble.n	80065ec <_dtoa_r+0x99c>
 8006580:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006584:	f1b9 0f00 	cmp.w	r9, #0
 8006588:	d10d      	bne.n	80065a6 <_dtoa_r+0x956>
 800658a:	4631      	mov	r1, r6
 800658c:	464b      	mov	r3, r9
 800658e:	2205      	movs	r2, #5
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f9c5 	bl	8006920 <__multadd>
 8006596:	4601      	mov	r1, r0
 8006598:	4606      	mov	r6, r0
 800659a:	4658      	mov	r0, fp
 800659c:	f000 fbdc 	bl	8006d58 <__mcmp>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f73f adbd 	bgt.w	8006120 <_dtoa_r+0x4d0>
 80065a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a8:	9d00      	ldr	r5, [sp, #0]
 80065aa:	ea6f 0a03 	mvn.w	sl, r3
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	4631      	mov	r1, r6
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 f991 	bl	80068dc <_Bfree>
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	f43f aeb4 	beq.w	8006328 <_dtoa_r+0x6d8>
 80065c0:	f1b8 0f00 	cmp.w	r8, #0
 80065c4:	d005      	beq.n	80065d2 <_dtoa_r+0x982>
 80065c6:	45b8      	cmp	r8, r7
 80065c8:	d003      	beq.n	80065d2 <_dtoa_r+0x982>
 80065ca:	4641      	mov	r1, r8
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 f985 	bl	80068dc <_Bfree>
 80065d2:	4639      	mov	r1, r7
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 f981 	bl	80068dc <_Bfree>
 80065da:	e6a5      	b.n	8006328 <_dtoa_r+0x6d8>
 80065dc:	2600      	movs	r6, #0
 80065de:	4637      	mov	r7, r6
 80065e0:	e7e1      	b.n	80065a6 <_dtoa_r+0x956>
 80065e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80065e8:	4637      	mov	r7, r6
 80065ea:	e599      	b.n	8006120 <_dtoa_r+0x4d0>
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80fd 	beq.w	80067f2 <_dtoa_r+0xba2>
 80065f8:	2d00      	cmp	r5, #0
 80065fa:	dd05      	ble.n	8006608 <_dtoa_r+0x9b8>
 80065fc:	4639      	mov	r1, r7
 80065fe:	462a      	mov	r2, r5
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fb3d 	bl	8006c80 <__lshift>
 8006606:	4607      	mov	r7, r0
 8006608:	9b06      	ldr	r3, [sp, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d05c      	beq.n	80066c8 <_dtoa_r+0xa78>
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4620      	mov	r0, r4
 8006612:	f000 f923 	bl	800685c <_Balloc>
 8006616:	4605      	mov	r5, r0
 8006618:	b928      	cbnz	r0, 8006626 <_dtoa_r+0x9d6>
 800661a:	4b80      	ldr	r3, [pc, #512]	; (800681c <_dtoa_r+0xbcc>)
 800661c:	4602      	mov	r2, r0
 800661e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006622:	f7ff bb2e 	b.w	8005c82 <_dtoa_r+0x32>
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	3202      	adds	r2, #2
 800662a:	0092      	lsls	r2, r2, #2
 800662c:	f107 010c 	add.w	r1, r7, #12
 8006630:	300c      	adds	r0, #12
 8006632:	f000 f905 	bl	8006840 <memcpy>
 8006636:	2201      	movs	r2, #1
 8006638:	4629      	mov	r1, r5
 800663a:	4620      	mov	r0, r4
 800663c:	f000 fb20 	bl	8006c80 <__lshift>
 8006640:	9b00      	ldr	r3, [sp, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	9b00      	ldr	r3, [sp, #0]
 8006648:	444b      	add	r3, r9
 800664a:	9307      	str	r3, [sp, #28]
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	46b8      	mov	r8, r7
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	4607      	mov	r7, r0
 8006658:	9b01      	ldr	r3, [sp, #4]
 800665a:	4631      	mov	r1, r6
 800665c:	3b01      	subs	r3, #1
 800665e:	4658      	mov	r0, fp
 8006660:	9302      	str	r3, [sp, #8]
 8006662:	f7ff fa67 	bl	8005b34 <quorem>
 8006666:	4603      	mov	r3, r0
 8006668:	3330      	adds	r3, #48	; 0x30
 800666a:	9004      	str	r0, [sp, #16]
 800666c:	4641      	mov	r1, r8
 800666e:	4658      	mov	r0, fp
 8006670:	9308      	str	r3, [sp, #32]
 8006672:	f000 fb71 	bl	8006d58 <__mcmp>
 8006676:	463a      	mov	r2, r7
 8006678:	4681      	mov	r9, r0
 800667a:	4631      	mov	r1, r6
 800667c:	4620      	mov	r0, r4
 800667e:	f000 fb87 	bl	8006d90 <__mdiff>
 8006682:	68c2      	ldr	r2, [r0, #12]
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	4605      	mov	r5, r0
 8006688:	bb02      	cbnz	r2, 80066cc <_dtoa_r+0xa7c>
 800668a:	4601      	mov	r1, r0
 800668c:	4658      	mov	r0, fp
 800668e:	f000 fb63 	bl	8006d58 <__mcmp>
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	4602      	mov	r2, r0
 8006696:	4629      	mov	r1, r5
 8006698:	4620      	mov	r0, r4
 800669a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800669e:	f000 f91d 	bl	80068dc <_Bfree>
 80066a2:	9b05      	ldr	r3, [sp, #20]
 80066a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a6:	9d01      	ldr	r5, [sp, #4]
 80066a8:	ea43 0102 	orr.w	r1, r3, r2
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	430b      	orrs	r3, r1
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	d10d      	bne.n	80066d0 <_dtoa_r+0xa80>
 80066b4:	2b39      	cmp	r3, #57	; 0x39
 80066b6:	d029      	beq.n	800670c <_dtoa_r+0xabc>
 80066b8:	f1b9 0f00 	cmp.w	r9, #0
 80066bc:	dd01      	ble.n	80066c2 <_dtoa_r+0xa72>
 80066be:	9b04      	ldr	r3, [sp, #16]
 80066c0:	3331      	adds	r3, #49	; 0x31
 80066c2:	9a02      	ldr	r2, [sp, #8]
 80066c4:	7013      	strb	r3, [r2, #0]
 80066c6:	e774      	b.n	80065b2 <_dtoa_r+0x962>
 80066c8:	4638      	mov	r0, r7
 80066ca:	e7b9      	b.n	8006640 <_dtoa_r+0x9f0>
 80066cc:	2201      	movs	r2, #1
 80066ce:	e7e2      	b.n	8006696 <_dtoa_r+0xa46>
 80066d0:	f1b9 0f00 	cmp.w	r9, #0
 80066d4:	db06      	blt.n	80066e4 <_dtoa_r+0xa94>
 80066d6:	9905      	ldr	r1, [sp, #20]
 80066d8:	ea41 0909 	orr.w	r9, r1, r9
 80066dc:	9906      	ldr	r1, [sp, #24]
 80066de:	ea59 0101 	orrs.w	r1, r9, r1
 80066e2:	d120      	bne.n	8006726 <_dtoa_r+0xad6>
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	ddec      	ble.n	80066c2 <_dtoa_r+0xa72>
 80066e8:	4659      	mov	r1, fp
 80066ea:	2201      	movs	r2, #1
 80066ec:	4620      	mov	r0, r4
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	f000 fac6 	bl	8006c80 <__lshift>
 80066f4:	4631      	mov	r1, r6
 80066f6:	4683      	mov	fp, r0
 80066f8:	f000 fb2e 	bl	8006d58 <__mcmp>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	dc02      	bgt.n	8006708 <_dtoa_r+0xab8>
 8006702:	d1de      	bne.n	80066c2 <_dtoa_r+0xa72>
 8006704:	07da      	lsls	r2, r3, #31
 8006706:	d5dc      	bpl.n	80066c2 <_dtoa_r+0xa72>
 8006708:	2b39      	cmp	r3, #57	; 0x39
 800670a:	d1d8      	bne.n	80066be <_dtoa_r+0xa6e>
 800670c:	9a02      	ldr	r2, [sp, #8]
 800670e:	2339      	movs	r3, #57	; 0x39
 8006710:	7013      	strb	r3, [r2, #0]
 8006712:	462b      	mov	r3, r5
 8006714:	461d      	mov	r5, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800671c:	2a39      	cmp	r2, #57	; 0x39
 800671e:	d050      	beq.n	80067c2 <_dtoa_r+0xb72>
 8006720:	3201      	adds	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e745      	b.n	80065b2 <_dtoa_r+0x962>
 8006726:	2a00      	cmp	r2, #0
 8006728:	dd03      	ble.n	8006732 <_dtoa_r+0xae2>
 800672a:	2b39      	cmp	r3, #57	; 0x39
 800672c:	d0ee      	beq.n	800670c <_dtoa_r+0xabc>
 800672e:	3301      	adds	r3, #1
 8006730:	e7c7      	b.n	80066c2 <_dtoa_r+0xa72>
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	9907      	ldr	r1, [sp, #28]
 8006736:	f802 3c01 	strb.w	r3, [r2, #-1]
 800673a:	428a      	cmp	r2, r1
 800673c:	d02a      	beq.n	8006794 <_dtoa_r+0xb44>
 800673e:	4659      	mov	r1, fp
 8006740:	2300      	movs	r3, #0
 8006742:	220a      	movs	r2, #10
 8006744:	4620      	mov	r0, r4
 8006746:	f000 f8eb 	bl	8006920 <__multadd>
 800674a:	45b8      	cmp	r8, r7
 800674c:	4683      	mov	fp, r0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	f04f 020a 	mov.w	r2, #10
 8006756:	4641      	mov	r1, r8
 8006758:	4620      	mov	r0, r4
 800675a:	d107      	bne.n	800676c <_dtoa_r+0xb1c>
 800675c:	f000 f8e0 	bl	8006920 <__multadd>
 8006760:	4680      	mov	r8, r0
 8006762:	4607      	mov	r7, r0
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	3301      	adds	r3, #1
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	e775      	b.n	8006658 <_dtoa_r+0xa08>
 800676c:	f000 f8d8 	bl	8006920 <__multadd>
 8006770:	4639      	mov	r1, r7
 8006772:	4680      	mov	r8, r0
 8006774:	2300      	movs	r3, #0
 8006776:	220a      	movs	r2, #10
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f8d1 	bl	8006920 <__multadd>
 800677e:	4607      	mov	r7, r0
 8006780:	e7f0      	b.n	8006764 <_dtoa_r+0xb14>
 8006782:	f1b9 0f00 	cmp.w	r9, #0
 8006786:	9a00      	ldr	r2, [sp, #0]
 8006788:	bfcc      	ite	gt
 800678a:	464d      	movgt	r5, r9
 800678c:	2501      	movle	r5, #1
 800678e:	4415      	add	r5, r2
 8006790:	f04f 0800 	mov.w	r8, #0
 8006794:	4659      	mov	r1, fp
 8006796:	2201      	movs	r2, #1
 8006798:	4620      	mov	r0, r4
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	f000 fa70 	bl	8006c80 <__lshift>
 80067a0:	4631      	mov	r1, r6
 80067a2:	4683      	mov	fp, r0
 80067a4:	f000 fad8 	bl	8006d58 <__mcmp>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	dcb2      	bgt.n	8006712 <_dtoa_r+0xac2>
 80067ac:	d102      	bne.n	80067b4 <_dtoa_r+0xb64>
 80067ae:	9b01      	ldr	r3, [sp, #4]
 80067b0:	07db      	lsls	r3, r3, #31
 80067b2:	d4ae      	bmi.n	8006712 <_dtoa_r+0xac2>
 80067b4:	462b      	mov	r3, r5
 80067b6:	461d      	mov	r5, r3
 80067b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067bc:	2a30      	cmp	r2, #48	; 0x30
 80067be:	d0fa      	beq.n	80067b6 <_dtoa_r+0xb66>
 80067c0:	e6f7      	b.n	80065b2 <_dtoa_r+0x962>
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d1a5      	bne.n	8006714 <_dtoa_r+0xac4>
 80067c8:	f10a 0a01 	add.w	sl, sl, #1
 80067cc:	2331      	movs	r3, #49	; 0x31
 80067ce:	e779      	b.n	80066c4 <_dtoa_r+0xa74>
 80067d0:	4b13      	ldr	r3, [pc, #76]	; (8006820 <_dtoa_r+0xbd0>)
 80067d2:	f7ff baaf 	b.w	8005d34 <_dtoa_r+0xe4>
 80067d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f47f aa86 	bne.w	8005cea <_dtoa_r+0x9a>
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <_dtoa_r+0xbd4>)
 80067e0:	f7ff baa8 	b.w	8005d34 <_dtoa_r+0xe4>
 80067e4:	f1b9 0f00 	cmp.w	r9, #0
 80067e8:	dc03      	bgt.n	80067f2 <_dtoa_r+0xba2>
 80067ea:	9b05      	ldr	r3, [sp, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	f73f aec9 	bgt.w	8006584 <_dtoa_r+0x934>
 80067f2:	9d00      	ldr	r5, [sp, #0]
 80067f4:	4631      	mov	r1, r6
 80067f6:	4658      	mov	r0, fp
 80067f8:	f7ff f99c 	bl	8005b34 <quorem>
 80067fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006800:	f805 3b01 	strb.w	r3, [r5], #1
 8006804:	9a00      	ldr	r2, [sp, #0]
 8006806:	1aaa      	subs	r2, r5, r2
 8006808:	4591      	cmp	r9, r2
 800680a:	ddba      	ble.n	8006782 <_dtoa_r+0xb32>
 800680c:	4659      	mov	r1, fp
 800680e:	2300      	movs	r3, #0
 8006810:	220a      	movs	r2, #10
 8006812:	4620      	mov	r0, r4
 8006814:	f000 f884 	bl	8006920 <__multadd>
 8006818:	4683      	mov	fp, r0
 800681a:	e7eb      	b.n	80067f4 <_dtoa_r+0xba4>
 800681c:	0800807b 	.word	0x0800807b
 8006820:	08007fd4 	.word	0x08007fd4
 8006824:	08007ff8 	.word	0x08007ff8

08006828 <_localeconv_r>:
 8006828:	4800      	ldr	r0, [pc, #0]	; (800682c <_localeconv_r+0x4>)
 800682a:	4770      	bx	lr
 800682c:	20000160 	.word	0x20000160

08006830 <malloc>:
 8006830:	4b02      	ldr	r3, [pc, #8]	; (800683c <malloc+0xc>)
 8006832:	4601      	mov	r1, r0
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	f000 bbef 	b.w	8007018 <_malloc_r>
 800683a:	bf00      	nop
 800683c:	2000000c 	.word	0x2000000c

08006840 <memcpy>:
 8006840:	440a      	add	r2, r1
 8006842:	4291      	cmp	r1, r2
 8006844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006848:	d100      	bne.n	800684c <memcpy+0xc>
 800684a:	4770      	bx	lr
 800684c:	b510      	push	{r4, lr}
 800684e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006856:	4291      	cmp	r1, r2
 8006858:	d1f9      	bne.n	800684e <memcpy+0xe>
 800685a:	bd10      	pop	{r4, pc}

0800685c <_Balloc>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	b976      	cbnz	r6, 8006884 <_Balloc+0x28>
 8006866:	2010      	movs	r0, #16
 8006868:	f7ff ffe2 	bl	8006830 <malloc>
 800686c:	4602      	mov	r2, r0
 800686e:	6260      	str	r0, [r4, #36]	; 0x24
 8006870:	b920      	cbnz	r0, 800687c <_Balloc+0x20>
 8006872:	4b18      	ldr	r3, [pc, #96]	; (80068d4 <_Balloc+0x78>)
 8006874:	4818      	ldr	r0, [pc, #96]	; (80068d8 <_Balloc+0x7c>)
 8006876:	2166      	movs	r1, #102	; 0x66
 8006878:	f000 fd94 	bl	80073a4 <__assert_func>
 800687c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006880:	6006      	str	r6, [r0, #0]
 8006882:	60c6      	str	r6, [r0, #12]
 8006884:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006886:	68f3      	ldr	r3, [r6, #12]
 8006888:	b183      	cbz	r3, 80068ac <_Balloc+0x50>
 800688a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006892:	b9b8      	cbnz	r0, 80068c4 <_Balloc+0x68>
 8006894:	2101      	movs	r1, #1
 8006896:	fa01 f605 	lsl.w	r6, r1, r5
 800689a:	1d72      	adds	r2, r6, #5
 800689c:	0092      	lsls	r2, r2, #2
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fb5a 	bl	8006f58 <_calloc_r>
 80068a4:	b160      	cbz	r0, 80068c0 <_Balloc+0x64>
 80068a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068aa:	e00e      	b.n	80068ca <_Balloc+0x6e>
 80068ac:	2221      	movs	r2, #33	; 0x21
 80068ae:	2104      	movs	r1, #4
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fb51 	bl	8006f58 <_calloc_r>
 80068b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b8:	60f0      	str	r0, [r6, #12]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e4      	bne.n	800688a <_Balloc+0x2e>
 80068c0:	2000      	movs	r0, #0
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	6802      	ldr	r2, [r0, #0]
 80068c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068ca:	2300      	movs	r3, #0
 80068cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068d0:	e7f7      	b.n	80068c2 <_Balloc+0x66>
 80068d2:	bf00      	nop
 80068d4:	08008005 	.word	0x08008005
 80068d8:	0800808c 	.word	0x0800808c

080068dc <_Bfree>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068e0:	4605      	mov	r5, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	b976      	cbnz	r6, 8006904 <_Bfree+0x28>
 80068e6:	2010      	movs	r0, #16
 80068e8:	f7ff ffa2 	bl	8006830 <malloc>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6268      	str	r0, [r5, #36]	; 0x24
 80068f0:	b920      	cbnz	r0, 80068fc <_Bfree+0x20>
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <_Bfree+0x3c>)
 80068f4:	4809      	ldr	r0, [pc, #36]	; (800691c <_Bfree+0x40>)
 80068f6:	218a      	movs	r1, #138	; 0x8a
 80068f8:	f000 fd54 	bl	80073a4 <__assert_func>
 80068fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006900:	6006      	str	r6, [r0, #0]
 8006902:	60c6      	str	r6, [r0, #12]
 8006904:	b13c      	cbz	r4, 8006916 <_Bfree+0x3a>
 8006906:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006908:	6862      	ldr	r2, [r4, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006910:	6021      	str	r1, [r4, #0]
 8006912:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	08008005 	.word	0x08008005
 800691c:	0800808c 	.word	0x0800808c

08006920 <__multadd>:
 8006920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006924:	690e      	ldr	r6, [r1, #16]
 8006926:	4607      	mov	r7, r0
 8006928:	4698      	mov	r8, r3
 800692a:	460c      	mov	r4, r1
 800692c:	f101 0014 	add.w	r0, r1, #20
 8006930:	2300      	movs	r3, #0
 8006932:	6805      	ldr	r5, [r0, #0]
 8006934:	b2a9      	uxth	r1, r5
 8006936:	fb02 8101 	mla	r1, r2, r1, r8
 800693a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800693e:	0c2d      	lsrs	r5, r5, #16
 8006940:	fb02 c505 	mla	r5, r2, r5, ip
 8006944:	b289      	uxth	r1, r1
 8006946:	3301      	adds	r3, #1
 8006948:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800694c:	429e      	cmp	r6, r3
 800694e:	f840 1b04 	str.w	r1, [r0], #4
 8006952:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006956:	dcec      	bgt.n	8006932 <__multadd+0x12>
 8006958:	f1b8 0f00 	cmp.w	r8, #0
 800695c:	d022      	beq.n	80069a4 <__multadd+0x84>
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	42b3      	cmp	r3, r6
 8006962:	dc19      	bgt.n	8006998 <__multadd+0x78>
 8006964:	6861      	ldr	r1, [r4, #4]
 8006966:	4638      	mov	r0, r7
 8006968:	3101      	adds	r1, #1
 800696a:	f7ff ff77 	bl	800685c <_Balloc>
 800696e:	4605      	mov	r5, r0
 8006970:	b928      	cbnz	r0, 800697e <__multadd+0x5e>
 8006972:	4602      	mov	r2, r0
 8006974:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <__multadd+0x8c>)
 8006976:	480e      	ldr	r0, [pc, #56]	; (80069b0 <__multadd+0x90>)
 8006978:	21b5      	movs	r1, #181	; 0xb5
 800697a:	f000 fd13 	bl	80073a4 <__assert_func>
 800697e:	6922      	ldr	r2, [r4, #16]
 8006980:	3202      	adds	r2, #2
 8006982:	f104 010c 	add.w	r1, r4, #12
 8006986:	0092      	lsls	r2, r2, #2
 8006988:	300c      	adds	r0, #12
 800698a:	f7ff ff59 	bl	8006840 <memcpy>
 800698e:	4621      	mov	r1, r4
 8006990:	4638      	mov	r0, r7
 8006992:	f7ff ffa3 	bl	80068dc <_Bfree>
 8006996:	462c      	mov	r4, r5
 8006998:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800699c:	3601      	adds	r6, #1
 800699e:	f8c3 8014 	str.w	r8, [r3, #20]
 80069a2:	6126      	str	r6, [r4, #16]
 80069a4:	4620      	mov	r0, r4
 80069a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069aa:	bf00      	nop
 80069ac:	0800807b 	.word	0x0800807b
 80069b0:	0800808c 	.word	0x0800808c

080069b4 <__hi0bits>:
 80069b4:	0c03      	lsrs	r3, r0, #16
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	b9d3      	cbnz	r3, 80069f0 <__hi0bits+0x3c>
 80069ba:	0400      	lsls	r0, r0, #16
 80069bc:	2310      	movs	r3, #16
 80069be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069c2:	bf04      	itt	eq
 80069c4:	0200      	lsleq	r0, r0, #8
 80069c6:	3308      	addeq	r3, #8
 80069c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069cc:	bf04      	itt	eq
 80069ce:	0100      	lsleq	r0, r0, #4
 80069d0:	3304      	addeq	r3, #4
 80069d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069d6:	bf04      	itt	eq
 80069d8:	0080      	lsleq	r0, r0, #2
 80069da:	3302      	addeq	r3, #2
 80069dc:	2800      	cmp	r0, #0
 80069de:	db05      	blt.n	80069ec <__hi0bits+0x38>
 80069e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069e4:	f103 0301 	add.w	r3, r3, #1
 80069e8:	bf08      	it	eq
 80069ea:	2320      	moveq	r3, #32
 80069ec:	4618      	mov	r0, r3
 80069ee:	4770      	bx	lr
 80069f0:	2300      	movs	r3, #0
 80069f2:	e7e4      	b.n	80069be <__hi0bits+0xa>

080069f4 <__lo0bits>:
 80069f4:	6803      	ldr	r3, [r0, #0]
 80069f6:	f013 0207 	ands.w	r2, r3, #7
 80069fa:	4601      	mov	r1, r0
 80069fc:	d00b      	beq.n	8006a16 <__lo0bits+0x22>
 80069fe:	07da      	lsls	r2, r3, #31
 8006a00:	d424      	bmi.n	8006a4c <__lo0bits+0x58>
 8006a02:	0798      	lsls	r0, r3, #30
 8006a04:	bf49      	itett	mi
 8006a06:	085b      	lsrmi	r3, r3, #1
 8006a08:	089b      	lsrpl	r3, r3, #2
 8006a0a:	2001      	movmi	r0, #1
 8006a0c:	600b      	strmi	r3, [r1, #0]
 8006a0e:	bf5c      	itt	pl
 8006a10:	600b      	strpl	r3, [r1, #0]
 8006a12:	2002      	movpl	r0, #2
 8006a14:	4770      	bx	lr
 8006a16:	b298      	uxth	r0, r3
 8006a18:	b9b0      	cbnz	r0, 8006a48 <__lo0bits+0x54>
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	2010      	movs	r0, #16
 8006a1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a22:	bf04      	itt	eq
 8006a24:	0a1b      	lsreq	r3, r3, #8
 8006a26:	3008      	addeq	r0, #8
 8006a28:	071a      	lsls	r2, r3, #28
 8006a2a:	bf04      	itt	eq
 8006a2c:	091b      	lsreq	r3, r3, #4
 8006a2e:	3004      	addeq	r0, #4
 8006a30:	079a      	lsls	r2, r3, #30
 8006a32:	bf04      	itt	eq
 8006a34:	089b      	lsreq	r3, r3, #2
 8006a36:	3002      	addeq	r0, #2
 8006a38:	07da      	lsls	r2, r3, #31
 8006a3a:	d403      	bmi.n	8006a44 <__lo0bits+0x50>
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	f100 0001 	add.w	r0, r0, #1
 8006a42:	d005      	beq.n	8006a50 <__lo0bits+0x5c>
 8006a44:	600b      	str	r3, [r1, #0]
 8006a46:	4770      	bx	lr
 8006a48:	4610      	mov	r0, r2
 8006a4a:	e7e8      	b.n	8006a1e <__lo0bits+0x2a>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	4770      	bx	lr
 8006a50:	2020      	movs	r0, #32
 8006a52:	4770      	bx	lr

08006a54 <__i2b>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	460c      	mov	r4, r1
 8006a58:	2101      	movs	r1, #1
 8006a5a:	f7ff feff 	bl	800685c <_Balloc>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	b928      	cbnz	r0, 8006a6e <__i2b+0x1a>
 8006a62:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <__i2b+0x24>)
 8006a64:	4805      	ldr	r0, [pc, #20]	; (8006a7c <__i2b+0x28>)
 8006a66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a6a:	f000 fc9b 	bl	80073a4 <__assert_func>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	6144      	str	r4, [r0, #20]
 8006a72:	6103      	str	r3, [r0, #16]
 8006a74:	bd10      	pop	{r4, pc}
 8006a76:	bf00      	nop
 8006a78:	0800807b 	.word	0x0800807b
 8006a7c:	0800808c 	.word	0x0800808c

08006a80 <__multiply>:
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	4614      	mov	r4, r2
 8006a86:	690a      	ldr	r2, [r1, #16]
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bfb8      	it	lt
 8006a8e:	460b      	movlt	r3, r1
 8006a90:	460d      	mov	r5, r1
 8006a92:	bfbc      	itt	lt
 8006a94:	4625      	movlt	r5, r4
 8006a96:	461c      	movlt	r4, r3
 8006a98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006a9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006aa0:	68ab      	ldr	r3, [r5, #8]
 8006aa2:	6869      	ldr	r1, [r5, #4]
 8006aa4:	eb0a 0709 	add.w	r7, sl, r9
 8006aa8:	42bb      	cmp	r3, r7
 8006aaa:	b085      	sub	sp, #20
 8006aac:	bfb8      	it	lt
 8006aae:	3101      	addlt	r1, #1
 8006ab0:	f7ff fed4 	bl	800685c <_Balloc>
 8006ab4:	b930      	cbnz	r0, 8006ac4 <__multiply+0x44>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <__multiply+0x144>)
 8006aba:	4843      	ldr	r0, [pc, #268]	; (8006bc8 <__multiply+0x148>)
 8006abc:	f240 115d 	movw	r1, #349	; 0x15d
 8006ac0:	f000 fc70 	bl	80073a4 <__assert_func>
 8006ac4:	f100 0614 	add.w	r6, r0, #20
 8006ac8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006acc:	4633      	mov	r3, r6
 8006ace:	2200      	movs	r2, #0
 8006ad0:	4543      	cmp	r3, r8
 8006ad2:	d31e      	bcc.n	8006b12 <__multiply+0x92>
 8006ad4:	f105 0c14 	add.w	ip, r5, #20
 8006ad8:	f104 0314 	add.w	r3, r4, #20
 8006adc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ae0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006ae4:	9202      	str	r2, [sp, #8]
 8006ae6:	ebac 0205 	sub.w	r2, ip, r5
 8006aea:	3a15      	subs	r2, #21
 8006aec:	f022 0203 	bic.w	r2, r2, #3
 8006af0:	3204      	adds	r2, #4
 8006af2:	f105 0115 	add.w	r1, r5, #21
 8006af6:	458c      	cmp	ip, r1
 8006af8:	bf38      	it	cc
 8006afa:	2204      	movcc	r2, #4
 8006afc:	9201      	str	r2, [sp, #4]
 8006afe:	9a02      	ldr	r2, [sp, #8]
 8006b00:	9303      	str	r3, [sp, #12]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d808      	bhi.n	8006b18 <__multiply+0x98>
 8006b06:	2f00      	cmp	r7, #0
 8006b08:	dc55      	bgt.n	8006bb6 <__multiply+0x136>
 8006b0a:	6107      	str	r7, [r0, #16]
 8006b0c:	b005      	add	sp, #20
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	f843 2b04 	str.w	r2, [r3], #4
 8006b16:	e7db      	b.n	8006ad0 <__multiply+0x50>
 8006b18:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b1c:	f1ba 0f00 	cmp.w	sl, #0
 8006b20:	d020      	beq.n	8006b64 <__multiply+0xe4>
 8006b22:	f105 0e14 	add.w	lr, r5, #20
 8006b26:	46b1      	mov	r9, r6
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b2e:	f8d9 b000 	ldr.w	fp, [r9]
 8006b32:	b2a1      	uxth	r1, r4
 8006b34:	fa1f fb8b 	uxth.w	fp, fp
 8006b38:	fb0a b101 	mla	r1, sl, r1, fp
 8006b3c:	4411      	add	r1, r2
 8006b3e:	f8d9 2000 	ldr.w	r2, [r9]
 8006b42:	0c24      	lsrs	r4, r4, #16
 8006b44:	0c12      	lsrs	r2, r2, #16
 8006b46:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b4e:	b289      	uxth	r1, r1
 8006b50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b54:	45f4      	cmp	ip, lr
 8006b56:	f849 1b04 	str.w	r1, [r9], #4
 8006b5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b5e:	d8e4      	bhi.n	8006b2a <__multiply+0xaa>
 8006b60:	9901      	ldr	r1, [sp, #4]
 8006b62:	5072      	str	r2, [r6, r1]
 8006b64:	9a03      	ldr	r2, [sp, #12]
 8006b66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	f1b9 0f00 	cmp.w	r9, #0
 8006b70:	d01f      	beq.n	8006bb2 <__multiply+0x132>
 8006b72:	6834      	ldr	r4, [r6, #0]
 8006b74:	f105 0114 	add.w	r1, r5, #20
 8006b78:	46b6      	mov	lr, r6
 8006b7a:	f04f 0a00 	mov.w	sl, #0
 8006b7e:	880a      	ldrh	r2, [r1, #0]
 8006b80:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b84:	fb09 b202 	mla	r2, r9, r2, fp
 8006b88:	4492      	add	sl, r2
 8006b8a:	b2a4      	uxth	r4, r4
 8006b8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006b90:	f84e 4b04 	str.w	r4, [lr], #4
 8006b94:	f851 4b04 	ldr.w	r4, [r1], #4
 8006b98:	f8be 2000 	ldrh.w	r2, [lr]
 8006b9c:	0c24      	lsrs	r4, r4, #16
 8006b9e:	fb09 2404 	mla	r4, r9, r4, r2
 8006ba2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006ba6:	458c      	cmp	ip, r1
 8006ba8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bac:	d8e7      	bhi.n	8006b7e <__multiply+0xfe>
 8006bae:	9a01      	ldr	r2, [sp, #4]
 8006bb0:	50b4      	str	r4, [r6, r2]
 8006bb2:	3604      	adds	r6, #4
 8006bb4:	e7a3      	b.n	8006afe <__multiply+0x7e>
 8006bb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1a5      	bne.n	8006b0a <__multiply+0x8a>
 8006bbe:	3f01      	subs	r7, #1
 8006bc0:	e7a1      	b.n	8006b06 <__multiply+0x86>
 8006bc2:	bf00      	nop
 8006bc4:	0800807b 	.word	0x0800807b
 8006bc8:	0800808c 	.word	0x0800808c

08006bcc <__pow5mult>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	f012 0203 	ands.w	r2, r2, #3
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460f      	mov	r7, r1
 8006bda:	d007      	beq.n	8006bec <__pow5mult+0x20>
 8006bdc:	4c25      	ldr	r4, [pc, #148]	; (8006c74 <__pow5mult+0xa8>)
 8006bde:	3a01      	subs	r2, #1
 8006be0:	2300      	movs	r3, #0
 8006be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006be6:	f7ff fe9b 	bl	8006920 <__multadd>
 8006bea:	4607      	mov	r7, r0
 8006bec:	10ad      	asrs	r5, r5, #2
 8006bee:	d03d      	beq.n	8006c6c <__pow5mult+0xa0>
 8006bf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006bf2:	b97c      	cbnz	r4, 8006c14 <__pow5mult+0x48>
 8006bf4:	2010      	movs	r0, #16
 8006bf6:	f7ff fe1b 	bl	8006830 <malloc>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	6270      	str	r0, [r6, #36]	; 0x24
 8006bfe:	b928      	cbnz	r0, 8006c0c <__pow5mult+0x40>
 8006c00:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <__pow5mult+0xac>)
 8006c02:	481e      	ldr	r0, [pc, #120]	; (8006c7c <__pow5mult+0xb0>)
 8006c04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c08:	f000 fbcc 	bl	80073a4 <__assert_func>
 8006c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c10:	6004      	str	r4, [r0, #0]
 8006c12:	60c4      	str	r4, [r0, #12]
 8006c14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c1c:	b94c      	cbnz	r4, 8006c32 <__pow5mult+0x66>
 8006c1e:	f240 2171 	movw	r1, #625	; 0x271
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7ff ff16 	bl	8006a54 <__i2b>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c2e:	4604      	mov	r4, r0
 8006c30:	6003      	str	r3, [r0, #0]
 8006c32:	f04f 0900 	mov.w	r9, #0
 8006c36:	07eb      	lsls	r3, r5, #31
 8006c38:	d50a      	bpl.n	8006c50 <__pow5mult+0x84>
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff ff1e 	bl	8006a80 <__multiply>
 8006c44:	4639      	mov	r1, r7
 8006c46:	4680      	mov	r8, r0
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f7ff fe47 	bl	80068dc <_Bfree>
 8006c4e:	4647      	mov	r7, r8
 8006c50:	106d      	asrs	r5, r5, #1
 8006c52:	d00b      	beq.n	8006c6c <__pow5mult+0xa0>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	b938      	cbnz	r0, 8006c68 <__pow5mult+0x9c>
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff ff0f 	bl	8006a80 <__multiply>
 8006c62:	6020      	str	r0, [r4, #0]
 8006c64:	f8c0 9000 	str.w	r9, [r0]
 8006c68:	4604      	mov	r4, r0
 8006c6a:	e7e4      	b.n	8006c36 <__pow5mult+0x6a>
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c72:	bf00      	nop
 8006c74:	080081e0 	.word	0x080081e0
 8006c78:	08008005 	.word	0x08008005
 8006c7c:	0800808c 	.word	0x0800808c

08006c80 <__lshift>:
 8006c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	460c      	mov	r4, r1
 8006c86:	6849      	ldr	r1, [r1, #4]
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	4607      	mov	r7, r0
 8006c92:	4691      	mov	r9, r2
 8006c94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c98:	f108 0601 	add.w	r6, r8, #1
 8006c9c:	42b3      	cmp	r3, r6
 8006c9e:	db0b      	blt.n	8006cb8 <__lshift+0x38>
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff fddb 	bl	800685c <_Balloc>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b948      	cbnz	r0, 8006cbe <__lshift+0x3e>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b28      	ldr	r3, [pc, #160]	; (8006d50 <__lshift+0xd0>)
 8006cae:	4829      	ldr	r0, [pc, #164]	; (8006d54 <__lshift+0xd4>)
 8006cb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cb4:	f000 fb76 	bl	80073a4 <__assert_func>
 8006cb8:	3101      	adds	r1, #1
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	e7ee      	b.n	8006c9c <__lshift+0x1c>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f100 0114 	add.w	r1, r0, #20
 8006cc4:	f100 0210 	add.w	r2, r0, #16
 8006cc8:	4618      	mov	r0, r3
 8006cca:	4553      	cmp	r3, sl
 8006ccc:	db33      	blt.n	8006d36 <__lshift+0xb6>
 8006cce:	6920      	ldr	r0, [r4, #16]
 8006cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cd4:	f104 0314 	add.w	r3, r4, #20
 8006cd8:	f019 091f 	ands.w	r9, r9, #31
 8006cdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ce0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ce4:	d02b      	beq.n	8006d3e <__lshift+0xbe>
 8006ce6:	f1c9 0e20 	rsb	lr, r9, #32
 8006cea:	468a      	mov	sl, r1
 8006cec:	2200      	movs	r2, #0
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	fa00 f009 	lsl.w	r0, r0, r9
 8006cf4:	4302      	orrs	r2, r0
 8006cf6:	f84a 2b04 	str.w	r2, [sl], #4
 8006cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfe:	459c      	cmp	ip, r3
 8006d00:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d04:	d8f3      	bhi.n	8006cee <__lshift+0x6e>
 8006d06:	ebac 0304 	sub.w	r3, ip, r4
 8006d0a:	3b15      	subs	r3, #21
 8006d0c:	f023 0303 	bic.w	r3, r3, #3
 8006d10:	3304      	adds	r3, #4
 8006d12:	f104 0015 	add.w	r0, r4, #21
 8006d16:	4584      	cmp	ip, r0
 8006d18:	bf38      	it	cc
 8006d1a:	2304      	movcc	r3, #4
 8006d1c:	50ca      	str	r2, [r1, r3]
 8006d1e:	b10a      	cbz	r2, 8006d24 <__lshift+0xa4>
 8006d20:	f108 0602 	add.w	r6, r8, #2
 8006d24:	3e01      	subs	r6, #1
 8006d26:	4638      	mov	r0, r7
 8006d28:	612e      	str	r6, [r5, #16]
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	f7ff fdd6 	bl	80068dc <_Bfree>
 8006d30:	4628      	mov	r0, r5
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	e7c5      	b.n	8006cca <__lshift+0x4a>
 8006d3e:	3904      	subs	r1, #4
 8006d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d44:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d48:	459c      	cmp	ip, r3
 8006d4a:	d8f9      	bhi.n	8006d40 <__lshift+0xc0>
 8006d4c:	e7ea      	b.n	8006d24 <__lshift+0xa4>
 8006d4e:	bf00      	nop
 8006d50:	0800807b 	.word	0x0800807b
 8006d54:	0800808c 	.word	0x0800808c

08006d58 <__mcmp>:
 8006d58:	b530      	push	{r4, r5, lr}
 8006d5a:	6902      	ldr	r2, [r0, #16]
 8006d5c:	690c      	ldr	r4, [r1, #16]
 8006d5e:	1b12      	subs	r2, r2, r4
 8006d60:	d10e      	bne.n	8006d80 <__mcmp+0x28>
 8006d62:	f100 0314 	add.w	r3, r0, #20
 8006d66:	3114      	adds	r1, #20
 8006d68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d78:	42a5      	cmp	r5, r4
 8006d7a:	d003      	beq.n	8006d84 <__mcmp+0x2c>
 8006d7c:	d305      	bcc.n	8006d8a <__mcmp+0x32>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4610      	mov	r0, r2
 8006d82:	bd30      	pop	{r4, r5, pc}
 8006d84:	4283      	cmp	r3, r0
 8006d86:	d3f3      	bcc.n	8006d70 <__mcmp+0x18>
 8006d88:	e7fa      	b.n	8006d80 <__mcmp+0x28>
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d8e:	e7f7      	b.n	8006d80 <__mcmp+0x28>

08006d90 <__mdiff>:
 8006d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	4606      	mov	r6, r0
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4617      	mov	r7, r2
 8006d9e:	f7ff ffdb 	bl	8006d58 <__mcmp>
 8006da2:	1e05      	subs	r5, r0, #0
 8006da4:	d110      	bne.n	8006dc8 <__mdiff+0x38>
 8006da6:	4629      	mov	r1, r5
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff fd57 	bl	800685c <_Balloc>
 8006dae:	b930      	cbnz	r0, 8006dbe <__mdiff+0x2e>
 8006db0:	4b39      	ldr	r3, [pc, #228]	; (8006e98 <__mdiff+0x108>)
 8006db2:	4602      	mov	r2, r0
 8006db4:	f240 2132 	movw	r1, #562	; 0x232
 8006db8:	4838      	ldr	r0, [pc, #224]	; (8006e9c <__mdiff+0x10c>)
 8006dba:	f000 faf3 	bl	80073a4 <__assert_func>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc8:	bfa4      	itt	ge
 8006dca:	463b      	movge	r3, r7
 8006dcc:	4627      	movge	r7, r4
 8006dce:	4630      	mov	r0, r6
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	bfa6      	itte	ge
 8006dd4:	461c      	movge	r4, r3
 8006dd6:	2500      	movge	r5, #0
 8006dd8:	2501      	movlt	r5, #1
 8006dda:	f7ff fd3f 	bl	800685c <_Balloc>
 8006dde:	b920      	cbnz	r0, 8006dea <__mdiff+0x5a>
 8006de0:	4b2d      	ldr	r3, [pc, #180]	; (8006e98 <__mdiff+0x108>)
 8006de2:	4602      	mov	r2, r0
 8006de4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006de8:	e7e6      	b.n	8006db8 <__mdiff+0x28>
 8006dea:	693e      	ldr	r6, [r7, #16]
 8006dec:	60c5      	str	r5, [r0, #12]
 8006dee:	6925      	ldr	r5, [r4, #16]
 8006df0:	f107 0114 	add.w	r1, r7, #20
 8006df4:	f104 0914 	add.w	r9, r4, #20
 8006df8:	f100 0e14 	add.w	lr, r0, #20
 8006dfc:	f107 0210 	add.w	r2, r7, #16
 8006e00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006e04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006e08:	46f2      	mov	sl, lr
 8006e0a:	2700      	movs	r7, #0
 8006e0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e14:	fa1f f883 	uxth.w	r8, r3
 8006e18:	fa17 f78b 	uxtah	r7, r7, fp
 8006e1c:	0c1b      	lsrs	r3, r3, #16
 8006e1e:	eba7 0808 	sub.w	r8, r7, r8
 8006e22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e2a:	fa1f f888 	uxth.w	r8, r8
 8006e2e:	141f      	asrs	r7, r3, #16
 8006e30:	454d      	cmp	r5, r9
 8006e32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e36:	f84a 3b04 	str.w	r3, [sl], #4
 8006e3a:	d8e7      	bhi.n	8006e0c <__mdiff+0x7c>
 8006e3c:	1b2b      	subs	r3, r5, r4
 8006e3e:	3b15      	subs	r3, #21
 8006e40:	f023 0303 	bic.w	r3, r3, #3
 8006e44:	3304      	adds	r3, #4
 8006e46:	3415      	adds	r4, #21
 8006e48:	42a5      	cmp	r5, r4
 8006e4a:	bf38      	it	cc
 8006e4c:	2304      	movcc	r3, #4
 8006e4e:	4419      	add	r1, r3
 8006e50:	4473      	add	r3, lr
 8006e52:	469e      	mov	lr, r3
 8006e54:	460d      	mov	r5, r1
 8006e56:	4565      	cmp	r5, ip
 8006e58:	d30e      	bcc.n	8006e78 <__mdiff+0xe8>
 8006e5a:	f10c 0203 	add.w	r2, ip, #3
 8006e5e:	1a52      	subs	r2, r2, r1
 8006e60:	f022 0203 	bic.w	r2, r2, #3
 8006e64:	3903      	subs	r1, #3
 8006e66:	458c      	cmp	ip, r1
 8006e68:	bf38      	it	cc
 8006e6a:	2200      	movcc	r2, #0
 8006e6c:	441a      	add	r2, r3
 8006e6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006e72:	b17b      	cbz	r3, 8006e94 <__mdiff+0x104>
 8006e74:	6106      	str	r6, [r0, #16]
 8006e76:	e7a5      	b.n	8006dc4 <__mdiff+0x34>
 8006e78:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e7c:	fa17 f488 	uxtah	r4, r7, r8
 8006e80:	1422      	asrs	r2, r4, #16
 8006e82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006e86:	b2a4      	uxth	r4, r4
 8006e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006e8c:	f84e 4b04 	str.w	r4, [lr], #4
 8006e90:	1417      	asrs	r7, r2, #16
 8006e92:	e7e0      	b.n	8006e56 <__mdiff+0xc6>
 8006e94:	3e01      	subs	r6, #1
 8006e96:	e7ea      	b.n	8006e6e <__mdiff+0xde>
 8006e98:	0800807b 	.word	0x0800807b
 8006e9c:	0800808c 	.word	0x0800808c

08006ea0 <__d2b>:
 8006ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	ec57 6b10 	vmov	r6, r7, d0
 8006eac:	4690      	mov	r8, r2
 8006eae:	f7ff fcd5 	bl	800685c <_Balloc>
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	b930      	cbnz	r0, 8006ec4 <__d2b+0x24>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <__d2b+0xb0>)
 8006eba:	4826      	ldr	r0, [pc, #152]	; (8006f54 <__d2b+0xb4>)
 8006ebc:	f240 310a 	movw	r1, #778	; 0x30a
 8006ec0:	f000 fa70 	bl	80073a4 <__assert_func>
 8006ec4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ecc:	bb35      	cbnz	r5, 8006f1c <__d2b+0x7c>
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	d028      	beq.n	8006f26 <__d2b+0x86>
 8006ed4:	4668      	mov	r0, sp
 8006ed6:	9600      	str	r6, [sp, #0]
 8006ed8:	f7ff fd8c 	bl	80069f4 <__lo0bits>
 8006edc:	9900      	ldr	r1, [sp, #0]
 8006ede:	b300      	cbz	r0, 8006f22 <__d2b+0x82>
 8006ee0:	9a01      	ldr	r2, [sp, #4]
 8006ee2:	f1c0 0320 	rsb	r3, r0, #32
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	430b      	orrs	r3, r1
 8006eec:	40c2      	lsrs	r2, r0
 8006eee:	6163      	str	r3, [r4, #20]
 8006ef0:	9201      	str	r2, [sp, #4]
 8006ef2:	9b01      	ldr	r3, [sp, #4]
 8006ef4:	61a3      	str	r3, [r4, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	2202      	movne	r2, #2
 8006efc:	2201      	moveq	r2, #1
 8006efe:	6122      	str	r2, [r4, #16]
 8006f00:	b1d5      	cbz	r5, 8006f38 <__d2b+0x98>
 8006f02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f06:	4405      	add	r5, r0
 8006f08:	f8c9 5000 	str.w	r5, [r9]
 8006f0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f10:	f8c8 0000 	str.w	r0, [r8]
 8006f14:	4620      	mov	r0, r4
 8006f16:	b003      	add	sp, #12
 8006f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f20:	e7d5      	b.n	8006ece <__d2b+0x2e>
 8006f22:	6161      	str	r1, [r4, #20]
 8006f24:	e7e5      	b.n	8006ef2 <__d2b+0x52>
 8006f26:	a801      	add	r0, sp, #4
 8006f28:	f7ff fd64 	bl	80069f4 <__lo0bits>
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	2201      	movs	r2, #1
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	3020      	adds	r0, #32
 8006f36:	e7e3      	b.n	8006f00 <__d2b+0x60>
 8006f38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f40:	f8c9 0000 	str.w	r0, [r9]
 8006f44:	6918      	ldr	r0, [r3, #16]
 8006f46:	f7ff fd35 	bl	80069b4 <__hi0bits>
 8006f4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f4e:	e7df      	b.n	8006f10 <__d2b+0x70>
 8006f50:	0800807b 	.word	0x0800807b
 8006f54:	0800808c 	.word	0x0800808c

08006f58 <_calloc_r>:
 8006f58:	b513      	push	{r0, r1, r4, lr}
 8006f5a:	434a      	muls	r2, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	9201      	str	r2, [sp, #4]
 8006f60:	f000 f85a 	bl	8007018 <_malloc_r>
 8006f64:	4604      	mov	r4, r0
 8006f66:	b118      	cbz	r0, 8006f70 <_calloc_r+0x18>
 8006f68:	9a01      	ldr	r2, [sp, #4]
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	f7fe f950 	bl	8005210 <memset>
 8006f70:	4620      	mov	r0, r4
 8006f72:	b002      	add	sp, #8
 8006f74:	bd10      	pop	{r4, pc}
	...

08006f78 <_free_r>:
 8006f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f7a:	2900      	cmp	r1, #0
 8006f7c:	d048      	beq.n	8007010 <_free_r+0x98>
 8006f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f82:	9001      	str	r0, [sp, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f1a1 0404 	sub.w	r4, r1, #4
 8006f8a:	bfb8      	it	lt
 8006f8c:	18e4      	addlt	r4, r4, r3
 8006f8e:	f000 fa65 	bl	800745c <__malloc_lock>
 8006f92:	4a20      	ldr	r2, [pc, #128]	; (8007014 <_free_r+0x9c>)
 8006f94:	9801      	ldr	r0, [sp, #4]
 8006f96:	6813      	ldr	r3, [r2, #0]
 8006f98:	4615      	mov	r5, r2
 8006f9a:	b933      	cbnz	r3, 8006faa <_free_r+0x32>
 8006f9c:	6063      	str	r3, [r4, #4]
 8006f9e:	6014      	str	r4, [r2, #0]
 8006fa0:	b003      	add	sp, #12
 8006fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fa6:	f000 ba5f 	b.w	8007468 <__malloc_unlock>
 8006faa:	42a3      	cmp	r3, r4
 8006fac:	d90b      	bls.n	8006fc6 <_free_r+0x4e>
 8006fae:	6821      	ldr	r1, [r4, #0]
 8006fb0:	1862      	adds	r2, r4, r1
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	bf04      	itt	eq
 8006fb6:	681a      	ldreq	r2, [r3, #0]
 8006fb8:	685b      	ldreq	r3, [r3, #4]
 8006fba:	6063      	str	r3, [r4, #4]
 8006fbc:	bf04      	itt	eq
 8006fbe:	1852      	addeq	r2, r2, r1
 8006fc0:	6022      	streq	r2, [r4, #0]
 8006fc2:	602c      	str	r4, [r5, #0]
 8006fc4:	e7ec      	b.n	8006fa0 <_free_r+0x28>
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b10b      	cbz	r3, 8006fd0 <_free_r+0x58>
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d9fa      	bls.n	8006fc6 <_free_r+0x4e>
 8006fd0:	6811      	ldr	r1, [r2, #0]
 8006fd2:	1855      	adds	r5, r2, r1
 8006fd4:	42a5      	cmp	r5, r4
 8006fd6:	d10b      	bne.n	8006ff0 <_free_r+0x78>
 8006fd8:	6824      	ldr	r4, [r4, #0]
 8006fda:	4421      	add	r1, r4
 8006fdc:	1854      	adds	r4, r2, r1
 8006fde:	42a3      	cmp	r3, r4
 8006fe0:	6011      	str	r1, [r2, #0]
 8006fe2:	d1dd      	bne.n	8006fa0 <_free_r+0x28>
 8006fe4:	681c      	ldr	r4, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	6053      	str	r3, [r2, #4]
 8006fea:	4421      	add	r1, r4
 8006fec:	6011      	str	r1, [r2, #0]
 8006fee:	e7d7      	b.n	8006fa0 <_free_r+0x28>
 8006ff0:	d902      	bls.n	8006ff8 <_free_r+0x80>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	6003      	str	r3, [r0, #0]
 8006ff6:	e7d3      	b.n	8006fa0 <_free_r+0x28>
 8006ff8:	6825      	ldr	r5, [r4, #0]
 8006ffa:	1961      	adds	r1, r4, r5
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	bf04      	itt	eq
 8007000:	6819      	ldreq	r1, [r3, #0]
 8007002:	685b      	ldreq	r3, [r3, #4]
 8007004:	6063      	str	r3, [r4, #4]
 8007006:	bf04      	itt	eq
 8007008:	1949      	addeq	r1, r1, r5
 800700a:	6021      	streq	r1, [r4, #0]
 800700c:	6054      	str	r4, [r2, #4]
 800700e:	e7c7      	b.n	8006fa0 <_free_r+0x28>
 8007010:	b003      	add	sp, #12
 8007012:	bd30      	pop	{r4, r5, pc}
 8007014:	200001fc 	.word	0x200001fc

08007018 <_malloc_r>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	1ccd      	adds	r5, r1, #3
 800701c:	f025 0503 	bic.w	r5, r5, #3
 8007020:	3508      	adds	r5, #8
 8007022:	2d0c      	cmp	r5, #12
 8007024:	bf38      	it	cc
 8007026:	250c      	movcc	r5, #12
 8007028:	2d00      	cmp	r5, #0
 800702a:	4606      	mov	r6, r0
 800702c:	db01      	blt.n	8007032 <_malloc_r+0x1a>
 800702e:	42a9      	cmp	r1, r5
 8007030:	d903      	bls.n	800703a <_malloc_r+0x22>
 8007032:	230c      	movs	r3, #12
 8007034:	6033      	str	r3, [r6, #0]
 8007036:	2000      	movs	r0, #0
 8007038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703a:	f000 fa0f 	bl	800745c <__malloc_lock>
 800703e:	4921      	ldr	r1, [pc, #132]	; (80070c4 <_malloc_r+0xac>)
 8007040:	680a      	ldr	r2, [r1, #0]
 8007042:	4614      	mov	r4, r2
 8007044:	b99c      	cbnz	r4, 800706e <_malloc_r+0x56>
 8007046:	4f20      	ldr	r7, [pc, #128]	; (80070c8 <_malloc_r+0xb0>)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	b923      	cbnz	r3, 8007056 <_malloc_r+0x3e>
 800704c:	4621      	mov	r1, r4
 800704e:	4630      	mov	r0, r6
 8007050:	f000 f998 	bl	8007384 <_sbrk_r>
 8007054:	6038      	str	r0, [r7, #0]
 8007056:	4629      	mov	r1, r5
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f993 	bl	8007384 <_sbrk_r>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	d123      	bne.n	80070aa <_malloc_r+0x92>
 8007062:	230c      	movs	r3, #12
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	4630      	mov	r0, r6
 8007068:	f000 f9fe 	bl	8007468 <__malloc_unlock>
 800706c:	e7e3      	b.n	8007036 <_malloc_r+0x1e>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	1b5b      	subs	r3, r3, r5
 8007072:	d417      	bmi.n	80070a4 <_malloc_r+0x8c>
 8007074:	2b0b      	cmp	r3, #11
 8007076:	d903      	bls.n	8007080 <_malloc_r+0x68>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	441c      	add	r4, r3
 800707c:	6025      	str	r5, [r4, #0]
 800707e:	e004      	b.n	800708a <_malloc_r+0x72>
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	42a2      	cmp	r2, r4
 8007084:	bf0c      	ite	eq
 8007086:	600b      	streq	r3, [r1, #0]
 8007088:	6053      	strne	r3, [r2, #4]
 800708a:	4630      	mov	r0, r6
 800708c:	f000 f9ec 	bl	8007468 <__malloc_unlock>
 8007090:	f104 000b 	add.w	r0, r4, #11
 8007094:	1d23      	adds	r3, r4, #4
 8007096:	f020 0007 	bic.w	r0, r0, #7
 800709a:	1ac2      	subs	r2, r0, r3
 800709c:	d0cc      	beq.n	8007038 <_malloc_r+0x20>
 800709e:	1a1b      	subs	r3, r3, r0
 80070a0:	50a3      	str	r3, [r4, r2]
 80070a2:	e7c9      	b.n	8007038 <_malloc_r+0x20>
 80070a4:	4622      	mov	r2, r4
 80070a6:	6864      	ldr	r4, [r4, #4]
 80070a8:	e7cc      	b.n	8007044 <_malloc_r+0x2c>
 80070aa:	1cc4      	adds	r4, r0, #3
 80070ac:	f024 0403 	bic.w	r4, r4, #3
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d0e3      	beq.n	800707c <_malloc_r+0x64>
 80070b4:	1a21      	subs	r1, r4, r0
 80070b6:	4630      	mov	r0, r6
 80070b8:	f000 f964 	bl	8007384 <_sbrk_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d1dd      	bne.n	800707c <_malloc_r+0x64>
 80070c0:	e7cf      	b.n	8007062 <_malloc_r+0x4a>
 80070c2:	bf00      	nop
 80070c4:	200001fc 	.word	0x200001fc
 80070c8:	20000200 	.word	0x20000200

080070cc <__ssputs_r>:
 80070cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	688e      	ldr	r6, [r1, #8]
 80070d2:	429e      	cmp	r6, r3
 80070d4:	4682      	mov	sl, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	4690      	mov	r8, r2
 80070da:	461f      	mov	r7, r3
 80070dc:	d838      	bhi.n	8007150 <__ssputs_r+0x84>
 80070de:	898a      	ldrh	r2, [r1, #12]
 80070e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070e4:	d032      	beq.n	800714c <__ssputs_r+0x80>
 80070e6:	6825      	ldr	r5, [r4, #0]
 80070e8:	6909      	ldr	r1, [r1, #16]
 80070ea:	eba5 0901 	sub.w	r9, r5, r1
 80070ee:	6965      	ldr	r5, [r4, #20]
 80070f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070f8:	3301      	adds	r3, #1
 80070fa:	444b      	add	r3, r9
 80070fc:	106d      	asrs	r5, r5, #1
 80070fe:	429d      	cmp	r5, r3
 8007100:	bf38      	it	cc
 8007102:	461d      	movcc	r5, r3
 8007104:	0553      	lsls	r3, r2, #21
 8007106:	d531      	bpl.n	800716c <__ssputs_r+0xa0>
 8007108:	4629      	mov	r1, r5
 800710a:	f7ff ff85 	bl	8007018 <_malloc_r>
 800710e:	4606      	mov	r6, r0
 8007110:	b950      	cbnz	r0, 8007128 <__ssputs_r+0x5c>
 8007112:	230c      	movs	r3, #12
 8007114:	f8ca 3000 	str.w	r3, [sl]
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007128:	6921      	ldr	r1, [r4, #16]
 800712a:	464a      	mov	r2, r9
 800712c:	f7ff fb88 	bl	8006840 <memcpy>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	6126      	str	r6, [r4, #16]
 800713e:	6165      	str	r5, [r4, #20]
 8007140:	444e      	add	r6, r9
 8007142:	eba5 0509 	sub.w	r5, r5, r9
 8007146:	6026      	str	r6, [r4, #0]
 8007148:	60a5      	str	r5, [r4, #8]
 800714a:	463e      	mov	r6, r7
 800714c:	42be      	cmp	r6, r7
 800714e:	d900      	bls.n	8007152 <__ssputs_r+0x86>
 8007150:	463e      	mov	r6, r7
 8007152:	4632      	mov	r2, r6
 8007154:	6820      	ldr	r0, [r4, #0]
 8007156:	4641      	mov	r1, r8
 8007158:	f000 f966 	bl	8007428 <memmove>
 800715c:	68a3      	ldr	r3, [r4, #8]
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	1b9b      	subs	r3, r3, r6
 8007162:	4432      	add	r2, r6
 8007164:	60a3      	str	r3, [r4, #8]
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	2000      	movs	r0, #0
 800716a:	e7db      	b.n	8007124 <__ssputs_r+0x58>
 800716c:	462a      	mov	r2, r5
 800716e:	f000 f981 	bl	8007474 <_realloc_r>
 8007172:	4606      	mov	r6, r0
 8007174:	2800      	cmp	r0, #0
 8007176:	d1e1      	bne.n	800713c <__ssputs_r+0x70>
 8007178:	6921      	ldr	r1, [r4, #16]
 800717a:	4650      	mov	r0, sl
 800717c:	f7ff fefc 	bl	8006f78 <_free_r>
 8007180:	e7c7      	b.n	8007112 <__ssputs_r+0x46>
	...

08007184 <_svfiprintf_r>:
 8007184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	4698      	mov	r8, r3
 800718a:	898b      	ldrh	r3, [r1, #12]
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	b09d      	sub	sp, #116	; 0x74
 8007190:	4607      	mov	r7, r0
 8007192:	460d      	mov	r5, r1
 8007194:	4614      	mov	r4, r2
 8007196:	d50e      	bpl.n	80071b6 <_svfiprintf_r+0x32>
 8007198:	690b      	ldr	r3, [r1, #16]
 800719a:	b963      	cbnz	r3, 80071b6 <_svfiprintf_r+0x32>
 800719c:	2140      	movs	r1, #64	; 0x40
 800719e:	f7ff ff3b 	bl	8007018 <_malloc_r>
 80071a2:	6028      	str	r0, [r5, #0]
 80071a4:	6128      	str	r0, [r5, #16]
 80071a6:	b920      	cbnz	r0, 80071b2 <_svfiprintf_r+0x2e>
 80071a8:	230c      	movs	r3, #12
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b0:	e0d1      	b.n	8007356 <_svfiprintf_r+0x1d2>
 80071b2:	2340      	movs	r3, #64	; 0x40
 80071b4:	616b      	str	r3, [r5, #20]
 80071b6:	2300      	movs	r3, #0
 80071b8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ba:	2320      	movs	r3, #32
 80071bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071c4:	2330      	movs	r3, #48	; 0x30
 80071c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007370 <_svfiprintf_r+0x1ec>
 80071ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071ce:	f04f 0901 	mov.w	r9, #1
 80071d2:	4623      	mov	r3, r4
 80071d4:	469a      	mov	sl, r3
 80071d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071da:	b10a      	cbz	r2, 80071e0 <_svfiprintf_r+0x5c>
 80071dc:	2a25      	cmp	r2, #37	; 0x25
 80071de:	d1f9      	bne.n	80071d4 <_svfiprintf_r+0x50>
 80071e0:	ebba 0b04 	subs.w	fp, sl, r4
 80071e4:	d00b      	beq.n	80071fe <_svfiprintf_r+0x7a>
 80071e6:	465b      	mov	r3, fp
 80071e8:	4622      	mov	r2, r4
 80071ea:	4629      	mov	r1, r5
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff ff6d 	bl	80070cc <__ssputs_r>
 80071f2:	3001      	adds	r0, #1
 80071f4:	f000 80aa 	beq.w	800734c <_svfiprintf_r+0x1c8>
 80071f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071fa:	445a      	add	r2, fp
 80071fc:	9209      	str	r2, [sp, #36]	; 0x24
 80071fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80a2 	beq.w	800734c <_svfiprintf_r+0x1c8>
 8007208:	2300      	movs	r3, #0
 800720a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800720e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007212:	f10a 0a01 	add.w	sl, sl, #1
 8007216:	9304      	str	r3, [sp, #16]
 8007218:	9307      	str	r3, [sp, #28]
 800721a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800721e:	931a      	str	r3, [sp, #104]	; 0x68
 8007220:	4654      	mov	r4, sl
 8007222:	2205      	movs	r2, #5
 8007224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007228:	4851      	ldr	r0, [pc, #324]	; (8007370 <_svfiprintf_r+0x1ec>)
 800722a:	f7f9 f801 	bl	8000230 <memchr>
 800722e:	9a04      	ldr	r2, [sp, #16]
 8007230:	b9d8      	cbnz	r0, 800726a <_svfiprintf_r+0xe6>
 8007232:	06d0      	lsls	r0, r2, #27
 8007234:	bf44      	itt	mi
 8007236:	2320      	movmi	r3, #32
 8007238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800723c:	0711      	lsls	r1, r2, #28
 800723e:	bf44      	itt	mi
 8007240:	232b      	movmi	r3, #43	; 0x2b
 8007242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007246:	f89a 3000 	ldrb.w	r3, [sl]
 800724a:	2b2a      	cmp	r3, #42	; 0x2a
 800724c:	d015      	beq.n	800727a <_svfiprintf_r+0xf6>
 800724e:	9a07      	ldr	r2, [sp, #28]
 8007250:	4654      	mov	r4, sl
 8007252:	2000      	movs	r0, #0
 8007254:	f04f 0c0a 	mov.w	ip, #10
 8007258:	4621      	mov	r1, r4
 800725a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800725e:	3b30      	subs	r3, #48	; 0x30
 8007260:	2b09      	cmp	r3, #9
 8007262:	d94e      	bls.n	8007302 <_svfiprintf_r+0x17e>
 8007264:	b1b0      	cbz	r0, 8007294 <_svfiprintf_r+0x110>
 8007266:	9207      	str	r2, [sp, #28]
 8007268:	e014      	b.n	8007294 <_svfiprintf_r+0x110>
 800726a:	eba0 0308 	sub.w	r3, r0, r8
 800726e:	fa09 f303 	lsl.w	r3, r9, r3
 8007272:	4313      	orrs	r3, r2
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	46a2      	mov	sl, r4
 8007278:	e7d2      	b.n	8007220 <_svfiprintf_r+0x9c>
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	1d19      	adds	r1, r3, #4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	9103      	str	r1, [sp, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	bfbb      	ittet	lt
 8007286:	425b      	neglt	r3, r3
 8007288:	f042 0202 	orrlt.w	r2, r2, #2
 800728c:	9307      	strge	r3, [sp, #28]
 800728e:	9307      	strlt	r3, [sp, #28]
 8007290:	bfb8      	it	lt
 8007292:	9204      	strlt	r2, [sp, #16]
 8007294:	7823      	ldrb	r3, [r4, #0]
 8007296:	2b2e      	cmp	r3, #46	; 0x2e
 8007298:	d10c      	bne.n	80072b4 <_svfiprintf_r+0x130>
 800729a:	7863      	ldrb	r3, [r4, #1]
 800729c:	2b2a      	cmp	r3, #42	; 0x2a
 800729e:	d135      	bne.n	800730c <_svfiprintf_r+0x188>
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	1d1a      	adds	r2, r3, #4
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	9203      	str	r2, [sp, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bfb8      	it	lt
 80072ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072b0:	3402      	adds	r4, #2
 80072b2:	9305      	str	r3, [sp, #20]
 80072b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007380 <_svfiprintf_r+0x1fc>
 80072b8:	7821      	ldrb	r1, [r4, #0]
 80072ba:	2203      	movs	r2, #3
 80072bc:	4650      	mov	r0, sl
 80072be:	f7f8 ffb7 	bl	8000230 <memchr>
 80072c2:	b140      	cbz	r0, 80072d6 <_svfiprintf_r+0x152>
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	eba0 000a 	sub.w	r0, r0, sl
 80072ca:	fa03 f000 	lsl.w	r0, r3, r0
 80072ce:	9b04      	ldr	r3, [sp, #16]
 80072d0:	4303      	orrs	r3, r0
 80072d2:	3401      	adds	r4, #1
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072da:	4826      	ldr	r0, [pc, #152]	; (8007374 <_svfiprintf_r+0x1f0>)
 80072dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072e0:	2206      	movs	r2, #6
 80072e2:	f7f8 ffa5 	bl	8000230 <memchr>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d038      	beq.n	800735c <_svfiprintf_r+0x1d8>
 80072ea:	4b23      	ldr	r3, [pc, #140]	; (8007378 <_svfiprintf_r+0x1f4>)
 80072ec:	bb1b      	cbnz	r3, 8007336 <_svfiprintf_r+0x1b2>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	3307      	adds	r3, #7
 80072f2:	f023 0307 	bic.w	r3, r3, #7
 80072f6:	3308      	adds	r3, #8
 80072f8:	9303      	str	r3, [sp, #12]
 80072fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fc:	4433      	add	r3, r6
 80072fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007300:	e767      	b.n	80071d2 <_svfiprintf_r+0x4e>
 8007302:	fb0c 3202 	mla	r2, ip, r2, r3
 8007306:	460c      	mov	r4, r1
 8007308:	2001      	movs	r0, #1
 800730a:	e7a5      	b.n	8007258 <_svfiprintf_r+0xd4>
 800730c:	2300      	movs	r3, #0
 800730e:	3401      	adds	r4, #1
 8007310:	9305      	str	r3, [sp, #20]
 8007312:	4619      	mov	r1, r3
 8007314:	f04f 0c0a 	mov.w	ip, #10
 8007318:	4620      	mov	r0, r4
 800731a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800731e:	3a30      	subs	r2, #48	; 0x30
 8007320:	2a09      	cmp	r2, #9
 8007322:	d903      	bls.n	800732c <_svfiprintf_r+0x1a8>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0c5      	beq.n	80072b4 <_svfiprintf_r+0x130>
 8007328:	9105      	str	r1, [sp, #20]
 800732a:	e7c3      	b.n	80072b4 <_svfiprintf_r+0x130>
 800732c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007330:	4604      	mov	r4, r0
 8007332:	2301      	movs	r3, #1
 8007334:	e7f0      	b.n	8007318 <_svfiprintf_r+0x194>
 8007336:	ab03      	add	r3, sp, #12
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	462a      	mov	r2, r5
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <_svfiprintf_r+0x1f8>)
 800733e:	a904      	add	r1, sp, #16
 8007340:	4638      	mov	r0, r7
 8007342:	f7fe f80d 	bl	8005360 <_printf_float>
 8007346:	1c42      	adds	r2, r0, #1
 8007348:	4606      	mov	r6, r0
 800734a:	d1d6      	bne.n	80072fa <_svfiprintf_r+0x176>
 800734c:	89ab      	ldrh	r3, [r5, #12]
 800734e:	065b      	lsls	r3, r3, #25
 8007350:	f53f af2c 	bmi.w	80071ac <_svfiprintf_r+0x28>
 8007354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007356:	b01d      	add	sp, #116	; 0x74
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	ab03      	add	r3, sp, #12
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	462a      	mov	r2, r5
 8007362:	4b06      	ldr	r3, [pc, #24]	; (800737c <_svfiprintf_r+0x1f8>)
 8007364:	a904      	add	r1, sp, #16
 8007366:	4638      	mov	r0, r7
 8007368:	f7fe fa9e 	bl	80058a8 <_printf_i>
 800736c:	e7eb      	b.n	8007346 <_svfiprintf_r+0x1c2>
 800736e:	bf00      	nop
 8007370:	080081ec 	.word	0x080081ec
 8007374:	080081f6 	.word	0x080081f6
 8007378:	08005361 	.word	0x08005361
 800737c:	080070cd 	.word	0x080070cd
 8007380:	080081f2 	.word	0x080081f2

08007384 <_sbrk_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d06      	ldr	r5, [pc, #24]	; (80073a0 <_sbrk_r+0x1c>)
 8007388:	2300      	movs	r3, #0
 800738a:	4604      	mov	r4, r0
 800738c:	4608      	mov	r0, r1
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	f7fa f952 	bl	8001638 <_sbrk>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_sbrk_r+0x1a>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_sbrk_r+0x1a>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	2000032c 	.word	0x2000032c

080073a4 <__assert_func>:
 80073a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073a6:	4614      	mov	r4, r2
 80073a8:	461a      	mov	r2, r3
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <__assert_func+0x2c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4605      	mov	r5, r0
 80073b0:	68d8      	ldr	r0, [r3, #12]
 80073b2:	b14c      	cbz	r4, 80073c8 <__assert_func+0x24>
 80073b4:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <__assert_func+0x30>)
 80073b6:	9100      	str	r1, [sp, #0]
 80073b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073bc:	4906      	ldr	r1, [pc, #24]	; (80073d8 <__assert_func+0x34>)
 80073be:	462b      	mov	r3, r5
 80073c0:	f000 f80e 	bl	80073e0 <fiprintf>
 80073c4:	f000 faa4 	bl	8007910 <abort>
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <__assert_func+0x38>)
 80073ca:	461c      	mov	r4, r3
 80073cc:	e7f3      	b.n	80073b6 <__assert_func+0x12>
 80073ce:	bf00      	nop
 80073d0:	2000000c 	.word	0x2000000c
 80073d4:	080081fd 	.word	0x080081fd
 80073d8:	0800820a 	.word	0x0800820a
 80073dc:	08008238 	.word	0x08008238

080073e0 <fiprintf>:
 80073e0:	b40e      	push	{r1, r2, r3}
 80073e2:	b503      	push	{r0, r1, lr}
 80073e4:	4601      	mov	r1, r0
 80073e6:	ab03      	add	r3, sp, #12
 80073e8:	4805      	ldr	r0, [pc, #20]	; (8007400 <fiprintf+0x20>)
 80073ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ee:	6800      	ldr	r0, [r0, #0]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	f000 f88f 	bl	8007514 <_vfiprintf_r>
 80073f6:	b002      	add	sp, #8
 80073f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073fc:	b003      	add	sp, #12
 80073fe:	4770      	bx	lr
 8007400:	2000000c 	.word	0x2000000c

08007404 <__ascii_mbtowc>:
 8007404:	b082      	sub	sp, #8
 8007406:	b901      	cbnz	r1, 800740a <__ascii_mbtowc+0x6>
 8007408:	a901      	add	r1, sp, #4
 800740a:	b142      	cbz	r2, 800741e <__ascii_mbtowc+0x1a>
 800740c:	b14b      	cbz	r3, 8007422 <__ascii_mbtowc+0x1e>
 800740e:	7813      	ldrb	r3, [r2, #0]
 8007410:	600b      	str	r3, [r1, #0]
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	1e10      	subs	r0, r2, #0
 8007416:	bf18      	it	ne
 8007418:	2001      	movne	r0, #1
 800741a:	b002      	add	sp, #8
 800741c:	4770      	bx	lr
 800741e:	4610      	mov	r0, r2
 8007420:	e7fb      	b.n	800741a <__ascii_mbtowc+0x16>
 8007422:	f06f 0001 	mvn.w	r0, #1
 8007426:	e7f8      	b.n	800741a <__ascii_mbtowc+0x16>

08007428 <memmove>:
 8007428:	4288      	cmp	r0, r1
 800742a:	b510      	push	{r4, lr}
 800742c:	eb01 0402 	add.w	r4, r1, r2
 8007430:	d902      	bls.n	8007438 <memmove+0x10>
 8007432:	4284      	cmp	r4, r0
 8007434:	4623      	mov	r3, r4
 8007436:	d807      	bhi.n	8007448 <memmove+0x20>
 8007438:	1e43      	subs	r3, r0, #1
 800743a:	42a1      	cmp	r1, r4
 800743c:	d008      	beq.n	8007450 <memmove+0x28>
 800743e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007446:	e7f8      	b.n	800743a <memmove+0x12>
 8007448:	4402      	add	r2, r0
 800744a:	4601      	mov	r1, r0
 800744c:	428a      	cmp	r2, r1
 800744e:	d100      	bne.n	8007452 <memmove+0x2a>
 8007450:	bd10      	pop	{r4, pc}
 8007452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800745a:	e7f7      	b.n	800744c <memmove+0x24>

0800745c <__malloc_lock>:
 800745c:	4801      	ldr	r0, [pc, #4]	; (8007464 <__malloc_lock+0x8>)
 800745e:	f000 bc17 	b.w	8007c90 <__retarget_lock_acquire_recursive>
 8007462:	bf00      	nop
 8007464:	20000334 	.word	0x20000334

08007468 <__malloc_unlock>:
 8007468:	4801      	ldr	r0, [pc, #4]	; (8007470 <__malloc_unlock+0x8>)
 800746a:	f000 bc12 	b.w	8007c92 <__retarget_lock_release_recursive>
 800746e:	bf00      	nop
 8007470:	20000334 	.word	0x20000334

08007474 <_realloc_r>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	4607      	mov	r7, r0
 8007478:	4614      	mov	r4, r2
 800747a:	460e      	mov	r6, r1
 800747c:	b921      	cbnz	r1, 8007488 <_realloc_r+0x14>
 800747e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007482:	4611      	mov	r1, r2
 8007484:	f7ff bdc8 	b.w	8007018 <_malloc_r>
 8007488:	b922      	cbnz	r2, 8007494 <_realloc_r+0x20>
 800748a:	f7ff fd75 	bl	8006f78 <_free_r>
 800748e:	4625      	mov	r5, r4
 8007490:	4628      	mov	r0, r5
 8007492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007494:	f000 fc62 	bl	8007d5c <_malloc_usable_size_r>
 8007498:	42a0      	cmp	r0, r4
 800749a:	d20f      	bcs.n	80074bc <_realloc_r+0x48>
 800749c:	4621      	mov	r1, r4
 800749e:	4638      	mov	r0, r7
 80074a0:	f7ff fdba 	bl	8007018 <_malloc_r>
 80074a4:	4605      	mov	r5, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d0f2      	beq.n	8007490 <_realloc_r+0x1c>
 80074aa:	4631      	mov	r1, r6
 80074ac:	4622      	mov	r2, r4
 80074ae:	f7ff f9c7 	bl	8006840 <memcpy>
 80074b2:	4631      	mov	r1, r6
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff fd5f 	bl	8006f78 <_free_r>
 80074ba:	e7e9      	b.n	8007490 <_realloc_r+0x1c>
 80074bc:	4635      	mov	r5, r6
 80074be:	e7e7      	b.n	8007490 <_realloc_r+0x1c>

080074c0 <__sfputc_r>:
 80074c0:	6893      	ldr	r3, [r2, #8]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	b410      	push	{r4}
 80074c8:	6093      	str	r3, [r2, #8]
 80074ca:	da08      	bge.n	80074de <__sfputc_r+0x1e>
 80074cc:	6994      	ldr	r4, [r2, #24]
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	db01      	blt.n	80074d6 <__sfputc_r+0x16>
 80074d2:	290a      	cmp	r1, #10
 80074d4:	d103      	bne.n	80074de <__sfputc_r+0x1e>
 80074d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074da:	f000 b94b 	b.w	8007774 <__swbuf_r>
 80074de:	6813      	ldr	r3, [r2, #0]
 80074e0:	1c58      	adds	r0, r3, #1
 80074e2:	6010      	str	r0, [r2, #0]
 80074e4:	7019      	strb	r1, [r3, #0]
 80074e6:	4608      	mov	r0, r1
 80074e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <__sfputs_r>:
 80074ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f0:	4606      	mov	r6, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	4614      	mov	r4, r2
 80074f6:	18d5      	adds	r5, r2, r3
 80074f8:	42ac      	cmp	r4, r5
 80074fa:	d101      	bne.n	8007500 <__sfputs_r+0x12>
 80074fc:	2000      	movs	r0, #0
 80074fe:	e007      	b.n	8007510 <__sfputs_r+0x22>
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	463a      	mov	r2, r7
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff ffda 	bl	80074c0 <__sfputc_r>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d1f3      	bne.n	80074f8 <__sfputs_r+0xa>
 8007510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007514 <_vfiprintf_r>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	460d      	mov	r5, r1
 800751a:	b09d      	sub	sp, #116	; 0x74
 800751c:	4614      	mov	r4, r2
 800751e:	4698      	mov	r8, r3
 8007520:	4606      	mov	r6, r0
 8007522:	b118      	cbz	r0, 800752c <_vfiprintf_r+0x18>
 8007524:	6983      	ldr	r3, [r0, #24]
 8007526:	b90b      	cbnz	r3, 800752c <_vfiprintf_r+0x18>
 8007528:	f000 fb14 	bl	8007b54 <__sinit>
 800752c:	4b89      	ldr	r3, [pc, #548]	; (8007754 <_vfiprintf_r+0x240>)
 800752e:	429d      	cmp	r5, r3
 8007530:	d11b      	bne.n	800756a <_vfiprintf_r+0x56>
 8007532:	6875      	ldr	r5, [r6, #4]
 8007534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007536:	07d9      	lsls	r1, r3, #31
 8007538:	d405      	bmi.n	8007546 <_vfiprintf_r+0x32>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	059a      	lsls	r2, r3, #22
 800753e:	d402      	bmi.n	8007546 <_vfiprintf_r+0x32>
 8007540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007542:	f000 fba5 	bl	8007c90 <__retarget_lock_acquire_recursive>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	d501      	bpl.n	8007550 <_vfiprintf_r+0x3c>
 800754c:	692b      	ldr	r3, [r5, #16]
 800754e:	b9eb      	cbnz	r3, 800758c <_vfiprintf_r+0x78>
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f000 f96e 	bl	8007834 <__swsetup_r>
 8007558:	b1c0      	cbz	r0, 800758c <_vfiprintf_r+0x78>
 800755a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755c:	07dc      	lsls	r4, r3, #31
 800755e:	d50e      	bpl.n	800757e <_vfiprintf_r+0x6a>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007564:	b01d      	add	sp, #116	; 0x74
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756a:	4b7b      	ldr	r3, [pc, #492]	; (8007758 <_vfiprintf_r+0x244>)
 800756c:	429d      	cmp	r5, r3
 800756e:	d101      	bne.n	8007574 <_vfiprintf_r+0x60>
 8007570:	68b5      	ldr	r5, [r6, #8]
 8007572:	e7df      	b.n	8007534 <_vfiprintf_r+0x20>
 8007574:	4b79      	ldr	r3, [pc, #484]	; (800775c <_vfiprintf_r+0x248>)
 8007576:	429d      	cmp	r5, r3
 8007578:	bf08      	it	eq
 800757a:	68f5      	ldreq	r5, [r6, #12]
 800757c:	e7da      	b.n	8007534 <_vfiprintf_r+0x20>
 800757e:	89ab      	ldrh	r3, [r5, #12]
 8007580:	0598      	lsls	r0, r3, #22
 8007582:	d4ed      	bmi.n	8007560 <_vfiprintf_r+0x4c>
 8007584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007586:	f000 fb84 	bl	8007c92 <__retarget_lock_release_recursive>
 800758a:	e7e9      	b.n	8007560 <_vfiprintf_r+0x4c>
 800758c:	2300      	movs	r3, #0
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	2320      	movs	r3, #32
 8007592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007596:	f8cd 800c 	str.w	r8, [sp, #12]
 800759a:	2330      	movs	r3, #48	; 0x30
 800759c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007760 <_vfiprintf_r+0x24c>
 80075a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075a4:	f04f 0901 	mov.w	r9, #1
 80075a8:	4623      	mov	r3, r4
 80075aa:	469a      	mov	sl, r3
 80075ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b0:	b10a      	cbz	r2, 80075b6 <_vfiprintf_r+0xa2>
 80075b2:	2a25      	cmp	r2, #37	; 0x25
 80075b4:	d1f9      	bne.n	80075aa <_vfiprintf_r+0x96>
 80075b6:	ebba 0b04 	subs.w	fp, sl, r4
 80075ba:	d00b      	beq.n	80075d4 <_vfiprintf_r+0xc0>
 80075bc:	465b      	mov	r3, fp
 80075be:	4622      	mov	r2, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7ff ff93 	bl	80074ee <__sfputs_r>
 80075c8:	3001      	adds	r0, #1
 80075ca:	f000 80aa 	beq.w	8007722 <_vfiprintf_r+0x20e>
 80075ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d0:	445a      	add	r2, fp
 80075d2:	9209      	str	r2, [sp, #36]	; 0x24
 80075d4:	f89a 3000 	ldrb.w	r3, [sl]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80a2 	beq.w	8007722 <_vfiprintf_r+0x20e>
 80075de:	2300      	movs	r3, #0
 80075e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e8:	f10a 0a01 	add.w	sl, sl, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075f4:	931a      	str	r3, [sp, #104]	; 0x68
 80075f6:	4654      	mov	r4, sl
 80075f8:	2205      	movs	r2, #5
 80075fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fe:	4858      	ldr	r0, [pc, #352]	; (8007760 <_vfiprintf_r+0x24c>)
 8007600:	f7f8 fe16 	bl	8000230 <memchr>
 8007604:	9a04      	ldr	r2, [sp, #16]
 8007606:	b9d8      	cbnz	r0, 8007640 <_vfiprintf_r+0x12c>
 8007608:	06d1      	lsls	r1, r2, #27
 800760a:	bf44      	itt	mi
 800760c:	2320      	movmi	r3, #32
 800760e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007612:	0713      	lsls	r3, r2, #28
 8007614:	bf44      	itt	mi
 8007616:	232b      	movmi	r3, #43	; 0x2b
 8007618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761c:	f89a 3000 	ldrb.w	r3, [sl]
 8007620:	2b2a      	cmp	r3, #42	; 0x2a
 8007622:	d015      	beq.n	8007650 <_vfiprintf_r+0x13c>
 8007624:	9a07      	ldr	r2, [sp, #28]
 8007626:	4654      	mov	r4, sl
 8007628:	2000      	movs	r0, #0
 800762a:	f04f 0c0a 	mov.w	ip, #10
 800762e:	4621      	mov	r1, r4
 8007630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007634:	3b30      	subs	r3, #48	; 0x30
 8007636:	2b09      	cmp	r3, #9
 8007638:	d94e      	bls.n	80076d8 <_vfiprintf_r+0x1c4>
 800763a:	b1b0      	cbz	r0, 800766a <_vfiprintf_r+0x156>
 800763c:	9207      	str	r2, [sp, #28]
 800763e:	e014      	b.n	800766a <_vfiprintf_r+0x156>
 8007640:	eba0 0308 	sub.w	r3, r0, r8
 8007644:	fa09 f303 	lsl.w	r3, r9, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	9304      	str	r3, [sp, #16]
 800764c:	46a2      	mov	sl, r4
 800764e:	e7d2      	b.n	80075f6 <_vfiprintf_r+0xe2>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	1d19      	adds	r1, r3, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	9103      	str	r1, [sp, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	bfbb      	ittet	lt
 800765c:	425b      	neglt	r3, r3
 800765e:	f042 0202 	orrlt.w	r2, r2, #2
 8007662:	9307      	strge	r3, [sp, #28]
 8007664:	9307      	strlt	r3, [sp, #28]
 8007666:	bfb8      	it	lt
 8007668:	9204      	strlt	r2, [sp, #16]
 800766a:	7823      	ldrb	r3, [r4, #0]
 800766c:	2b2e      	cmp	r3, #46	; 0x2e
 800766e:	d10c      	bne.n	800768a <_vfiprintf_r+0x176>
 8007670:	7863      	ldrb	r3, [r4, #1]
 8007672:	2b2a      	cmp	r3, #42	; 0x2a
 8007674:	d135      	bne.n	80076e2 <_vfiprintf_r+0x1ce>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	1d1a      	adds	r2, r3, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	9203      	str	r2, [sp, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfb8      	it	lt
 8007682:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007686:	3402      	adds	r4, #2
 8007688:	9305      	str	r3, [sp, #20]
 800768a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007770 <_vfiprintf_r+0x25c>
 800768e:	7821      	ldrb	r1, [r4, #0]
 8007690:	2203      	movs	r2, #3
 8007692:	4650      	mov	r0, sl
 8007694:	f7f8 fdcc 	bl	8000230 <memchr>
 8007698:	b140      	cbz	r0, 80076ac <_vfiprintf_r+0x198>
 800769a:	2340      	movs	r3, #64	; 0x40
 800769c:	eba0 000a 	sub.w	r0, r0, sl
 80076a0:	fa03 f000 	lsl.w	r0, r3, r0
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	4303      	orrs	r3, r0
 80076a8:	3401      	adds	r4, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	482c      	ldr	r0, [pc, #176]	; (8007764 <_vfiprintf_r+0x250>)
 80076b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076b6:	2206      	movs	r2, #6
 80076b8:	f7f8 fdba 	bl	8000230 <memchr>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d03f      	beq.n	8007740 <_vfiprintf_r+0x22c>
 80076c0:	4b29      	ldr	r3, [pc, #164]	; (8007768 <_vfiprintf_r+0x254>)
 80076c2:	bb1b      	cbnz	r3, 800770c <_vfiprintf_r+0x1f8>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	3307      	adds	r3, #7
 80076c8:	f023 0307 	bic.w	r3, r3, #7
 80076cc:	3308      	adds	r3, #8
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	443b      	add	r3, r7
 80076d4:	9309      	str	r3, [sp, #36]	; 0x24
 80076d6:	e767      	b.n	80075a8 <_vfiprintf_r+0x94>
 80076d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076dc:	460c      	mov	r4, r1
 80076de:	2001      	movs	r0, #1
 80076e0:	e7a5      	b.n	800762e <_vfiprintf_r+0x11a>
 80076e2:	2300      	movs	r3, #0
 80076e4:	3401      	adds	r4, #1
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4619      	mov	r1, r3
 80076ea:	f04f 0c0a 	mov.w	ip, #10
 80076ee:	4620      	mov	r0, r4
 80076f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f4:	3a30      	subs	r2, #48	; 0x30
 80076f6:	2a09      	cmp	r2, #9
 80076f8:	d903      	bls.n	8007702 <_vfiprintf_r+0x1ee>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0c5      	beq.n	800768a <_vfiprintf_r+0x176>
 80076fe:	9105      	str	r1, [sp, #20]
 8007700:	e7c3      	b.n	800768a <_vfiprintf_r+0x176>
 8007702:	fb0c 2101 	mla	r1, ip, r1, r2
 8007706:	4604      	mov	r4, r0
 8007708:	2301      	movs	r3, #1
 800770a:	e7f0      	b.n	80076ee <_vfiprintf_r+0x1da>
 800770c:	ab03      	add	r3, sp, #12
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	462a      	mov	r2, r5
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <_vfiprintf_r+0x258>)
 8007714:	a904      	add	r1, sp, #16
 8007716:	4630      	mov	r0, r6
 8007718:	f7fd fe22 	bl	8005360 <_printf_float>
 800771c:	4607      	mov	r7, r0
 800771e:	1c78      	adds	r0, r7, #1
 8007720:	d1d6      	bne.n	80076d0 <_vfiprintf_r+0x1bc>
 8007722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007724:	07d9      	lsls	r1, r3, #31
 8007726:	d405      	bmi.n	8007734 <_vfiprintf_r+0x220>
 8007728:	89ab      	ldrh	r3, [r5, #12]
 800772a:	059a      	lsls	r2, r3, #22
 800772c:	d402      	bmi.n	8007734 <_vfiprintf_r+0x220>
 800772e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007730:	f000 faaf 	bl	8007c92 <__retarget_lock_release_recursive>
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	065b      	lsls	r3, r3, #25
 8007738:	f53f af12 	bmi.w	8007560 <_vfiprintf_r+0x4c>
 800773c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800773e:	e711      	b.n	8007564 <_vfiprintf_r+0x50>
 8007740:	ab03      	add	r3, sp, #12
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	462a      	mov	r2, r5
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <_vfiprintf_r+0x258>)
 8007748:	a904      	add	r1, sp, #16
 800774a:	4630      	mov	r0, r6
 800774c:	f7fe f8ac 	bl	80058a8 <_printf_i>
 8007750:	e7e4      	b.n	800771c <_vfiprintf_r+0x208>
 8007752:	bf00      	nop
 8007754:	08008364 	.word	0x08008364
 8007758:	08008384 	.word	0x08008384
 800775c:	08008344 	.word	0x08008344
 8007760:	080081ec 	.word	0x080081ec
 8007764:	080081f6 	.word	0x080081f6
 8007768:	08005361 	.word	0x08005361
 800776c:	080074ef 	.word	0x080074ef
 8007770:	080081f2 	.word	0x080081f2

08007774 <__swbuf_r>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	460e      	mov	r6, r1
 8007778:	4614      	mov	r4, r2
 800777a:	4605      	mov	r5, r0
 800777c:	b118      	cbz	r0, 8007786 <__swbuf_r+0x12>
 800777e:	6983      	ldr	r3, [r0, #24]
 8007780:	b90b      	cbnz	r3, 8007786 <__swbuf_r+0x12>
 8007782:	f000 f9e7 	bl	8007b54 <__sinit>
 8007786:	4b21      	ldr	r3, [pc, #132]	; (800780c <__swbuf_r+0x98>)
 8007788:	429c      	cmp	r4, r3
 800778a:	d12b      	bne.n	80077e4 <__swbuf_r+0x70>
 800778c:	686c      	ldr	r4, [r5, #4]
 800778e:	69a3      	ldr	r3, [r4, #24]
 8007790:	60a3      	str	r3, [r4, #8]
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	071a      	lsls	r2, r3, #28
 8007796:	d52f      	bpl.n	80077f8 <__swbuf_r+0x84>
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	b36b      	cbz	r3, 80077f8 <__swbuf_r+0x84>
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	6820      	ldr	r0, [r4, #0]
 80077a0:	1ac0      	subs	r0, r0, r3
 80077a2:	6963      	ldr	r3, [r4, #20]
 80077a4:	b2f6      	uxtb	r6, r6
 80077a6:	4283      	cmp	r3, r0
 80077a8:	4637      	mov	r7, r6
 80077aa:	dc04      	bgt.n	80077b6 <__swbuf_r+0x42>
 80077ac:	4621      	mov	r1, r4
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 f93c 	bl	8007a2c <_fflush_r>
 80077b4:	bb30      	cbnz	r0, 8007804 <__swbuf_r+0x90>
 80077b6:	68a3      	ldr	r3, [r4, #8]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	60a3      	str	r3, [r4, #8]
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	6022      	str	r2, [r4, #0]
 80077c2:	701e      	strb	r6, [r3, #0]
 80077c4:	6963      	ldr	r3, [r4, #20]
 80077c6:	3001      	adds	r0, #1
 80077c8:	4283      	cmp	r3, r0
 80077ca:	d004      	beq.n	80077d6 <__swbuf_r+0x62>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	07db      	lsls	r3, r3, #31
 80077d0:	d506      	bpl.n	80077e0 <__swbuf_r+0x6c>
 80077d2:	2e0a      	cmp	r6, #10
 80077d4:	d104      	bne.n	80077e0 <__swbuf_r+0x6c>
 80077d6:	4621      	mov	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 f927 	bl	8007a2c <_fflush_r>
 80077de:	b988      	cbnz	r0, 8007804 <__swbuf_r+0x90>
 80077e0:	4638      	mov	r0, r7
 80077e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e4:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <__swbuf_r+0x9c>)
 80077e6:	429c      	cmp	r4, r3
 80077e8:	d101      	bne.n	80077ee <__swbuf_r+0x7a>
 80077ea:	68ac      	ldr	r4, [r5, #8]
 80077ec:	e7cf      	b.n	800778e <__swbuf_r+0x1a>
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <__swbuf_r+0xa0>)
 80077f0:	429c      	cmp	r4, r3
 80077f2:	bf08      	it	eq
 80077f4:	68ec      	ldreq	r4, [r5, #12]
 80077f6:	e7ca      	b.n	800778e <__swbuf_r+0x1a>
 80077f8:	4621      	mov	r1, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 f81a 	bl	8007834 <__swsetup_r>
 8007800:	2800      	cmp	r0, #0
 8007802:	d0cb      	beq.n	800779c <__swbuf_r+0x28>
 8007804:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007808:	e7ea      	b.n	80077e0 <__swbuf_r+0x6c>
 800780a:	bf00      	nop
 800780c:	08008364 	.word	0x08008364
 8007810:	08008384 	.word	0x08008384
 8007814:	08008344 	.word	0x08008344

08007818 <__ascii_wctomb>:
 8007818:	b149      	cbz	r1, 800782e <__ascii_wctomb+0x16>
 800781a:	2aff      	cmp	r2, #255	; 0xff
 800781c:	bf85      	ittet	hi
 800781e:	238a      	movhi	r3, #138	; 0x8a
 8007820:	6003      	strhi	r3, [r0, #0]
 8007822:	700a      	strbls	r2, [r1, #0]
 8007824:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007828:	bf98      	it	ls
 800782a:	2001      	movls	r0, #1
 800782c:	4770      	bx	lr
 800782e:	4608      	mov	r0, r1
 8007830:	4770      	bx	lr
	...

08007834 <__swsetup_r>:
 8007834:	4b32      	ldr	r3, [pc, #200]	; (8007900 <__swsetup_r+0xcc>)
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	681d      	ldr	r5, [r3, #0]
 800783a:	4606      	mov	r6, r0
 800783c:	460c      	mov	r4, r1
 800783e:	b125      	cbz	r5, 800784a <__swsetup_r+0x16>
 8007840:	69ab      	ldr	r3, [r5, #24]
 8007842:	b913      	cbnz	r3, 800784a <__swsetup_r+0x16>
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f985 	bl	8007b54 <__sinit>
 800784a:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <__swsetup_r+0xd0>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d10f      	bne.n	8007870 <__swsetup_r+0x3c>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007858:	0719      	lsls	r1, r3, #28
 800785a:	d42c      	bmi.n	80078b6 <__swsetup_r+0x82>
 800785c:	06dd      	lsls	r5, r3, #27
 800785e:	d411      	bmi.n	8007884 <__swsetup_r+0x50>
 8007860:	2309      	movs	r3, #9
 8007862:	6033      	str	r3, [r6, #0]
 8007864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800786e:	e03e      	b.n	80078ee <__swsetup_r+0xba>
 8007870:	4b25      	ldr	r3, [pc, #148]	; (8007908 <__swsetup_r+0xd4>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d101      	bne.n	800787a <__swsetup_r+0x46>
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	e7eb      	b.n	8007852 <__swsetup_r+0x1e>
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <__swsetup_r+0xd8>)
 800787c:	429c      	cmp	r4, r3
 800787e:	bf08      	it	eq
 8007880:	68ec      	ldreq	r4, [r5, #12]
 8007882:	e7e6      	b.n	8007852 <__swsetup_r+0x1e>
 8007884:	0758      	lsls	r0, r3, #29
 8007886:	d512      	bpl.n	80078ae <__swsetup_r+0x7a>
 8007888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788a:	b141      	cbz	r1, 800789e <__swsetup_r+0x6a>
 800788c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007890:	4299      	cmp	r1, r3
 8007892:	d002      	beq.n	800789a <__swsetup_r+0x66>
 8007894:	4630      	mov	r0, r6
 8007896:	f7ff fb6f 	bl	8006f78 <_free_r>
 800789a:	2300      	movs	r3, #0
 800789c:	6363      	str	r3, [r4, #52]	; 0x34
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	2300      	movs	r3, #0
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f043 0308 	orr.w	r3, r3, #8
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	b94b      	cbnz	r3, 80078ce <__swsetup_r+0x9a>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d003      	beq.n	80078ce <__swsetup_r+0x9a>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 fa07 	bl	8007cdc <__smakebuf_r>
 80078ce:	89a0      	ldrh	r0, [r4, #12]
 80078d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d4:	f010 0301 	ands.w	r3, r0, #1
 80078d8:	d00a      	beq.n	80078f0 <__swsetup_r+0xbc>
 80078da:	2300      	movs	r3, #0
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	6963      	ldr	r3, [r4, #20]
 80078e0:	425b      	negs	r3, r3
 80078e2:	61a3      	str	r3, [r4, #24]
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	b943      	cbnz	r3, 80078fa <__swsetup_r+0xc6>
 80078e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078ec:	d1ba      	bne.n	8007864 <__swsetup_r+0x30>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	0781      	lsls	r1, r0, #30
 80078f2:	bf58      	it	pl
 80078f4:	6963      	ldrpl	r3, [r4, #20]
 80078f6:	60a3      	str	r3, [r4, #8]
 80078f8:	e7f4      	b.n	80078e4 <__swsetup_r+0xb0>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e7f7      	b.n	80078ee <__swsetup_r+0xba>
 80078fe:	bf00      	nop
 8007900:	2000000c 	.word	0x2000000c
 8007904:	08008364 	.word	0x08008364
 8007908:	08008384 	.word	0x08008384
 800790c:	08008344 	.word	0x08008344

08007910 <abort>:
 8007910:	b508      	push	{r3, lr}
 8007912:	2006      	movs	r0, #6
 8007914:	f000 fa52 	bl	8007dbc <raise>
 8007918:	2001      	movs	r0, #1
 800791a:	f7f9 fe15 	bl	8001548 <_exit>
	...

08007920 <__sflush_r>:
 8007920:	898a      	ldrh	r2, [r1, #12]
 8007922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	4605      	mov	r5, r0
 8007928:	0710      	lsls	r0, r2, #28
 800792a:	460c      	mov	r4, r1
 800792c:	d458      	bmi.n	80079e0 <__sflush_r+0xc0>
 800792e:	684b      	ldr	r3, [r1, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc05      	bgt.n	8007940 <__sflush_r+0x20>
 8007934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	dc02      	bgt.n	8007940 <__sflush_r+0x20>
 800793a:	2000      	movs	r0, #0
 800793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007942:	2e00      	cmp	r6, #0
 8007944:	d0f9      	beq.n	800793a <__sflush_r+0x1a>
 8007946:	2300      	movs	r3, #0
 8007948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800794c:	682f      	ldr	r7, [r5, #0]
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	d032      	beq.n	80079b8 <__sflush_r+0x98>
 8007952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	075a      	lsls	r2, r3, #29
 8007958:	d505      	bpl.n	8007966 <__sflush_r+0x46>
 800795a:	6863      	ldr	r3, [r4, #4]
 800795c:	1ac0      	subs	r0, r0, r3
 800795e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007960:	b10b      	cbz	r3, 8007966 <__sflush_r+0x46>
 8007962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007964:	1ac0      	subs	r0, r0, r3
 8007966:	2300      	movs	r3, #0
 8007968:	4602      	mov	r2, r0
 800796a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800796c:	6a21      	ldr	r1, [r4, #32]
 800796e:	4628      	mov	r0, r5
 8007970:	47b0      	blx	r6
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	d106      	bne.n	8007986 <__sflush_r+0x66>
 8007978:	6829      	ldr	r1, [r5, #0]
 800797a:	291d      	cmp	r1, #29
 800797c:	d82c      	bhi.n	80079d8 <__sflush_r+0xb8>
 800797e:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <__sflush_r+0x108>)
 8007980:	40ca      	lsrs	r2, r1
 8007982:	07d6      	lsls	r6, r2, #31
 8007984:	d528      	bpl.n	80079d8 <__sflush_r+0xb8>
 8007986:	2200      	movs	r2, #0
 8007988:	6062      	str	r2, [r4, #4]
 800798a:	04d9      	lsls	r1, r3, #19
 800798c:	6922      	ldr	r2, [r4, #16]
 800798e:	6022      	str	r2, [r4, #0]
 8007990:	d504      	bpl.n	800799c <__sflush_r+0x7c>
 8007992:	1c42      	adds	r2, r0, #1
 8007994:	d101      	bne.n	800799a <__sflush_r+0x7a>
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	b903      	cbnz	r3, 800799c <__sflush_r+0x7c>
 800799a:	6560      	str	r0, [r4, #84]	; 0x54
 800799c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799e:	602f      	str	r7, [r5, #0]
 80079a0:	2900      	cmp	r1, #0
 80079a2:	d0ca      	beq.n	800793a <__sflush_r+0x1a>
 80079a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d002      	beq.n	80079b2 <__sflush_r+0x92>
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fae3 	bl	8006f78 <_free_r>
 80079b2:	2000      	movs	r0, #0
 80079b4:	6360      	str	r0, [r4, #52]	; 0x34
 80079b6:	e7c1      	b.n	800793c <__sflush_r+0x1c>
 80079b8:	6a21      	ldr	r1, [r4, #32]
 80079ba:	2301      	movs	r3, #1
 80079bc:	4628      	mov	r0, r5
 80079be:	47b0      	blx	r6
 80079c0:	1c41      	adds	r1, r0, #1
 80079c2:	d1c7      	bne.n	8007954 <__sflush_r+0x34>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0c4      	beq.n	8007954 <__sflush_r+0x34>
 80079ca:	2b1d      	cmp	r3, #29
 80079cc:	d001      	beq.n	80079d2 <__sflush_r+0xb2>
 80079ce:	2b16      	cmp	r3, #22
 80079d0:	d101      	bne.n	80079d6 <__sflush_r+0xb6>
 80079d2:	602f      	str	r7, [r5, #0]
 80079d4:	e7b1      	b.n	800793a <__sflush_r+0x1a>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	e7ad      	b.n	800793c <__sflush_r+0x1c>
 80079e0:	690f      	ldr	r7, [r1, #16]
 80079e2:	2f00      	cmp	r7, #0
 80079e4:	d0a9      	beq.n	800793a <__sflush_r+0x1a>
 80079e6:	0793      	lsls	r3, r2, #30
 80079e8:	680e      	ldr	r6, [r1, #0]
 80079ea:	bf08      	it	eq
 80079ec:	694b      	ldreq	r3, [r1, #20]
 80079ee:	600f      	str	r7, [r1, #0]
 80079f0:	bf18      	it	ne
 80079f2:	2300      	movne	r3, #0
 80079f4:	eba6 0807 	sub.w	r8, r6, r7
 80079f8:	608b      	str	r3, [r1, #8]
 80079fa:	f1b8 0f00 	cmp.w	r8, #0
 80079fe:	dd9c      	ble.n	800793a <__sflush_r+0x1a>
 8007a00:	6a21      	ldr	r1, [r4, #32]
 8007a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a04:	4643      	mov	r3, r8
 8007a06:	463a      	mov	r2, r7
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b0      	blx	r6
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	dc06      	bgt.n	8007a1e <__sflush_r+0xfe>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1c:	e78e      	b.n	800793c <__sflush_r+0x1c>
 8007a1e:	4407      	add	r7, r0
 8007a20:	eba8 0800 	sub.w	r8, r8, r0
 8007a24:	e7e9      	b.n	80079fa <__sflush_r+0xda>
 8007a26:	bf00      	nop
 8007a28:	20400001 	.word	0x20400001

08007a2c <_fflush_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	4605      	mov	r5, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b913      	cbnz	r3, 8007a3c <_fflush_r+0x10>
 8007a36:	2500      	movs	r5, #0
 8007a38:	4628      	mov	r0, r5
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	b118      	cbz	r0, 8007a46 <_fflush_r+0x1a>
 8007a3e:	6983      	ldr	r3, [r0, #24]
 8007a40:	b90b      	cbnz	r3, 8007a46 <_fflush_r+0x1a>
 8007a42:	f000 f887 	bl	8007b54 <__sinit>
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <_fflush_r+0x6c>)
 8007a48:	429c      	cmp	r4, r3
 8007a4a:	d11b      	bne.n	8007a84 <_fflush_r+0x58>
 8007a4c:	686c      	ldr	r4, [r5, #4]
 8007a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0ef      	beq.n	8007a36 <_fflush_r+0xa>
 8007a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a58:	07d0      	lsls	r0, r2, #31
 8007a5a:	d404      	bmi.n	8007a66 <_fflush_r+0x3a>
 8007a5c:	0599      	lsls	r1, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_fflush_r+0x3a>
 8007a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a62:	f000 f915 	bl	8007c90 <__retarget_lock_acquire_recursive>
 8007a66:	4628      	mov	r0, r5
 8007a68:	4621      	mov	r1, r4
 8007a6a:	f7ff ff59 	bl	8007920 <__sflush_r>
 8007a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a70:	07da      	lsls	r2, r3, #31
 8007a72:	4605      	mov	r5, r0
 8007a74:	d4e0      	bmi.n	8007a38 <_fflush_r+0xc>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	059b      	lsls	r3, r3, #22
 8007a7a:	d4dd      	bmi.n	8007a38 <_fflush_r+0xc>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f000 f908 	bl	8007c92 <__retarget_lock_release_recursive>
 8007a82:	e7d9      	b.n	8007a38 <_fflush_r+0xc>
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <_fflush_r+0x70>)
 8007a86:	429c      	cmp	r4, r3
 8007a88:	d101      	bne.n	8007a8e <_fflush_r+0x62>
 8007a8a:	68ac      	ldr	r4, [r5, #8]
 8007a8c:	e7df      	b.n	8007a4e <_fflush_r+0x22>
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <_fflush_r+0x74>)
 8007a90:	429c      	cmp	r4, r3
 8007a92:	bf08      	it	eq
 8007a94:	68ec      	ldreq	r4, [r5, #12]
 8007a96:	e7da      	b.n	8007a4e <_fflush_r+0x22>
 8007a98:	08008364 	.word	0x08008364
 8007a9c:	08008384 	.word	0x08008384
 8007aa0:	08008344 	.word	0x08008344

08007aa4 <std>:
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8007aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ab2:	6083      	str	r3, [r0, #8]
 8007ab4:	8181      	strh	r1, [r0, #12]
 8007ab6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ab8:	81c2      	strh	r2, [r0, #14]
 8007aba:	6183      	str	r3, [r0, #24]
 8007abc:	4619      	mov	r1, r3
 8007abe:	2208      	movs	r2, #8
 8007ac0:	305c      	adds	r0, #92	; 0x5c
 8007ac2:	f7fd fba5 	bl	8005210 <memset>
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <std+0x38>)
 8007ac8:	6263      	str	r3, [r4, #36]	; 0x24
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <std+0x3c>)
 8007acc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ace:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <std+0x40>)
 8007ad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <std+0x44>)
 8007ad4:	6224      	str	r4, [r4, #32]
 8007ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop
 8007adc:	08007df5 	.word	0x08007df5
 8007ae0:	08007e17 	.word	0x08007e17
 8007ae4:	08007e4f 	.word	0x08007e4f
 8007ae8:	08007e73 	.word	0x08007e73

08007aec <_cleanup_r>:
 8007aec:	4901      	ldr	r1, [pc, #4]	; (8007af4 <_cleanup_r+0x8>)
 8007aee:	f000 b8af 	b.w	8007c50 <_fwalk_reent>
 8007af2:	bf00      	nop
 8007af4:	08007a2d 	.word	0x08007a2d

08007af8 <__sfmoreglue>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	1e4a      	subs	r2, r1, #1
 8007afc:	2568      	movs	r5, #104	; 0x68
 8007afe:	4355      	muls	r5, r2
 8007b00:	460e      	mov	r6, r1
 8007b02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b06:	f7ff fa87 	bl	8007018 <_malloc_r>
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	b140      	cbz	r0, 8007b20 <__sfmoreglue+0x28>
 8007b0e:	2100      	movs	r1, #0
 8007b10:	e9c0 1600 	strd	r1, r6, [r0]
 8007b14:	300c      	adds	r0, #12
 8007b16:	60a0      	str	r0, [r4, #8]
 8007b18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b1c:	f7fd fb78 	bl	8005210 <memset>
 8007b20:	4620      	mov	r0, r4
 8007b22:	bd70      	pop	{r4, r5, r6, pc}

08007b24 <__sfp_lock_acquire>:
 8007b24:	4801      	ldr	r0, [pc, #4]	; (8007b2c <__sfp_lock_acquire+0x8>)
 8007b26:	f000 b8b3 	b.w	8007c90 <__retarget_lock_acquire_recursive>
 8007b2a:	bf00      	nop
 8007b2c:	20000338 	.word	0x20000338

08007b30 <__sfp_lock_release>:
 8007b30:	4801      	ldr	r0, [pc, #4]	; (8007b38 <__sfp_lock_release+0x8>)
 8007b32:	f000 b8ae 	b.w	8007c92 <__retarget_lock_release_recursive>
 8007b36:	bf00      	nop
 8007b38:	20000338 	.word	0x20000338

08007b3c <__sinit_lock_acquire>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__sinit_lock_acquire+0x8>)
 8007b3e:	f000 b8a7 	b.w	8007c90 <__retarget_lock_acquire_recursive>
 8007b42:	bf00      	nop
 8007b44:	20000333 	.word	0x20000333

08007b48 <__sinit_lock_release>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__sinit_lock_release+0x8>)
 8007b4a:	f000 b8a2 	b.w	8007c92 <__retarget_lock_release_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20000333 	.word	0x20000333

08007b54 <__sinit>:
 8007b54:	b510      	push	{r4, lr}
 8007b56:	4604      	mov	r4, r0
 8007b58:	f7ff fff0 	bl	8007b3c <__sinit_lock_acquire>
 8007b5c:	69a3      	ldr	r3, [r4, #24]
 8007b5e:	b11b      	cbz	r3, 8007b68 <__sinit+0x14>
 8007b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b64:	f7ff bff0 	b.w	8007b48 <__sinit_lock_release>
 8007b68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <__sinit+0x68>)
 8007b70:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <__sinit+0x6c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	bf04      	itt	eq
 8007b7a:	2301      	moveq	r3, #1
 8007b7c:	61a3      	streq	r3, [r4, #24]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 f820 	bl	8007bc4 <__sfp>
 8007b84:	6060      	str	r0, [r4, #4]
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 f81c 	bl	8007bc4 <__sfp>
 8007b8c:	60a0      	str	r0, [r4, #8]
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 f818 	bl	8007bc4 <__sfp>
 8007b94:	2200      	movs	r2, #0
 8007b96:	60e0      	str	r0, [r4, #12]
 8007b98:	2104      	movs	r1, #4
 8007b9a:	6860      	ldr	r0, [r4, #4]
 8007b9c:	f7ff ff82 	bl	8007aa4 <std>
 8007ba0:	68a0      	ldr	r0, [r4, #8]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	2109      	movs	r1, #9
 8007ba6:	f7ff ff7d 	bl	8007aa4 <std>
 8007baa:	68e0      	ldr	r0, [r4, #12]
 8007bac:	2202      	movs	r2, #2
 8007bae:	2112      	movs	r1, #18
 8007bb0:	f7ff ff78 	bl	8007aa4 <std>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	61a3      	str	r3, [r4, #24]
 8007bb8:	e7d2      	b.n	8007b60 <__sinit+0xc>
 8007bba:	bf00      	nop
 8007bbc:	08007fc0 	.word	0x08007fc0
 8007bc0:	08007aed 	.word	0x08007aed

08007bc4 <__sfp>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	4607      	mov	r7, r0
 8007bc8:	f7ff ffac 	bl	8007b24 <__sfp_lock_acquire>
 8007bcc:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <__sfp+0x84>)
 8007bce:	681e      	ldr	r6, [r3, #0]
 8007bd0:	69b3      	ldr	r3, [r6, #24]
 8007bd2:	b913      	cbnz	r3, 8007bda <__sfp+0x16>
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7ff ffbd 	bl	8007b54 <__sinit>
 8007bda:	3648      	adds	r6, #72	; 0x48
 8007bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	d503      	bpl.n	8007bec <__sfp+0x28>
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	b30b      	cbz	r3, 8007c2c <__sfp+0x68>
 8007be8:	6836      	ldr	r6, [r6, #0]
 8007bea:	e7f7      	b.n	8007bdc <__sfp+0x18>
 8007bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bf0:	b9d5      	cbnz	r5, 8007c28 <__sfp+0x64>
 8007bf2:	4b16      	ldr	r3, [pc, #88]	; (8007c4c <__sfp+0x88>)
 8007bf4:	60e3      	str	r3, [r4, #12]
 8007bf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bfa:	6665      	str	r5, [r4, #100]	; 0x64
 8007bfc:	f000 f847 	bl	8007c8e <__retarget_lock_init_recursive>
 8007c00:	f7ff ff96 	bl	8007b30 <__sfp_lock_release>
 8007c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c0c:	6025      	str	r5, [r4, #0]
 8007c0e:	61a5      	str	r5, [r4, #24]
 8007c10:	2208      	movs	r2, #8
 8007c12:	4629      	mov	r1, r5
 8007c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c18:	f7fd fafa 	bl	8005210 <memset>
 8007c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c24:	4620      	mov	r0, r4
 8007c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c28:	3468      	adds	r4, #104	; 0x68
 8007c2a:	e7d9      	b.n	8007be0 <__sfp+0x1c>
 8007c2c:	2104      	movs	r1, #4
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f7ff ff62 	bl	8007af8 <__sfmoreglue>
 8007c34:	4604      	mov	r4, r0
 8007c36:	6030      	str	r0, [r6, #0]
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d1d5      	bne.n	8007be8 <__sfp+0x24>
 8007c3c:	f7ff ff78 	bl	8007b30 <__sfp_lock_release>
 8007c40:	230c      	movs	r3, #12
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	e7ee      	b.n	8007c24 <__sfp+0x60>
 8007c46:	bf00      	nop
 8007c48:	08007fc0 	.word	0x08007fc0
 8007c4c:	ffff0001 	.word	0xffff0001

08007c50 <_fwalk_reent>:
 8007c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c54:	4606      	mov	r6, r0
 8007c56:	4688      	mov	r8, r1
 8007c58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c5c:	2700      	movs	r7, #0
 8007c5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c62:	f1b9 0901 	subs.w	r9, r9, #1
 8007c66:	d505      	bpl.n	8007c74 <_fwalk_reent+0x24>
 8007c68:	6824      	ldr	r4, [r4, #0]
 8007c6a:	2c00      	cmp	r4, #0
 8007c6c:	d1f7      	bne.n	8007c5e <_fwalk_reent+0xe>
 8007c6e:	4638      	mov	r0, r7
 8007c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c74:	89ab      	ldrh	r3, [r5, #12]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d907      	bls.n	8007c8a <_fwalk_reent+0x3a>
 8007c7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	d003      	beq.n	8007c8a <_fwalk_reent+0x3a>
 8007c82:	4629      	mov	r1, r5
 8007c84:	4630      	mov	r0, r6
 8007c86:	47c0      	blx	r8
 8007c88:	4307      	orrs	r7, r0
 8007c8a:	3568      	adds	r5, #104	; 0x68
 8007c8c:	e7e9      	b.n	8007c62 <_fwalk_reent+0x12>

08007c8e <__retarget_lock_init_recursive>:
 8007c8e:	4770      	bx	lr

08007c90 <__retarget_lock_acquire_recursive>:
 8007c90:	4770      	bx	lr

08007c92 <__retarget_lock_release_recursive>:
 8007c92:	4770      	bx	lr

08007c94 <__swhatbuf_r>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	460e      	mov	r6, r1
 8007c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	b096      	sub	sp, #88	; 0x58
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	461d      	mov	r5, r3
 8007ca4:	da07      	bge.n	8007cb6 <__swhatbuf_r+0x22>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	602b      	str	r3, [r5, #0]
 8007caa:	89b3      	ldrh	r3, [r6, #12]
 8007cac:	061a      	lsls	r2, r3, #24
 8007cae:	d410      	bmi.n	8007cd2 <__swhatbuf_r+0x3e>
 8007cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb4:	e00e      	b.n	8007cd4 <__swhatbuf_r+0x40>
 8007cb6:	466a      	mov	r2, sp
 8007cb8:	f000 f902 	bl	8007ec0 <_fstat_r>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	dbf2      	blt.n	8007ca6 <__swhatbuf_r+0x12>
 8007cc0:	9a01      	ldr	r2, [sp, #4]
 8007cc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cca:	425a      	negs	r2, r3
 8007ccc:	415a      	adcs	r2, r3
 8007cce:	602a      	str	r2, [r5, #0]
 8007cd0:	e7ee      	b.n	8007cb0 <__swhatbuf_r+0x1c>
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	b016      	add	sp, #88	; 0x58
 8007cda:	bd70      	pop	{r4, r5, r6, pc}

08007cdc <__smakebuf_r>:
 8007cdc:	898b      	ldrh	r3, [r1, #12]
 8007cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ce0:	079d      	lsls	r5, r3, #30
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	d507      	bpl.n	8007cf8 <__smakebuf_r+0x1c>
 8007ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	6123      	str	r3, [r4, #16]
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	6163      	str	r3, [r4, #20]
 8007cf4:	b002      	add	sp, #8
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	ab01      	add	r3, sp, #4
 8007cfa:	466a      	mov	r2, sp
 8007cfc:	f7ff ffca 	bl	8007c94 <__swhatbuf_r>
 8007d00:	9900      	ldr	r1, [sp, #0]
 8007d02:	4605      	mov	r5, r0
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff f987 	bl	8007018 <_malloc_r>
 8007d0a:	b948      	cbnz	r0, 8007d20 <__smakebuf_r+0x44>
 8007d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d10:	059a      	lsls	r2, r3, #22
 8007d12:	d4ef      	bmi.n	8007cf4 <__smakebuf_r+0x18>
 8007d14:	f023 0303 	bic.w	r3, r3, #3
 8007d18:	f043 0302 	orr.w	r3, r3, #2
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	e7e3      	b.n	8007ce8 <__smakebuf_r+0xc>
 8007d20:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <__smakebuf_r+0x7c>)
 8007d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	6020      	str	r0, [r4, #0]
 8007d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	9b00      	ldr	r3, [sp, #0]
 8007d30:	6163      	str	r3, [r4, #20]
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	6120      	str	r0, [r4, #16]
 8007d36:	b15b      	cbz	r3, 8007d50 <__smakebuf_r+0x74>
 8007d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f000 f8d1 	bl	8007ee4 <_isatty_r>
 8007d42:	b128      	cbz	r0, 8007d50 <__smakebuf_r+0x74>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f023 0303 	bic.w	r3, r3, #3
 8007d4a:	f043 0301 	orr.w	r3, r3, #1
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	89a0      	ldrh	r0, [r4, #12]
 8007d52:	4305      	orrs	r5, r0
 8007d54:	81a5      	strh	r5, [r4, #12]
 8007d56:	e7cd      	b.n	8007cf4 <__smakebuf_r+0x18>
 8007d58:	08007aed 	.word	0x08007aed

08007d5c <_malloc_usable_size_r>:
 8007d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d60:	1f18      	subs	r0, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfbc      	itt	lt
 8007d66:	580b      	ldrlt	r3, [r1, r0]
 8007d68:	18c0      	addlt	r0, r0, r3
 8007d6a:	4770      	bx	lr

08007d6c <_raise_r>:
 8007d6c:	291f      	cmp	r1, #31
 8007d6e:	b538      	push	{r3, r4, r5, lr}
 8007d70:	4604      	mov	r4, r0
 8007d72:	460d      	mov	r5, r1
 8007d74:	d904      	bls.n	8007d80 <_raise_r+0x14>
 8007d76:	2316      	movs	r3, #22
 8007d78:	6003      	str	r3, [r0, #0]
 8007d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d82:	b112      	cbz	r2, 8007d8a <_raise_r+0x1e>
 8007d84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d88:	b94b      	cbnz	r3, 8007d9e <_raise_r+0x32>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f830 	bl	8007df0 <_getpid_r>
 8007d90:	462a      	mov	r2, r5
 8007d92:	4601      	mov	r1, r0
 8007d94:	4620      	mov	r0, r4
 8007d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d9a:	f000 b817 	b.w	8007dcc <_kill_r>
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d00a      	beq.n	8007db8 <_raise_r+0x4c>
 8007da2:	1c59      	adds	r1, r3, #1
 8007da4:	d103      	bne.n	8007dae <_raise_r+0x42>
 8007da6:	2316      	movs	r3, #22
 8007da8:	6003      	str	r3, [r0, #0]
 8007daa:	2001      	movs	r0, #1
 8007dac:	e7e7      	b.n	8007d7e <_raise_r+0x12>
 8007dae:	2400      	movs	r4, #0
 8007db0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007db4:	4628      	mov	r0, r5
 8007db6:	4798      	blx	r3
 8007db8:	2000      	movs	r0, #0
 8007dba:	e7e0      	b.n	8007d7e <_raise_r+0x12>

08007dbc <raise>:
 8007dbc:	4b02      	ldr	r3, [pc, #8]	; (8007dc8 <raise+0xc>)
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	f7ff bfd3 	b.w	8007d6c <_raise_r>
 8007dc6:	bf00      	nop
 8007dc8:	2000000c 	.word	0x2000000c

08007dcc <_kill_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d07      	ldr	r5, [pc, #28]	; (8007dec <_kill_r+0x20>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	f7f9 fba5 	bl	8001528 <_kill>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d102      	bne.n	8007de8 <_kill_r+0x1c>
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	b103      	cbz	r3, 8007de8 <_kill_r+0x1c>
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
 8007dea:	bf00      	nop
 8007dec:	2000032c 	.word	0x2000032c

08007df0 <_getpid_r>:
 8007df0:	f7f9 bb92 	b.w	8001518 <_getpid>

08007df4 <__sread>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	460c      	mov	r4, r1
 8007df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfc:	f000 f894 	bl	8007f28 <_read_r>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	bfab      	itete	ge
 8007e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e06:	89a3      	ldrhlt	r3, [r4, #12]
 8007e08:	181b      	addge	r3, r3, r0
 8007e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e0e:	bfac      	ite	ge
 8007e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e12:	81a3      	strhlt	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__swrite>:
 8007e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1a:	461f      	mov	r7, r3
 8007e1c:	898b      	ldrh	r3, [r1, #12]
 8007e1e:	05db      	lsls	r3, r3, #23
 8007e20:	4605      	mov	r5, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	4616      	mov	r6, r2
 8007e26:	d505      	bpl.n	8007e34 <__swrite+0x1e>
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f000 f868 	bl	8007f04 <_lseek_r>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e3e:	81a3      	strh	r3, [r4, #12]
 8007e40:	4632      	mov	r2, r6
 8007e42:	463b      	mov	r3, r7
 8007e44:	4628      	mov	r0, r5
 8007e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	f000 b817 	b.w	8007e7c <_write_r>

08007e4e <__sseek>:
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	460c      	mov	r4, r1
 8007e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e56:	f000 f855 	bl	8007f04 <_lseek_r>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	bf15      	itete	ne
 8007e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e6a:	81a3      	strheq	r3, [r4, #12]
 8007e6c:	bf18      	it	ne
 8007e6e:	81a3      	strhne	r3, [r4, #12]
 8007e70:	bd10      	pop	{r4, pc}

08007e72 <__sclose>:
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 b813 	b.w	8007ea0 <_close_r>
	...

08007e7c <_write_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d07      	ldr	r5, [pc, #28]	; (8007e9c <_write_r+0x20>)
 8007e80:	4604      	mov	r4, r0
 8007e82:	4608      	mov	r0, r1
 8007e84:	4611      	mov	r1, r2
 8007e86:	2200      	movs	r2, #0
 8007e88:	602a      	str	r2, [r5, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f7f9 fb83 	bl	8001596 <_write>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_write_r+0x1e>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_write_r+0x1e>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	2000032c 	.word	0x2000032c

08007ea0 <_close_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d06      	ldr	r5, [pc, #24]	; (8007ebc <_close_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7f9 fb8f 	bl	80015ce <_close>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_close_r+0x1a>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_close_r+0x1a>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	2000032c 	.word	0x2000032c

08007ec0 <_fstat_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_fstat_r+0x20>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	f7f9 fb8a 	bl	80015e6 <_fstat>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d102      	bne.n	8007edc <_fstat_r+0x1c>
 8007ed6:	682b      	ldr	r3, [r5, #0]
 8007ed8:	b103      	cbz	r3, 8007edc <_fstat_r+0x1c>
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	2000032c 	.word	0x2000032c

08007ee4 <_isatty_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d06      	ldr	r5, [pc, #24]	; (8007f00 <_isatty_r+0x1c>)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	602b      	str	r3, [r5, #0]
 8007ef0:	f7f9 fb89 	bl	8001606 <_isatty>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_isatty_r+0x1a>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_isatty_r+0x1a>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	2000032c 	.word	0x2000032c

08007f04 <_lseek_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d07      	ldr	r5, [pc, #28]	; (8007f24 <_lseek_r+0x20>)
 8007f08:	4604      	mov	r4, r0
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	602a      	str	r2, [r5, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7f9 fb82 	bl	800161c <_lseek>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_lseek_r+0x1e>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_lseek_r+0x1e>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	2000032c 	.word	0x2000032c

08007f28 <_read_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d07      	ldr	r5, [pc, #28]	; (8007f48 <_read_r+0x20>)
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	4608      	mov	r0, r1
 8007f30:	4611      	mov	r1, r2
 8007f32:	2200      	movs	r2, #0
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f7f9 fb10 	bl	800155c <_read>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_read_r+0x1e>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_read_r+0x1e>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	2000032c 	.word	0x2000032c

08007f4c <_init>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr

08007f58 <_fini>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr
